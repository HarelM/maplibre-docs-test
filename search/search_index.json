{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"style-spec/","title":"Style Specifications","text":"<p>The style spec is the defition language for the visualization of the map. It can be fine tuned to show the most amazing maps! In order to learn it better the following documenation site was created for it:</p> <p>Style Specifications</p> <p>Enjoy!</p>"},{"location":"API/","title":"Intro","text":"<p>This file is intended as a reference for the important and public classes of this API.</p> <p>We reccomend to look at the expamples as they will help you the most to start with MapLibre.</p> <ul> <li>Map</li> </ul>"},{"location":"API/#controls","title":"Controls","text":"<ul> <li>FullscreenControl</li> </ul>"},{"location":"API/classes/maplibregl.AJAXError/","title":"Class: AJAXError","text":"<p>maplibregl.AJAXError</p> <p>An error thrown when a HTTP request results in an error response.</p> <p><code>Param</code></p> <p>The response's HTTP status code.</p> <p><code>Param</code></p> <p>The response's HTTP status text.</p> <p><code>Param</code></p> <p>The request's URL.</p> <p><code>Param</code></p> <p>The response's body.</p>"},{"location":"API/classes/maplibregl.AJAXError/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Error</code></li> </ul> <p>\u21b3 <code>AJAXError</code></p>"},{"location":"API/classes/maplibregl.AJAXError/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.AJAXError/#body","title":"body","text":"<p>\u2022 body: <code>Blob</code></p> <p>The response's body.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in","title":"Defined in","text":"<p>src/util/ajax.ts:74</p>"},{"location":"API/classes/maplibregl.AJAXError/#status","title":"status","text":"<p>\u2022 status: <code>number</code></p> <p>The response's HTTP status code.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_1","title":"Defined in","text":"<p>src/util/ajax.ts:59</p>"},{"location":"API/classes/maplibregl.AJAXError/#statustext","title":"statusText","text":"<p>\u2022 statusText: <code>string</code></p> <p>The response's HTTP status text.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_2","title":"Defined in","text":"<p>src/util/ajax.ts:64</p>"},{"location":"API/classes/maplibregl.AJAXError/#url","title":"url","text":"<p>\u2022 url: <code>string</code></p> <p>The request's URL.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_3","title":"Defined in","text":"<p>src/util/ajax.ts:69</p>"},{"location":"API/classes/maplibregl.Actor/","title":"Class: Actor","text":"<p>maplibregl.Actor</p> <p>An implementation of the Actor design pattern that maintains the relationship between asynchronous tasks and the objects that spin them off - in this case, tasks like parsing parts of styles, owned by the styles</p> <p><code>Param</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>A unique identifier for the Map instance using this Actor.</p>"},{"location":"API/classes/maplibregl.Actor/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Actor/#send","title":"send","text":"<p>\u25b8 <code>Private</code> send(<code>type</code>, <code>data</code>, <code>callback?</code>, <code>targetMapId?</code>, <code>mustQueue?</code>): <code>Cancelable</code></p> <p>Sends a message from a main-thread map to a Worker or from a Worker back to a main-thread map instance.</p>"},{"location":"API/classes/maplibregl.Actor/#parameters","title":"Parameters","text":"Name Type Default value Description <code>type</code> <code>string</code> <code>undefined</code> The name of the target method to invoke or '[source-type].[source-name].name' for a method on a WorkerSource. <code>data</code> <code>unknown</code> <code>undefined</code> - <code>callback?</code> <code>Function</code> <code>undefined</code> - <code>targetMapId?</code> <code>string</code> <code>undefined</code> A particular mapId to which to send this message. <code>mustQueue</code> <code>boolean</code> <code>false</code> -"},{"location":"API/classes/maplibregl.Actor/#returns","title":"Returns","text":"<p><code>Cancelable</code></p>"},{"location":"API/classes/maplibregl.Actor/#defined-in","title":"Defined in","text":"<p>src/util/actor.ts:58</p>"},{"location":"API/classes/maplibregl.AttributionControl/","title":"Class: AttributionControl","text":"<p>maplibregl.AttributionControl</p> <p>An <code>AttributionControl</code> control presents the map's attribution information. By default, the attribution control is expanded (regardless of map width).</p> <p><code>Implements</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>If <code>true</code>, the attribution control will always collapse when moving the map. If <code>false</code>, force the expanded attribution control. The default is a responsive attribution that collapses when the user moves the map on maps less than 640 pixels wide.  Attribution should not be collapsed if it can comfortably fit on the map. <code>compact</code> should only be used to modify default attribution when map size makes it impossible to fit default attribution and when the automatic compact resizing for default settings are not sufficient.</p> <p><code>Param</code></p> <p>String or strings to show in addition to any other attributions.</p> <p><code>Example</code></p> <pre><code>var map = new maplibregl.Map({attributionControl: false})\n.addControl(new maplibregl.AttributionControl({\ncompact: true\n}));\n</code></pre>"},{"location":"API/classes/maplibregl.AttributionControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.BoxZoomHandler/","title":"Class: BoxZoomHandler","text":"<p>maplibregl.BoxZoomHandler</p> <p>The <code>BoxZoomHandler</code> allows the user to zoom the map to fit within a bounding box. The bounding box is defined by clicking and holding <code>shift</code> while dragging the cursor.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.BoxZoomHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new BoxZoomHandler(<code>map</code>, <code>options</code>)</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#parameters","title":"Parameters","text":"Name Type <code>map</code> <code>Map</code> <code>options</code> <code>Object</code> <code>options.clickTolerance</code> <code>number</code>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:29</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.BoxZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"box zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.boxZoom.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:74</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"box zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.boxZoom.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:63</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"box zoom\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"box zoom\" interaction is active.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isActive</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:53</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"box zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"box zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of_3","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:44</p>"},{"location":"API/classes/maplibregl.CanvasSource/","title":"Class: CanvasSource","text":"<p>maplibregl.CanvasSource</p> <p>A data source containing the contents of an HTML canvas. See CanvasSourceOptions for detailed documentation of options.</p> <p><code>Example</code></p> <pre><code>// add to map\nmap.addSource('some id', {\ntype: 'canvas',\ncanvas: 'idOfMyHTMLCanvas',\nanimate: true,\ncoordinates: [\n[-76.54, 39.18],\n[-76.52, 39.18],\n[-76.52, 39.17],\n[-76.54, 39.17]\n]\n});\n// update\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n[-76.54335737228394, 39.18579907229748],\n[-76.52803659439087, 39.1838364847587],\n[-76.5295386314392, 39.17683392507606],\n[-76.54520273208618, 39.17876344106642]\n]);\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/maplibregl.CanvasSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ImageSource</code></li> </ul> <p>\u21b3 <code>CanvasSource</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.CanvasSource/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new CanvasSource(<code>id</code>, <code>options</code>, <code>dispatcher</code>, <code>eventedParent</code>)</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters","title":"Parameters","text":"Name Type <code>id</code> <code>string</code> <code>options</code> <code>CanvasSourceSpecification</code> <code>dispatcher</code> <code>Dispatcher</code> <code>eventedParent</code> <code>Evented</code>"},{"location":"API/classes/maplibregl.CanvasSource/#overrides","title":"Overrides","text":"<p>ImageSource.constructor</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in","title":"Defined in","text":"<p>src/source/canvas_source.ts:71</p>"},{"location":"API/classes/maplibregl.CanvasSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.CanvasSource/#getcanvas","title":"getCanvas","text":"<p>\u25b8 getCanvas(): <code>HTMLCanvasElement</code></p> <p>Returns the HTML <code>canvas</code> element.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#returns","title":"Returns","text":"<p><code>HTMLCanvasElement</code></p> <p>The HTML <code>canvas</code> element.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_1","title":"Defined in","text":"<p>src/source/canvas_source.ts:147</p>"},{"location":"API/classes/maplibregl.CanvasSource/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.CanvasSource/#returns_1","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from","title":"Inherited from","text":"<p>ImageSource.listens</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.CanvasSource/#load","title":"load","text":"<p>\u25b8 load(): <code>void</code></p> <p>Disables animation. The map will display a static copy of the canvas image.</p> <p><code>Method</code></p> <p>pause</p> <p><code>Instance</code></p> <p><code>Memberof</code></p> <p>CanvasSource</p>"},{"location":"API/classes/maplibregl.CanvasSource/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#overrides_1","title":"Overrides","text":"<p>ImageSource.load</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_3","title":"Defined in","text":"<p>src/source/canvas_source.ts:110</p>"},{"location":"API/classes/maplibregl.CanvasSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>CanvasSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.CanvasSource/#returns_3","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_1","title":"Inherited from","text":"<p>ImageSource.off</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.CanvasSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>CanvasSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.CanvasSource/#returns_4","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_2","title":"Inherited from","text":"<p>ImageSource.on</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.CanvasSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>CanvasSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.CanvasSource/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>CanvasSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_3","title":"Inherited from","text":"<p>ImageSource.once</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.CanvasSource/#setcoordinates","title":"setCoordinates","text":"<p>\u25b8 setCoordinates(<code>coordinates</code>): <code>CanvasSource</code></p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/maplibregl.CanvasSource/#returns_6","title":"Returns","text":"<p><code>CanvasSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_4","title":"Inherited from","text":"<p>ImageSource.setCoordinates</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_7","title":"Defined in","text":"<p>src/source/image_source.ts:196</p>"},{"location":"API/classes/maplibregl.CanvasSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>CanvasSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_6","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.CanvasSource/#returns_7","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_5","title":"Inherited from","text":"<p>ImageSource.setEventedParent</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_8","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.CanvasSource/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>options</code>): <code>CanvasSource</code></p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_7","title":"Parameters","text":"Name Type Description <code>options</code> <code>Object</code> Options object. <code>options.coordinates?</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle. <code>options.url</code> <code>string</code> Required image URL."},{"location":"API/classes/maplibregl.CanvasSource/#returns_8","title":"Returns","text":"<p><code>CanvasSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_6","title":"Inherited from","text":"<p>ImageSource.updateImage</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_9","title":"Defined in","text":"<p>src/source/image_source.ts:150</p>"},{"location":"API/classes/maplibregl.CircleBucket/","title":"Class: CircleBucket&lt;Layer&gt;","text":"<p>maplibregl.CircleBucket</p> <p>Circles are represented by two triangles.</p> <p>Each corner has a pos that is the center of the circle and an extrusion vector that is where it points.</p>"},{"location":"API/classes/maplibregl.CircleBucket/#type-parameters","title":"Type parameters","text":"Name Type <code>Layer</code> extends <code>CircleStyleLayer</code> | <code>HeatmapStyleLayer</code>"},{"location":"API/classes/maplibregl.CircleBucket/#implements","title":"Implements","text":"<ul> <li><code>Bucket</code></li> </ul>"},{"location":"API/classes/maplibregl.CollisionBoxArray/","title":"Class: CollisionBoxArray","text":"<p>maplibregl.CollisionBoxArray</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArrayLayout6i1ul2ui20</code></li> </ul> <p>\u21b3 <code>CollisionBoxArray</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.CollisionBoxArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#inherited-from","title":"Inherited from","text":"<p>StructArrayLayout6i1ul2ui20._trim</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#inherited-from_1","title":"Inherited from","text":"<p>StructArrayLayout6i1ul2ui20.clear</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#get","title":"get","text":"<p>\u25b8 <code>Private</code> get(<code>index</code>): <code>CollisionBoxStruct</code></p> <p>Return the CollisionBoxStruct at the given location in the array.</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#parameters","title":"Parameters","text":"Name Type Description <code>index</code> <code>number</code> The index of the element."},{"location":"API/classes/maplibregl.CollisionBoxArray/#returns_2","title":"Returns","text":"<p><code>CollisionBoxStruct</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#defined-in_2","title":"Defined in","text":"<p>src/data/array_types.g.ts:878</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.CollisionBoxArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#inherited-from_2","title":"Inherited from","text":"<p>StructArrayLayout6i1ul2ui20.reserve</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#parameters_2","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.CollisionBoxArray/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#inherited-from_3","title":"Inherited from","text":"<p>StructArrayLayout6i1ul2ui20.resize</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#parameters_3","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.CollisionBoxArray/#returns_5","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#inherited-from_4","title":"Inherited from","text":"<p>StructArrayLayout6i1ul2ui20.serialize</p>"},{"location":"API/classes/maplibregl.CollisionBoxArray/#defined-in_5","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.CollisionIndex/","title":"Class: CollisionIndex","text":"<p>maplibregl.CollisionIndex</p> <p>A collision index used to prevent symbols from overlapping. It keep tracks of where previous symbols have been placed and is used to check if a new symbol overlaps with any previously added symbols.</p> <p>There are two steps to insertion: first placeCollisionBox/Circles checks if there's room for a symbol, then insertCollisionBox/Circles actually puts the symbol in the index. The two step process allows paired symbols to be inserted together even if they overlap.</p>"},{"location":"API/classes/maplibregl.CollisionIndex/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.CollisionIndex/#queryrenderedsymbols","title":"queryRenderedSymbols","text":"<p>\u25b8 <code>Private</code> queryRenderedSymbols(<code>viewportQueryGeometry</code>): <code>Object</code></p> <p>Because the geometries in the CollisionIndex are an approximation of the shape of symbols on the map, we use the CollisionIndex to look up the symbol part of <code>queryRenderedFeatures</code>.</p>"},{"location":"API/classes/maplibregl.CollisionIndex/#parameters","title":"Parameters","text":"Name Type <code>viewportQueryGeometry</code> <code>Point</code>[]"},{"location":"API/classes/maplibregl.CollisionIndex/#returns","title":"Returns","text":"<p><code>Object</code></p>"},{"location":"API/classes/maplibregl.CollisionIndex/#defined-in","title":"Defined in","text":"<p>src/symbol/collision_index.ts:288</p>"},{"location":"API/classes/maplibregl.ColorRampProperty/","title":"Class: ColorRampProperty","text":"<p>maplibregl.ColorRampProperty</p> <p>An implementation of <code>Property</code> for <code>heatmap-color</code> and <code>line-gradient</code>. Interpolation is a no-op, and evaluation returns a boolean value in order to indicate its presence, but the real evaluation happens in StyleLayer classes.</p>"},{"location":"API/classes/maplibregl.ColorRampProperty/#implements","title":"Implements","text":"<ul> <li><code>Property</code>&lt;<code>Color</code>, <code>boolean</code>&gt;</li> </ul>"},{"location":"API/classes/maplibregl.CrossFadedDataDrivenProperty/","title":"Class: CrossFadedDataDrivenProperty&lt;T&gt;","text":"<p>maplibregl.CrossFadedDataDrivenProperty</p> <p>An implementation of <code>Property</code> for  data driven <code>line-pattern</code> which are transitioned by cross-fading rather than interpolation.</p>"},{"location":"API/classes/maplibregl.CrossFadedDataDrivenProperty/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/classes/maplibregl.CrossFadedDataDrivenProperty/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>DataDrivenProperty</code>&lt;<code>CrossFaded</code>&lt;<code>T</code>&gt;&gt;</li> </ul> <p>\u21b3 <code>CrossFadedDataDrivenProperty</code></p>"},{"location":"API/classes/maplibregl.CrossFadedProperty/","title":"Class: CrossFadedProperty&lt;T&gt;","text":"<p>maplibregl.CrossFadedProperty</p> <p>An implementation of <code>Property</code> for <code>*-pattern</code> and <code>line-dasharray</code>, which are transitioned by cross-fading rather than interpolation.</p>"},{"location":"API/classes/maplibregl.CrossFadedProperty/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/classes/maplibregl.CrossFadedProperty/#implements","title":"Implements","text":"<ul> <li><code>Property</code>&lt;<code>T</code>, <code>CrossFaded</code>&lt;<code>T</code>&gt;&gt;</li> </ul>"},{"location":"API/classes/maplibregl.DataConstantProperty/","title":"Class: DataConstantProperty&lt;T&gt;","text":"<p>maplibregl.DataConstantProperty</p> <p>An implementation of <code>Property</code> for properties that do not permit data-driven (source or composite) expressions. This restriction allows us to declare statically that the result of possibly evaluating this kind of property is in fact always the scalar type <code>T</code>, and can be used without further evaluating the value on a per-feature basis.</p>"},{"location":"API/classes/maplibregl.DataConstantProperty/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/classes/maplibregl.DataConstantProperty/#implements","title":"Implements","text":"<ul> <li><code>Property</code>&lt;<code>T</code>, <code>T</code>&gt;</li> </ul>"},{"location":"API/classes/maplibregl.DataDrivenProperty/","title":"Class: DataDrivenProperty&lt;T&gt;","text":"<p>maplibregl.DataDrivenProperty</p> <p>An implementation of <code>Property</code> for properties that permit data-driven (source or composite) expressions. The result of possibly evaluating this kind of property is <code>PossiblyEvaluatedPropertyValue&lt;T&gt;</code>; obtaining a scalar value <code>T</code> requires further evaluation on a per-feature basis.</p>"},{"location":"API/classes/maplibregl.DataDrivenProperty/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/classes/maplibregl.DataDrivenProperty/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>DataDrivenProperty</code></li> </ul> <p>\u21b3 <code>CrossFadedDataDrivenProperty</code></p>"},{"location":"API/classes/maplibregl.DataDrivenProperty/#implements","title":"Implements","text":"<ul> <li><code>Property</code>&lt;<code>T</code>, <code>PossiblyEvaluatedPropertyValue</code>&lt;<code>T</code>&gt;&gt;</li> </ul>"},{"location":"API/classes/maplibregl.Dispatcher/","title":"Class: Dispatcher","text":"<p>maplibregl.Dispatcher</p> <p>Responsible for sending messages from a Source to an associated WorkerSource.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Dispatcher/#broadcast","title":"broadcast","text":"<p>\u25b8 <code>Private</code> broadcast(<code>type</code>, <code>data</code>, <code>cb?</code>): <code>void</code></p> <p>Broadcast a message to all Workers.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#parameters","title":"Parameters","text":"Name Type <code>type</code> <code>string</code> <code>data</code> <code>unknown</code> <code>cb?</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>any</code>"},{"location":"API/classes/maplibregl.Dispatcher/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Dispatcher/#defined-in","title":"Defined in","text":"<p>src/util/dispatcher.ts:42</p>"},{"location":"API/classes/maplibregl.Dispatcher/#getactor","title":"getActor","text":"<p>\u25b8 getActor(): <code>Actor</code></p> <p>Acquires an actor to dispatch messages to. The actors are distributed in round-robin fashion.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#returns_1","title":"Returns","text":"<p><code>Actor</code></p> <p>An actor object backed by a web worker for processing messages.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#defined-in_1","title":"Defined in","text":"<p>src/util/dispatcher.ts:53</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/","title":"Class: DoubleClickZoomHandler","text":"<p>maplibregl.DoubleClickZoomHandler</p> <p>The <code>DoubleClickZoomHandler</code> allows the user to zoom the map at a point by double clicking or double tapping.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new DoubleClickZoomHandler(<code>clickZoom</code>, <code>TapZoom</code>)</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#parameters","title":"Parameters","text":"Name Type <code>clickZoom</code> <code>ClickZoomHandler</code> <code>TapZoom</code> <code>TapZoomHandler</code>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:16</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"double click to zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.doubleClickZoom.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:38</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"double click to zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.doubleClickZoom.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:27</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"double click to zoom\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"double click to zoom\" interaction is active.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:57</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"double click to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"double click to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:48</p>"},{"location":"API/classes/maplibregl.DragPanHandler/","title":"Class: DragPanHandler","text":"<p>maplibregl.DragPanHandler</p> <p>The <code>DragPanHandler</code> allows the user to pan the map by clicking and dragging the cursor.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.DragPanHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new DragPanHandler(<code>el</code>, <code>mousePan</code>, <code>touchPan</code>)</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#parameters","title":"Parameters","text":"Name Type <code>el</code> <code>HTMLElement</code> <code>mousePan</code> <code>MousePanHandler</code> <code>touchPan</code> <code>TouchPanHandler</code>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:25</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.DragPanHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to pan\" interaction.</p> <p><code>Example</code></p> <pre><code>map.dragPan.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.DragPanHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:63</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"drag to pan\" interaction.</p> <p><code>Example</code></p> <pre><code>map.dragPan.enable();\n</code></pre> <p><code>Example</code></p> <pre><code>map.dragPan.enable({\nlinearity: 0.3,\neasing: bezier(0, 0, 0.3, 1),\nmaxSpeed: 1400,\ndeceleration: 2500,\n});\n</code></pre>"},{"location":"API/classes/maplibregl.DragPanHandler/#parameters_1","title":"Parameters","text":"Name Type Description <code>options?</code> <code>boolean</code> | <code>DragPanOptions</code> Options object"},{"location":"API/classes/maplibregl.DragPanHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:50</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pan\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pan\" interaction is active.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:83</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pan\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pan\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:74</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/","title":"Class: DragRotateHandler","text":"<p>maplibregl.DragRotateHandler</p> <p>The <code>DragRotateHandler</code> allows the user to rotate the map by clicking and dragging the cursor while holding the right mouse button or <code>ctrl</code> key.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.DragRotateHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new DragRotateHandler(<code>options?</code>, <code>mouseRotate</code>, <code>mousePitch</code>)</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> <code>options.pitchWithRotate</code> <code>boolean</code> Control the map pitch in addition to the bearing <code>mouseRotate</code> <code>MouseRotateHandler</code> - <code>mousePitch</code> <code>MousePitchHandler</code> -"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:20</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.DragRotateHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to rotate\" interaction.</p> <p><code>Example</code></p> <pre><code>map.dragRotate.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:45</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"drag to rotate\" interaction.</p> <p><code>Example</code></p> <pre><code>map.dragRotate.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:34</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to rotate\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to rotate\" interaction is active.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:64</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to rotate\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to rotate\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:55</p>"},{"location":"API/classes/maplibregl.EdgeInsets/","title":"Class: EdgeInsets","text":"<p>maplibregl.EdgeInsets</p> <p>An <code>EdgeInset</code> object represents screen space padding applied to the edges of the viewport. This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements on top of the map and having the vanishing point shift as UI elements resize.</p> <p><code>Param</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p><code>Param</code></p>"},{"location":"API/classes/maplibregl.EdgeInsets/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.EdgeInsets/#getcenter","title":"getCenter","text":"<p>\u25b8 getCenter(<code>width</code>, <code>height</code>): <code>Point</code></p> <p>Utility method that computes the new apprent center or vanishing point after applying insets. This is in pixels and with the top left being (0.0) and +y being downwards.</p> <p><code>Memberof</code></p> <p>EdgeInsets</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#parameters","title":"Parameters","text":"Name Type Description <code>width</code> <code>number</code> the width <code>height</code> <code>number</code> the height"},{"location":"API/classes/maplibregl.EdgeInsets/#returns","title":"Returns","text":"<p><code>Point</code></p> <p>the point</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in","title":"Defined in","text":"<p>src/geo/edge_insets.ts:63</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#interpolate","title":"interpolate","text":"<p>\u25b8 interpolate(<code>start</code>, <code>target</code>, <code>t</code>): <code>EdgeInsets</code></p> <p>Interpolates the inset in-place. This maintains the current inset value for any inset not present in <code>target</code>.</p> <p><code>Memberof</code></p> <p>EdgeInsets</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#parameters_1","title":"Parameters","text":"Name Type Description <code>start</code> <code>EdgeInsets</code> | <code>PaddingOptions</code> interpolation start <code>target</code> <code>PaddingOptions</code> interpolation target <code>t</code> <code>number</code> interpolation step/weight"},{"location":"API/classes/maplibregl.EdgeInsets/#returns_1","title":"Returns","text":"<p><code>EdgeInsets</code></p> <p>the insets</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_1","title":"Defined in","text":"<p>src/geo/edge_insets.ts:45</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#tojson","title":"toJSON","text":"<p>\u25b8 toJSON(): <code>PaddingOptions</code></p> <p>Returns the current state as json, useful when you want to have a read-only representation of the inset.</p> <p><code>Memberof</code></p> <p>EdgeInsets</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#returns_2","title":"Returns","text":"<p><code>PaddingOptions</code></p> <p>state as json</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_2","title":"Defined in","text":"<p>src/geo/edge_insets.ts:89</p>"},{"location":"API/classes/maplibregl.Evented/","title":"Class: Evented","text":"<p>maplibregl.Evented</p> <p>Methods mixed in to other classes for event capabilities.</p> <p><code>Mixin</code></p> <p>Evented</p>"},{"location":"API/classes/maplibregl.Evented/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>GeolocateControl</code></p> <p>\u21b3 <code>FullscreenControl</code></p> <p>\u21b3 <code>Popup</code></p> <p>\u21b3 <code>Marker</code></p> <p>\u21b3 <code>Style</code></p> <p>\u21b3 <code>GeoJSONSource</code></p> <p>\u21b3 <code>ImageSource</code></p> <p>\u21b3 <code>VectorTileSource</code></p> <p>\u21b3 <code>SourceCache</code></p> <p>\u21b3 <code>TerrainSourceCache</code></p>"},{"location":"API/classes/maplibregl.Evented/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Evented/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Evented/#returns","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Evented/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.Evented/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Evented</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Evented/#returns_1","title":"Returns","text":"<p><code>Evented</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.Evented/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Evented</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Evented/#returns_2","title":"Returns","text":"<p><code>Evented</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.Evented/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Evented</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Evented/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Evented</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.Evented/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Evented</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Evented/#returns_4","title":"Returns","text":"<p><code>Evented</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/","title":"Class: FeatureIndexArray","text":"<p>maplibregl.FeatureIndexArray</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArrayLayout1ul2ui8</code></li> </ul> <p>\u21b3 <code>FeatureIndexArray</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.FeatureIndexArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#inherited-from","title":"Inherited from","text":"<p>StructArrayLayout1ul2ui8._trim</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#inherited-from_1","title":"Inherited from","text":"<p>StructArrayLayout1ul2ui8.clear</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#get","title":"get","text":"<p>\u25b8 <code>Private</code> get(<code>index</code>): <code>FeatureIndexStruct</code></p> <p>Return the FeatureIndexStruct at the given location in the array.</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#parameters","title":"Parameters","text":"Name Type Description <code>index</code> <code>number</code> The index of the element."},{"location":"API/classes/maplibregl.FeatureIndexArray/#returns_2","title":"Returns","text":"<p><code>FeatureIndexStruct</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#defined-in_2","title":"Defined in","text":"<p>src/data/array_types.g.ts:1022</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.FeatureIndexArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#inherited-from_2","title":"Inherited from","text":"<p>StructArrayLayout1ul2ui8.reserve</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#parameters_2","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.FeatureIndexArray/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#inherited-from_3","title":"Inherited from","text":"<p>StructArrayLayout1ul2ui8.resize</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#parameters_3","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.FeatureIndexArray/#returns_5","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#inherited-from_4","title":"Inherited from","text":"<p>StructArrayLayout1ul2ui8.serialize</p>"},{"location":"API/classes/maplibregl.FeatureIndexArray/#defined-in_5","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.FullscreenControl/","title":"Class: FullscreenControl","text":"<p>maplibregl.FullscreenControl</p> <p>A <code>FullscreenControl</code> control contains a button for toggling the map in and out of fullscreen mode. When requestFullscreen is not supported, fullscreen is handled via CSS properties. The map's <code>cooperativeGestures</code> option is temporarily disabled while the map is in fullscreen mode, and is restored when the map exist fullscreen mode.</p> <p><code>Example</code></p> <pre><code>// Adds a full screen control to the map\nmap.addControl(new maplibregl.FullscreenControl({container: document.querySelector('body')}));\n</code></pre> <p><code>See</code></p> <p>View a fullscreen map example</p> <p>fullscreenstart - Fired when fullscreen mode has started  fullscreenend - Fired when fullscreen mode has ended</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>FullscreenControl</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.FullscreenControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.FullscreenControl/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.FullscreenControl/#returns","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>FullscreenControl</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.FullscreenControl/#returns_1","title":"Returns","text":"<p><code>FullscreenControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>FullscreenControl</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.FullscreenControl/#returns_2","title":"Returns","text":"<p><code>FullscreenControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>FullscreenControl</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.FullscreenControl/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>FullscreenControl</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>FullscreenControl</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.FullscreenControl/#returns_4","title":"Returns","text":"<p><code>FullscreenControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/","title":"Class: GeoJSONSource","text":"<p>maplibregl.GeoJSONSource</p> <p>A source containing GeoJSON. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\ntype: 'geojson',\ndata: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\ntype: 'geojson',\ndata: {\n\"type\": \"FeatureCollection\",\n\"features\": [{\n\"type\": \"Feature\",\n\"properties\": {},\n\"geometry\": {\n\"type\": \"Point\",\n\"coordinates\": [\n-76.53063297271729,\n39.18174077994108\n]\n}\n}]\n}\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.getSource('some id').setData({\n\"type\": \"FeatureCollection\",\n\"features\": [{\n\"type\": \"Feature\",\n\"properties\": { \"name\": \"Null Island\" },\n\"geometry\": {\n\"type\": \"Point\",\n\"coordinates\": [ 0, 0 ]\n}\n}]\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Draw GeoJSON points</li> <li>Add a GeoJSON line</li> <li>Create a heatmap from points</li> <li>Create and style clusters</li> </ul>"},{"location":"API/classes/maplibregl.GeoJSONSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>GeoJSONSource</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.GeoJSONSource/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.GeoJSONSource/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new GeoJSONSource(<code>id</code>, <code>options</code>, <code>dispatcher</code>, <code>eventedParent</code>)</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters","title":"Parameters","text":"Name Type <code>id</code> <code>string</code> <code>options</code> <code>GeoJSONSourceOptions</code> <code>dispatcher</code> <code>Dispatcher</code> <code>eventedParent</code> <code>Evented</code>"},{"location":"API/classes/maplibregl.GeoJSONSource/#overrides","title":"Overrides","text":"<p>Evented.constructor</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in","title":"Defined in","text":"<p>src/source/geojson_source.ts:130</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.GeoJSONSource/#getclusterchildren","title":"getClusterChildren","text":"<p>\u25b8 getClusterChildren(<code>clusterId</code>, <code>callback</code>): <code>GeoJSONSource</code></p> <p>For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>callback</code> <code>Callback</code>&lt;<code>Feature</code>&lt;<code>Geometry</code>, { <code>[name: string]</code>: <code>any</code>;  }&gt;[]&gt; A callback to be called when the features are retrieved (<code>(error, features) =&gt; { ... }</code>)."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_1","title":"Defined in","text":"<p>src/source/geojson_source.ts:276</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#getclusterexpansionzoom","title":"getClusterExpansionZoom","text":"<p>\u25b8 getClusterExpansionZoom(<code>clusterId</code>, <code>callback</code>): <code>GeoJSONSource</code></p> <p>For clustered sources, fetches the zoom at which the given cluster expands.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>callback</code> <code>Callback</code>&lt;<code>number</code>&gt; A callback to be called when the zoom value is retrieved (<code>(error, zoom) =&gt; { ... }</code>)."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_1","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_2","title":"Defined in","text":"<p>src/source/geojson_source.ts:264</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#getclusterleaves","title":"getClusterLeaves","text":"<p>\u25b8 getClusterLeaves(<code>clusterId</code>, <code>limit</code>, <code>offset</code>, <code>callback</code>): <code>GeoJSONSource</code></p> <p>For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).</p> <p><code>Example</code></p> <pre><code>// Retrieve cluster leaves on click\nmap.on('click', 'clusters', function(e) {\nvar features = map.queryRenderedFeatures(e.point, {\nlayers: ['clusters']\n});\nvar clusterId = features[0].properties.cluster_id;\nvar pointCount = features[0].properties.point_count;\nvar clusterSource = map.getSource('clusters');\nclusterSource.getClusterLeaves(clusterId, pointCount, 0, function(error, features) {\n// Print cluster leaves in the console\nconsole.log('Cluster leaves:', error, features);\n})\n});\n</code></pre>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>limit</code> <code>number</code> The maximum number of features to return. <code>offset</code> <code>number</code> The number of features to skip (e.g. for pagination). <code>callback</code> <code>Callback</code>&lt;<code>Feature</code>&lt;<code>Geometry</code>, { <code>[name: string]</code>: <code>any</code>;  }&gt;[]&gt; A callback to be called when the features are retrieved (<code>(error, features) =&gt; { ... }</code>)."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_2","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_3","title":"Defined in","text":"<p>src/source/geojson_source.ts:306</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_3","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>GeoJSONSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_4","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>GeoJSONSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_5","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>GeoJSONSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>GeoJSONSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_7","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#setclusteroptions","title":"setClusterOptions","text":"<p>\u25b8 setClusterOptions(<code>options</code>): <code>GeoJSONSource</code></p> <p>To disable/enable clustering on the source options</p> <p><code>Example</code></p> <pre><code>map.getSource('some id').setClusterOptions({cluster: false});\nmap.getSource('some id').setClusterOptions({cluster: false, clusterRadius: 50, clusterMaxZoom: 14});\n</code></pre>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_8","title":"Parameters","text":"Name Type Description <code>options</code> <code>SetClusterOptions</code> The options to set"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_7","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_8","title":"Defined in","text":"<p>src/source/geojson_source.ts:247</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#setdata","title":"setData","text":"<p>\u25b8 setData(<code>data</code>): <code>GeoJSONSource</code></p> <p>Sets the GeoJSON data and re-renders the map.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_9","title":"Parameters","text":"Name Type Description <code>data</code> <code>string</code> | <code>GeoJSON</code> A GeoJSON data object or a URL to one. The latter is preferable in the case of large GeoJSON files."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_8","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_9","title":"Defined in","text":"<p>src/source/geojson_source.ts:210</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>GeoJSONSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_10","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_9","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#updatedata","title":"updateData","text":"<p>\u25b8 updateData(<code>diff</code>): <code>GeoJSONSource</code></p> <p>Updates the source's GeoJSON, and re-renders the map.</p> <p>For sources with lots of features, this method can be used to make updates more quickly.</p> <p>This approach requires unique IDs for every feature in the source. The IDs can either be specified on the feature, or by using the promoteId option to specify which property should be used as the ID.</p> <p>It is an error to call updateData on a source that did not have unique IDs for each of its features already.</p> <p>Updates are applied on a best-effort basis, updating an ID that does not exist will not result in an error.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_11","title":"Parameters","text":"Name Type Description <code>diff</code> <code>GeoJSONSourceDiff</code> The changes that need to be applied."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_10","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_11","title":"Defined in","text":"<p>src/source/geojson_source.ts:232</p>"},{"location":"API/classes/maplibregl.GeolocateControl/","title":"Class: GeolocateControl","text":"<p>maplibregl.GeolocateControl</p> <p>A <code>GeolocateControl</code> control provides a button that uses the browser's geolocation API to locate the user on the map.</p> <p>Not all browsers support geolocation, and some users may disable the feature. Geolocation support for modern browsers including Chrome requires sites to be served over HTTPS. If geolocation support is not available, the GeolocateControl will show as disabled.</p> <p>The zoom level applied will depend on the accuracy of the geolocation provided by the device.</p> <p>The GeolocateControl has two modes. If <code>trackUserLocation</code> is <code>false</code> (default) the control acts as a button, which when pressed will set the map's camera to target the user location. If the user moves, the map won't update. This is most suited for the desktop. If <code>trackUserLocation</code> is <code>true</code> the control acts as a toggle button that when active the user's location is actively monitored for changes. In this mode the GeolocateControl has three interaction states: * active - the map's camera automatically updates as the user's location changes, keeping the location dot in the center. Initial state and upon clicking the <code>GeolocateControl</code> button. * passive - the user's location dot automatically updates, but the map's camera does not. Occurs upon the user initiating a map movement. * disabled - occurs if Geolocation is not available, disabled or denied.</p> <p>These interaction states can't be controlled programmatically, rather they are set based on user interactions.</p> <p><code>Implements</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>false, timeout: 6000}] A Geolocation API PositionOptions object.</p> <p><code>Param</code></p> <p>15}] A fitBounds options object to use when the map is panned and zoomed to the user's location. The default is to use a <code>maxZoom</code> of 15 to limit how far the map will zoom in for very accurate locations.</p> <p><code>Param</code></p> <p>If <code>true</code> the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes.</p> <p><code>Param</code></p> <p>By default, if showUserLocation is <code>true</code>, a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to <code>false</code> to disable. Always disabled when showUserLocation is <code>false</code>.</p> <p><code>Param</code></p> <p>By default a dot will be shown on the map at the user's location. Set to <code>false</code> to disable.</p> <p><code>Example</code></p> <pre><code>map.addControl(new maplibregl.GeolocateControl({\npositionOptions: {\nenableHighAccuracy: true\n},\ntrackUserLocation: true\n}));\n</code></pre> <p><code>See</code></p> <p>Locate the user</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>GeolocateControl</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.GeolocateControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.GeolocateControl/#_isoutofmapmaxbounds","title":"_isOutOfMapMaxBounds","text":"<p>\u25b8 <code>Private</code> _isOutOfMapMaxBounds(<code>position</code>): <code>boolean</code></p> <p>Check if the Geolocation API Position is outside the map's maxbounds.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters","title":"Parameters","text":"Name Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p>Returns <code>true</code> if position is outside the map's maxbounds, otherwise returns <code>false</code>.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:131</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#_onsuccess","title":"_onSuccess","text":"<p>\u25b8 <code>Private</code> _onSuccess(<code>position</code>): <code>void</code></p> <p>When the Geolocation API returns a new location, update the GeolocateControl.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:177</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#_updatecamera","title":"_updateCamera","text":"<p>\u25b8 <code>Private</code> _updateCamera(<code>position</code>): <code>void</code></p> <p>Update the camera location to center on the current position</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_2","title":"Parameters","text":"Name Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_2","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:245</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#_updatemarker","title":"_updateMarker","text":"<p>\u25b8 <code>Private</code> _updateMarker(<code>position?</code>): <code>void</code></p> <p>Update the user location dot Marker to the current position</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_3","title":"Parameters","text":"Name Type Description <code>position?</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_3","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:263</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_4","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>GeolocateControl</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.GeolocateControl/#returns_5","title":"Returns","text":"<p><code>GeolocateControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>GeolocateControl</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.GeolocateControl/#returns_6","title":"Returns","text":"<p><code>GeolocateControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>GeolocateControl</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.GeolocateControl/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>GeolocateControl</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_7","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>GeolocateControl</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_8","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_8","title":"Returns","text":"<p><code>GeolocateControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_8","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#trigger","title":"trigger","text":"<p>\u25b8 trigger(): <code>boolean</code></p> <p>Programmatically request and move the map to the user's location.</p> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\npositionOptions: {\nenableHighAccuracy: true\n},\ntrackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\nmap.on('load', function() {\ngeolocate.trigger();\n});\n</code></pre>"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_9","title":"Returns","text":"<p><code>boolean</code></p> <p>Returns <code>false</code> if called before control was added to a map, otherwise returns <code>true</code>.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_9","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:425</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/","title":"Class: GlyphOffsetArray","text":"<p>maplibregl.GlyphOffsetArray</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArrayLayout1f4</code></li> </ul> <p>\u21b3 <code>GlyphOffsetArray</code></p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.GlyphOffsetArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#inherited-from","title":"Inherited from","text":"<p>StructArrayLayout1f4._trim</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#inherited-from_1","title":"Inherited from","text":"<p>StructArrayLayout1f4.clear</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.GlyphOffsetArray/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#inherited-from_2","title":"Inherited from","text":"<p>StructArrayLayout1f4.reserve</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.GlyphOffsetArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#inherited-from_3","title":"Inherited from","text":"<p>StructArrayLayout1f4.resize</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#inherited-from_4","title":"Inherited from","text":"<p>StructArrayLayout1f4.serialize</p>"},{"location":"API/classes/maplibregl.GlyphOffsetArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.GridIndex/","title":"Class: GridIndex&lt;T&gt;","text":"<p>maplibregl.GridIndex</p> <p>GridIndex is a data structure for testing the intersection of circles and rectangles in a 2d plane. It is optimized for rapid insertion and querying. GridIndex splits the plane into a set of \"cells\" and keeps track of which geometries intersect with each cell. At query time, full geometry comparisons are only done for items that share at least one cell. As long as the geometries are relatively uniformly distributed across the plane, this greatly reduces the number of comparisons necessary.</p>"},{"location":"API/classes/maplibregl.GridIndex/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>GridKey</code>"},{"location":"API/classes/maplibregl.ImageSource/","title":"Class: ImageSource","text":"<p>maplibregl.ImageSource</p> <p>A data source containing an image. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>// add to map\nmap.addSource('some id', {\ntype: 'image',\nurl: 'https://www.maplibre.org/images/foo.png',\ncoordinates: [\n[-76.54, 39.18],\n[-76.52, 39.18],\n[-76.52, 39.17],\n[-76.54, 39.17]\n]\n});\n// update coordinates\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n[-76.54335737228394, 39.18579907229748],\n[-76.52803659439087, 39.1838364847587],\n[-76.5295386314392, 39.17683392507606],\n[-76.54520273208618, 39.17876344106642]\n]);\n// update url and coordinates simultaneously\nmySource.updateImage({\nurl: 'https://www.maplibre.org/images/bar.png',\ncoordinates: [\n[-76.54335737228394, 39.18579907229748],\n[-76.52803659439087, 39.1838364847587],\n[-76.5295386314392, 39.17683392507606],\n[-76.54520273208618, 39.17876344106642]\n]\n})\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/maplibregl.ImageSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>ImageSource</code></p> <p>\u21b3\u21b3 <code>CanvasSource</code></p> <p>\u21b3\u21b3 <code>VideoSource</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.ImageSource/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.ImageSource/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new ImageSource(<code>id</code>, <code>options</code>, <code>dispatcher</code>, <code>eventedParent</code>)</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters","title":"Parameters","text":"Name Type <code>id</code> <code>string</code> <code>options</code> <code>VideoSourceSpecification</code> | <code>ImageSourceSpecification</code> | <code>CanvasSourceSpecification</code> <code>dispatcher</code> <code>Dispatcher</code> <code>eventedParent</code> <code>Evented</code>"},{"location":"API/classes/maplibregl.ImageSource/#overrides","title":"Overrides","text":"<p>Evented.constructor</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in","title":"Defined in","text":"<p>src/source/image_source.ts:91</p>"},{"location":"API/classes/maplibregl.ImageSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.ImageSource/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.ImageSource/#returns","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.ImageSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>ImageSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.ImageSource/#returns_1","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.ImageSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>ImageSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.ImageSource/#returns_2","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.ImageSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>ImageSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.ImageSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>ImageSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.ImageSource/#setcoordinates","title":"setCoordinates","text":"<p>\u25b8 setCoordinates(<code>coordinates</code>): <code>ImageSource</code></p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/maplibregl.ImageSource/#returns_4","title":"Returns","text":"<p><code>ImageSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_5","title":"Defined in","text":"<p>src/source/image_source.ts:196</p>"},{"location":"API/classes/maplibregl.ImageSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>ImageSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_6","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.ImageSource/#returns_5","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.ImageSource/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>options</code>): <code>ImageSource</code></p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_7","title":"Parameters","text":"Name Type Description <code>options</code> <code>Object</code> Options object. <code>options.coordinates?</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle. <code>options.url</code> <code>string</code> Required image URL."},{"location":"API/classes/maplibregl.ImageSource/#returns_6","title":"Returns","text":"<p><code>ImageSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_7","title":"Defined in","text":"<p>src/source/image_source.ts:150</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/","title":"Class: KeyboardHandler","text":"<p>maplibregl.KeyboardHandler</p> <p>The <code>KeyboardHandler</code> allows the user to zoom, rotate, and pan the map using the following keyboard shortcuts:</p> <ul> <li><code>=</code> / <code>+</code>: Increase the zoom level by 1.</li> <li><code>Shift-=</code> / <code>Shift-+</code>: Increase the zoom level by 2.</li> <li><code>-</code>: Decrease the zoom level by 1.</li> <li><code>Shift--</code>: Decrease the zoom level by 2.</li> <li>Arrow keys: Pan by 100 pixels.</li> <li><code>Shift+\u21e2</code>: Increase the rotation by 15 degrees.</li> <li><code>Shift+\u21e0</code>: Decrease the rotation by 15 degrees.</li> <li><code>Shift+\u21e1</code>: Increase the pitch by 10 degrees.</li> <li><code>Shift+\u21e3</code>: Decrease the pitch by 10 degrees.</li> </ul>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.KeyboardHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.KeyboardHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new KeyboardHandler(<code>map</code>)</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#parameters","title":"Parameters","text":"Name Type <code>map</code> <code>Map</code>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:37</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.KeyboardHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"keyboard rotate and zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.keyboard.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:152</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#disablerotation","title":"disableRotation","text":"<p>\u25b8 disableRotation(): <code>void</code></p> <p>Disables the \"keyboard pan/rotate\" interaction, leaving the \"keyboard zoom\" interaction enabled.</p> <p><code>Example</code></p> <pre><code>map.keyboard.disableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:186</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"keyboard rotate and zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.keyboard.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:142</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#enablerotation","title":"enableRotation","text":"<p>\u25b8 enableRotation(): <code>void</code></p> <p>Enables the \"keyboard pan/rotate\" interaction.</p> <p><code>Example</code></p> <pre><code>map.keyboard.enable();\nmap.keyboard.enableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:197</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isActive</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_5","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:175</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"keyboard rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"keyboard rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of_3","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_6","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:164</p>"},{"location":"API/classes/maplibregl.Layout/","title":"Class: Layout&lt;Props&gt;","text":"<p>maplibregl.Layout</p> <p>Because layout properties are not transitionable, they have a simpler representation and evaluation chain than paint properties: <code>PropertyValue</code>s are possibly evaluated, producing possibly evaluated values, which are then fully evaluated.</p> <p><code>Layout</code> stores a map of all (property name, <code>PropertyValue</code>) pairs for layout properties of a given layer type. It can calculate the possibly-evaluated values for all of them at once, producing a <code>PossiblyEvaluated</code> instance for the same set of properties.</p>"},{"location":"API/classes/maplibregl.Layout/#type-parameters","title":"Type parameters","text":"Name <code>Props</code>"},{"location":"API/classes/maplibregl.LineAtlas/","title":"Class: LineAtlas","text":"<p>maplibregl.LineAtlas</p> <p>A LineAtlas lets us reuse rendered dashed lines by writing many of them to a texture and then fetching their positions using .getDash.</p> <p><code>Param</code></p> <p><code>Param</code></p>"},{"location":"API/classes/maplibregl.LineAtlas/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LineAtlas/#getdash","title":"getDash","text":"<p>\u25b8 <code>Private</code> getDash(<code>dasharray</code>, <code>round</code>): <code>any</code></p> <p>Get or create a dash line pattern.</p>"},{"location":"API/classes/maplibregl.LineAtlas/#parameters","title":"Parameters","text":"Name Type Description <code>dasharray</code> <code>number</code>[] <code>round</code> <code>boolean</code> whether to add circle caps in between dash segments"},{"location":"API/classes/maplibregl.LineAtlas/#returns","title":"Returns","text":"<p><code>any</code></p> <p>position of dash texture in { y, height, width }</p>"},{"location":"API/classes/maplibregl.LineAtlas/#defined-in","title":"Defined in","text":"<p>src/render/line_atlas.ts:42</p>"},{"location":"API/classes/maplibregl.LineBucket/","title":"Class: LineBucket","text":"<p>maplibregl.LineBucket</p>"},{"location":"API/classes/maplibregl.LineBucket/#implements","title":"Implements","text":"<ul> <li><code>Bucket</code></li> </ul>"},{"location":"API/classes/maplibregl.LineBucket/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LineBucket/#addcurrentvertex","title":"addCurrentVertex","text":"<p>\u25b8 <code>Private</code> addCurrentVertex(<code>p</code>, <code>normal</code>, <code>endLeft</code>, <code>endRight</code>, <code>segment</code>, <code>round?</code>): <code>void</code></p> <p>Add two vertices to the buffers.</p>"},{"location":"API/classes/maplibregl.LineBucket/#parameters","title":"Parameters","text":"Name Type Default value Description <code>p</code> <code>Point</code> <code>undefined</code> the line vertex to add buffer vertices for <code>normal</code> <code>Point</code> <code>undefined</code> vertex normal <code>endLeft</code> <code>number</code> <code>undefined</code> extrude to shift the left vertex along the line <code>endRight</code> <code>number</code> <code>undefined</code> extrude to shift the left vertex along the line <code>segment</code> <code>Segment</code> <code>undefined</code> the segment object to add the vertex to <code>round</code> <code>boolean</code> <code>false</code> whether this is a round cap"},{"location":"API/classes/maplibregl.LineBucket/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.LineBucket/#defined-in","title":"Defined in","text":"<p>src/data/bucket/line_bucket.ts:514</p>"},{"location":"API/classes/maplibregl.LngLat/","title":"Class: LngLat","text":"<p>maplibregl.LngLat</p> <p>A <code>LngLat</code> object represents a given longitude and latitude coordinate, measured in degrees. These coordinates are based on the WGS84 (EPSG:4326) standard.</p> <p>MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match the GeoJSON specification.</p> <p>Note that any MapLibre GL JS method that accepts a <code>LngLat</code> object as an argument or option can also accept an <code>Array</code> of two numbers and will perform an implicit conversion. This flexible type is documented as LngLatLike.</p> <p><code>Param</code></p> <p>Longitude, measured in degrees.</p> <p><code>Param</code></p> <p>Latitude, measured in degrees.</p> <p><code>Example</code></p> <pre><code>var ll = new maplibregl.LngLat(-123.9749, 40.7736);\nll.lng; // = -123.9749\n</code></pre> <p><code>See</code></p> <ul> <li>Get coordinates of the mouse pointer</li> <li>Display a popup</li> <li>Create a timeline animation</li> </ul>"},{"location":"API/classes/maplibregl.LngLat/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LngLat/#distanceto","title":"distanceTo","text":"<p>\u25b8 distanceTo(<code>lngLat</code>): <code>number</code></p> <p>Returns the approximate distance between a pair of coordinates in meters Uses the Haversine Formula (from R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)</p> <p><code>Example</code></p> <pre><code>var new_york = new maplibregl.LngLat(-74.0060, 40.7128);\nvar los_angeles = new maplibregl.LngLat(-118.2437, 34.0522);\nnew_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#parameters","title":"Parameters","text":"Name Type Description <code>lngLat</code> <code>LngLat</code> coordinates to compute the distance to"},{"location":"API/classes/maplibregl.LngLat/#returns","title":"Returns","text":"<p><code>number</code></p> <p>Distance in meters between the two coordinates.</p>"},{"location":"API/classes/maplibregl.LngLat/#defined-in","title":"Defined in","text":"<p>src/geo/lng_lat.ts:93</p>"},{"location":"API/classes/maplibregl.LngLat/#toarray","title":"toArray","text":"<p>\u25b8 toArray(): [<code>number</code>, <code>number</code>]</p> <p>Returns the coordinates represented as an array of two numbers.</p> <p><code>Example</code></p> <pre><code>var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toArray(); // = [-73.9749, 40.7736]\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#returns_1","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>]</p> <p>The coordinates represented as an array of longitude and latitude.</p>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_1","title":"Defined in","text":"<p>src/geo/lng_lat.ts:66</p>"},{"location":"API/classes/maplibregl.LngLat/#tostring","title":"toString","text":"<p>\u25b8 toString(): <code>string</code></p> <p>Returns the coordinates represent as a string.</p> <p><code>Example</code></p> <pre><code>var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#returns_2","title":"Returns","text":"<p><code>string</code></p> <p>The coordinates represented as a string of the format <code>'LngLat(lng, lat)'</code>.</p>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_2","title":"Defined in","text":"<p>src/geo/lng_lat.ts:78</p>"},{"location":"API/classes/maplibregl.LngLat/#wrap","title":"wrap","text":"<p>\u25b8 wrap(): <code>LngLat</code></p> <p>Returns a new <code>LngLat</code> object whose longitude is wrapped to the range (-180, 180).</p> <p><code>Example</code></p> <pre><code>var ll = new maplibregl.LngLat(286.0251, 40.7736);\nvar wrapped = ll.wrap();\nwrapped.lng; // = -73.9749\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#returns_3","title":"Returns","text":"<p><code>LngLat</code></p> <p>The wrapped <code>LngLat</code> object.</p>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_3","title":"Defined in","text":"<p>src/geo/lng_lat.ts:54</p>"},{"location":"API/classes/maplibregl.LngLat/#convert","title":"convert","text":"<p>\u25b8 <code>Static</code> convert(<code>input</code>): <code>LngLat</code></p> <p>Converts an array of two numbers or an object with <code>lng</code> and <code>lat</code> or <code>lon</code> and <code>lat</code> properties to a <code>LngLat</code> object.</p> <p>If a <code>LngLat</code> object is passed in, the function returns it unchanged.</p> <p><code>Example</code></p> <pre><code>var arr = [-73.9749, 40.7736];\nvar ll = maplibregl.LngLat.convert(arr);\nll;   // = LngLat {lng: -73.9749, lat: 40.7736}\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#parameters_1","title":"Parameters","text":"Name Type Description <code>input</code> <code>LngLatLike</code> An array of two numbers or object to convert, or a <code>LngLat</code> object to return."},{"location":"API/classes/maplibregl.LngLat/#returns_4","title":"Returns","text":"<p><code>LngLat</code></p> <p>A new <code>LngLat</code> object, if a conversion occurred, or the original <code>LngLat</code> object.</p>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_4","title":"Defined in","text":"<p>src/geo/lng_lat.ts:116</p>"},{"location":"API/classes/maplibregl.LngLatBounds/","title":"Class: LngLatBounds","text":"<p>maplibregl.LngLatBounds</p> <p>A <code>LngLatBounds</code> object represents a geographical bounding box, defined by its southwest and northeast points in longitude and latitude.</p> <p>If no arguments are provided to the constructor, a <code>null</code> bounding box is created.</p> <p>Note that any Mapbox GL method that accepts a <code>LngLatBounds</code> object as an argument or option can also accept an <code>Array</code> of two LngLatLike constructs and will perform an implicit conversion. This flexible type is documented as LngLatBoundsLike.</p> <p><code>Param</code></p> <p>The southwest corner of the bounding box.</p> <p><code>Param</code></p> <p>The northeast corner of the bounding box.</p> <p><code>Example</code></p> <pre><code>var sw = new maplibregl.LngLat(-73.9876, 40.7661);\nvar ne = new maplibregl.LngLat(-73.9397, 40.8002);\nvar llb = new maplibregl.LngLatBounds(sw, ne);\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.LngLatBounds/#constructor","title":"constructor","text":"<p>\u2022 new LngLatBounds(<code>sw?</code>, <code>ne?</code>)</p> <p><code>Example</code></p> <pre><code>var sw = new maplibregl.LngLat(-73.9876, 40.7661);\nvar ne = new maplibregl.LngLat(-73.9397, 40.8002);\nvar llb = new maplibregl.LngLatBounds(sw, ne);\nOR\nvar llb = new maplibregl.LngLatBounds([-73.9876, 40.7661, -73.9397, 40.8002]);\nOR\nvar llb = new maplibregl.LngLatBounds([sw, ne]);\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters","title":"Parameters","text":"Name Type Description <code>sw?</code> [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>] | <code>LngLatLike</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>] The southwest corner of the bounding box. OR array of 4 numbers in the order of west, south, east, north OR array of 2 LngLatLike: [sw,ne] <code>ne?</code> <code>LngLatLike</code> The northeast corner of the bounding box."},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:39</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LngLatBounds/#contains","title":"contains","text":"<p>\u25b8 contains(<code>lnglat</code>): <code>boolean</code></p> <p>Check if the point is within the bounding box.</p> <p><code>Example</code></p> <pre><code>var llb = new maplibregl.LngLatBounds(\nnew maplibregl.LngLat(-73.9876, 40.7661),\nnew maplibregl.LngLat(-73.9397, 40.8002)\n);\nvar ll = new maplibregl.LngLat(-73.9567, 40.7789);\nconsole.log(llb.contains(ll)); // = true\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_1","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> geographic point to check against."},{"location":"API/classes/maplibregl.LngLatBounds/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the point is within the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_1","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:246</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#extend","title":"extend","text":"<p>\u25b8 extend(<code>obj</code>): <code>any</code></p> <p>Extend the bounds to include a given LngLatLike or LngLatBoundsLike.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_2","title":"Parameters","text":"Name Type Description <code>obj</code> <code>LngLatLike</code> | <code>LngLatBoundsLike</code> object to extend to"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_1","title":"Returns","text":"<p><code>any</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_2","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:82</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getcenter","title":"getCenter","text":"<p>\u25b8 getCenter(): <code>LngLat</code></p> <p>Returns the geographical coordinate equidistant from the bounding box's corners.</p> <p><code>Example</code></p> <pre><code>var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_2","title":"Returns","text":"<p><code>LngLat</code></p> <p>The bounding box's center.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_3","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:136</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#geteast","title":"getEast","text":"<p>\u25b8 getEast(): <code>number</code></p> <p>Returns the east edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_3","title":"Returns","text":"<p><code>number</code></p> <p>The east edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_4","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:187</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getnorth","title":"getNorth","text":"<p>\u25b8 getNorth(): <code>number</code></p> <p>Returns the north edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_4","title":"Returns","text":"<p><code>number</code></p> <p>The north edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_5","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:194</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getnortheast","title":"getNorthEast","text":"<p>\u25b8 getNorthEast(): <code>LngLat</code></p> <p>Returns the northeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_5","title":"Returns","text":"<p><code>LngLat</code></p> <p>The northeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_6","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:152</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getnorthwest","title":"getNorthWest","text":"<p>\u25b8 getNorthWest(): <code>LngLat</code></p> <p>Returns the northwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_6","title":"Returns","text":"<p><code>LngLat</code></p> <p>The northwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_7","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:159</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getsouth","title":"getSouth","text":"<p>\u25b8 getSouth(): <code>number</code></p> <p>Returns the south edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_7","title":"Returns","text":"<p><code>number</code></p> <p>The south edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_8","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:180</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getsoutheast","title":"getSouthEast","text":"<p>\u25b8 getSouthEast(): <code>LngLat</code></p> <p>Returns the southeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_8","title":"Returns","text":"<p><code>LngLat</code></p> <p>The southeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_9","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:166</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getsouthwest","title":"getSouthWest","text":"<p>\u25b8 getSouthWest(): <code>LngLat</code></p> <p>Returns the southwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_9","title":"Returns","text":"<p><code>LngLat</code></p> <p>The southwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_10","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:145</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getwest","title":"getWest","text":"<p>\u25b8 getWest(): <code>number</code></p> <p>Returns the west edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_10","title":"Returns","text":"<p><code>number</code></p> <p>The west edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_11","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:173</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#isempty","title":"isEmpty","text":"<p>\u25b8 isEmpty(): <code>boolean</code></p> <p>Check if the bounding box is an empty/<code>null</code>-type box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_11","title":"Returns","text":"<p><code>boolean</code></p> <p>True if bounds have been defined, otherwise false.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_12","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:227</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#setnortheast","title":"setNorthEast","text":"<p>\u25b8 setNorthEast(<code>ne</code>): <code>LngLatBounds</code></p> <p>Set the northeast corner of the bounding box</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_3","title":"Parameters","text":"Name Type Description <code>ne</code> <code>LngLatLike</code> a LngLatLike object describing the northeast corner of the bounding box."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_12","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_13","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:60</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#setsouthwest","title":"setSouthWest","text":"<p>\u25b8 setSouthWest(<code>sw</code>): <code>LngLatBounds</code></p> <p>Set the southwest corner of the bounding box</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_4","title":"Parameters","text":"Name Type Description <code>sw</code> <code>LngLatLike</code> a LngLatLike object describing the southwest corner of the bounding box."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_13","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_14","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:71</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#toarray","title":"toArray","text":"<p>\u25b8 toArray(): [<code>number</code>, <code>number</code>][]</p> <p>Returns the bounding box represented as an array.</p> <p><code>Example</code></p> <pre><code>var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_14","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>][]</p> <p>The bounding box represented as an array, consisting of the southwest and northeast coordinates of the bounding represented as arrays of numbers.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_15","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:205</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#tostring","title":"toString","text":"<p>\u25b8 toString(): <code>string</code></p> <p>Return the bounding box represented as a string.</p> <p><code>Example</code></p> <pre><code>var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_15","title":"Returns","text":"<p><code>string</code></p> <p>The bounding box represents as a string of the format <code>'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'</code>.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_16","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:218</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#convert","title":"convert","text":"<p>\u25b8 <code>Static</code> convert(<code>input</code>): <code>LngLatBounds</code></p> <p>Converts an array to a <code>LngLatBounds</code> object.</p> <p>If a <code>LngLatBounds</code> object is passed in, the function returns it unchanged.</p> <p>Internally, the function calls <code>LngLat#convert</code> to convert arrays to <code>LngLat</code> values.</p> <p><code>Example</code></p> <pre><code>var arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\nvar llb = maplibregl.LngLatBounds.convert(arr);\nllb;   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_5","title":"Parameters","text":"Name Type Description <code>input</code> <code>LngLatBoundsLike</code> An array of two coordinates to convert, or a <code>LngLatBounds</code> object to return."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_16","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>A new <code>LngLatBounds</code> object, if a conversion occurred, or the original <code>LngLatBounds</code> object.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_17","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:272</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#fromlnglat","title":"fromLngLat","text":"<p>\u25b8 <code>Static</code> fromLngLat(<code>center</code>, <code>radius?</code>): <code>LngLatBounds</code></p> <p>Returns a <code>LngLatBounds</code> from the coordinates extended by a given <code>radius</code>. The returned <code>LngLatBounds</code> completely contains the <code>radius</code>.</p> <p><code>Example</code></p> <pre><code>var center = new maplibregl.LngLat(-73.9749, 40.7736);\nmaplibregl.LngLatBounds.fromLngLat(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_6","title":"Parameters","text":"Name Type Default value Description <code>center</code> <code>LngLat</code> <code>undefined</code> center coordinates of the new bounds. <code>radius?</code> <code>number</code> <code>0</code> Distance in meters from the coordinates to extend the bounds."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_17","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>A new <code>LngLatBounds</code> object representing the coordinates extended by the <code>radius</code>.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_18","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:288</p>"},{"location":"API/classes/maplibregl.LogoControl/","title":"Class: LogoControl","text":"<p>maplibregl.LogoControl</p> <p>A <code>LogoControl</code> is a control that adds the watermark.</p> <p><code>Implements</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>If <code>true</code>, force a compact logo. If <code>false</code>, force the full logo. The default is a responsive logo that collapses when the map is less than 640 pixels wide.</p>"},{"location":"API/classes/maplibregl.LogoControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.Map/","title":"Class: Map","text":"<p>maplibregl.Map</p> <p>The <code>Map</code> object represents the map on your page. It exposes methods and properties that enable you to programmatically change the map, and fires events as users interact with it.</p> <p>You create a <code>Map</code> by specifying a <code>container</code> and other options. Then MapLibre GL JS initializes the map on the page and returns your <code>Map</code> object.</p> <p><code>Param</code></p> <p><code>Param</code></p> <p>The HTML element in which MapLibre GL JS will render the map, or the element's string <code>id</code>. The specified element must have no children.</p> <p><code>Param</code></p> <p>The minimum zoom level of the map (0-24).</p> <p><code>Param</code></p> <p>The maximum zoom level of the map (0-24).</p> <p><code>Param</code></p> <p>The minimum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.</p> <p><code>Param</code></p> <p>The maximum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.</p> <p><code>Param</code></p> <p>The map's MapLibre style. This must be an a JSON object conforming to the schema described in the MapLibre Style Specification, or a URL to such JSON.</p> <p><code>Param</code></p> <p>If <code>true</code>, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL. For example, <code>http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60</code>. An additional string may optionally be provided to indicate a parameter-styled hash, e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&amp;foo=bar, where foo is a custom parameter and bar is an arbitrary hash distinct from the map hash.</p> <p><code>Param</code></p> <p>If <code>false</code>, no mouse, touch, or keyboard listeners will be attached to the map, so it will not respond to interaction.</p> <p><code>Param</code></p> <p>The threshold, measured in degrees, that determines when the map's bearing will snap to north. For example, with a <code>bearingSnap</code> of 7, if the user rotates the map within 7 degrees of north, the map will automatically snap to exact north.</p> <p><code>Param</code></p> <p>If <code>false</code>, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.</p> <p><code>Param</code></p> <p>The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag).</p> <p><code>Param</code></p> <p>If <code>true</code>, an AttributionControl will be added to the map.</p> <p><code>Param</code></p> <p>String or strings to show in an AttributionControl. Only applicable if <code>options.attributionControl</code> is <code>true</code>.</p> <p><code>Param</code></p> <p>If <code>true</code>, the MapLibre logo will be shown.</p> <p><code>Param</code></p> <p>A string representing the position of the MapLibre wordmark on the map. Valid options are <code>top-left</code>,<code>top-right</code>, <code>bottom-left</code>, <code>bottom-right</code>.</p> <p><code>Param</code></p> <p>If <code>true</code>, map creation will fail if the performance of MapLibre GL JS would be dramatically worse than expected (i.e. a software renderer would be used).</p> <p><code>Param</code></p> <p>If <code>true</code>, the map's canvas can be exported to a PNG using <code>map.getCanvas().toDataURL()</code>. This is <code>false</code> by default as a performance optimization.</p> <p><code>Param</code></p> <p>If <code>true</code>, the gl context will be created with MSAA antialiasing, which can be useful for antialiasing custom layers. this is <code>false</code> by default as a performance optimization.</p> <p><code>Param</code></p> <p>If <code>false</code>, the map won't attempt to re-request tiles once they expire per their HTTP <code>cacheControl</code>/<code>expires</code> headers.</p> <p><code>Param</code></p> <p>If set, the map will be constrained to the given bounds.</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"scroll to zoom\" interaction is enabled. AroundCenterOptions are passed as options to enable.</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"box zoom\" interaction is enabled (see BoxZoomHandler).</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"drag to rotate\" interaction is enabled (see DragRotateHandler).</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"drag to pan\" interaction is enabled. An <code>Object</code> value is passed as options to enable.</p> <p><code>Param</code></p> <p>If <code>true</code>, keyboard shortcuts are enabled (see KeyboardHandler).</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"double click to zoom\" interaction is enabled (see DoubleClickZoomHandler).</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"pinch to rotate and zoom\" interaction is enabled. An <code>Object</code> value is passed as options to enable.</p> <p><code>Param</code></p> <p>If <code>true</code>, the \"drag to pitch\" interaction is enabled. An <code>Object</code> value is passed as options to TwoFingersTouchPitchHandler#enable.</p> <p><code>Param</code></p> <p>If <code>true</code> or set to an options object, map is only accessible on desktop while holding Command/Ctrl and only accessible on mobile with two fingers. Interacting with the map using normal gestures will trigger an informational screen. With this option enabled, \"drag to pitch\" requires a three-finger gesture. Cooperative gestures are disabled when a map enters fullscreen using #FullscreenControl.</p> <p><code>Param</code></p> <p>If <code>true</code>, the map will automatically resize when the browser window resizes.</p> <p><code>Param</code></p> <p>0]] The initial geographical centerpoint of the map. If <code>center</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>[0, 0]</code> Note: MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match GeoJSON.</p> <p><code>Param</code></p> <p>The initial zoom level of the map. If <code>zoom</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>.</p> <p><code>Param</code></p> <p>The initial bearing (rotation) of the map, measured in degrees counter-clockwise from north. If <code>bearing</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>.</p> <p><code>Param</code></p> <p>The initial pitch (tilt) of the map, measured in degrees away from the plane of the screen (0-85). If <code>pitch</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>. Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.</p> <p><code>Param</code></p> <p>The initial bounds of the map. If <code>bounds</code> is specified, it overrides <code>center</code> and <code>zoom</code> constructor options.</p> <p><code>Param</code></p> <p>A fitBounds options object to use only when fitting the initial <code>bounds</code> provided above.</p> <p><code>Param</code></p> <p>If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level.</p> <p><code>Param</code></p> <p>The maximum number of tiles stored in the tile cache for a given source. If omitted, the cache will be dynamically sized based on the current viewport which can be set using <code>maxTileCacheZoomLevels</code> constructor options.</p> <p><code>Param</code></p> <p>The maximum number of zoom levels for which to store tiles for a given source. Tile cache dynamic size is calculated by multiplying <code>maxTileCacheZoomLevels</code> with approx number of tiles in the viewport for a given source.</p> <p><code>Param</code></p> <p>If false, style validation will be skipped. Useful in production environment.</p> <p><code>Param</code></p> <p>Defines a CSS font-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges. In these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold). Set to <code>false</code>, to enable font settings from the map's style for these glyph ranges. The purpose of this option is to avoid bandwidth-intensive glyph server requests. (See Use locally generated ideographs.)</p> <p><code>Param</code></p> <p>A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests. Expected to return an object with a <code>url</code> property and optionally <code>headers</code> and <code>credentials</code> properties.</p> <p><code>Param</code></p> <p>A callback run before the Map's camera is moved due to user input or animation. The callback can be used to modify the new center, zoom, pitch and bearing. Expected to return an object containing center, zoom, pitch or bearing values to overwrite.</p> <p><code>Param</code></p> <p>If <code>true</code>, Resource Timing API information will be collected for requests made by GeoJSON and Vector Tile web workers (this information is normally inaccessible from the main Javascript thread). Information will be returned in a <code>resourceTiming</code> property of relevant <code>data</code> events.</p> <p><code>Param</code></p> <p>Controls the duration of the fade-in/fade-out animation for label collisions after initial map load, in milliseconds. This setting affects all symbol layers. This setting does not affect the duration of runtime styling transitions or raster tile cross-fading.</p> <p><code>Param</code></p> <p>If <code>true</code>, symbols from multiple sources can collide with each other during collision detection. If <code>false</code>, collision detection is run separately for the symbols in each source.</p> <p><code>Param</code></p> <p>A patch to apply to the default localization table for UI strings, e.g. control tooltips. The <code>locale</code> object maps namespaced UI string IDs to translated strings in the target language; see <code>src/ui/default_locale.js</code> for an example with all supported string IDs. The object may specify all UI strings (thereby adding support for a new translation) or only a subset of strings (thereby patching the default translation table).</p> <p><code>Param</code></p> <p>The pixel ratio. The canvas' <code>width</code> attribute will be <code>container.clientWidth * pixelRatio</code> and its <code>height</code> attribute will be <code>container.clientHeight * pixelRatio</code>. Defaults to <code>devicePixelRatio</code> if not specified.</p> <p><code>Example</code></p> <pre><code>var map = new maplibregl.Map({\ncontainer: 'map',\ncenter: [-122.420679, 37.772537],\nzoom: 13,\nstyle: style_object,\nhash: true,\ntransformRequest: (url, resourceType)=&gt; {\nif(resourceType === 'Source' &amp;&amp; url.startsWith('http://myHost')) {\nreturn {\nurl: url.replace('http', 'https'),\nheaders: { 'my-custom-header': true},\ncredentials: 'include'  // Include cookies for cross-origin requests\n}\n}\n}\n});\n</code></pre> <p><code>See</code></p> <p>Display a map</p>"},{"location":"API/classes/maplibregl.Map/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Camera</code></li> </ul> <p>\u21b3 <code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.Map/#repaint","title":"repaint","text":"<p>\u2022 <code>get</code> repaint(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will continuously repaint. This information is useful for analyzing performance.</p> <p><code>Name</code></p> <p>repaint</p> <p><code>Instance</code></p> <p><code>Memberof</code></p> <p>Map</p>"},{"location":"API/classes/maplibregl.Map/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in","title":"Defined in","text":"<p>src/ui/map.ts:3140</p>"},{"location":"API/classes/maplibregl.Map/#showcollisionboxes","title":"showCollisionBoxes","text":"<p>\u2022 <code>get</code> showCollisionBoxes(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will render boxes around all symbols in the data source, revealing which symbols were rendered or which were hidden due to collisions. This information is useful for debugging.</p> <p><code>Name</code></p> <p>showCollisionBoxes</p> <p><code>Instance</code></p> <p><code>Memberof</code></p> <p>Map</p>"},{"location":"API/classes/maplibregl.Map/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_1","title":"Defined in","text":"<p>src/ui/map.ts:3098</p>"},{"location":"API/classes/maplibregl.Map/#showpadding","title":"showPadding","text":"<p>\u2022 <code>get</code> showPadding(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will visualize the padding offsets.</p> <p><code>Name</code></p> <p>showPadding</p> <p><code>Instance</code></p> <p><code>Memberof</code></p> <p>Map</p>"},{"location":"API/classes/maplibregl.Map/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_2","title":"Defined in","text":"<p>src/ui/map.ts:3080</p>"},{"location":"API/classes/maplibregl.Map/#showtileboundaries","title":"showTileBoundaries","text":"<p>\u2022 <code>get</code> showTileBoundaries(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will render an outline around each tile and the tile ID. These tile boundaries are useful for debugging.</p> <p>The uncompressed file size of the first vector source is drawn in the top left corner of each tile, next to the tile ID.</p> <p><code>Name</code></p> <p>showTileBoundaries</p> <p><code>Instance</code></p> <p><code>Memberof</code></p> <p>Map</p> <p><code>Example</code></p> <pre><code>map.showTileBoundaries = true;\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_3","title":"Defined in","text":"<p>src/ui/map.ts:3064</p>"},{"location":"API/classes/maplibregl.Map/#version","title":"version","text":"<p>\u2022 <code>get</code> version(): <code>string</code></p> <p>Returns the package version of the library</p>"},{"location":"API/classes/maplibregl.Map/#returns_4","title":"Returns","text":"<p><code>string</code></p> <p>Package version of the library</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_4","title":"Defined in","text":"<p>src/ui/map.ts:3155</p>"},{"location":"API/classes/maplibregl.Map/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Map/#_applyupdatedtransform","title":"_applyUpdatedTransform","text":"<p>\u25b8 _applyUpdatedTransform(<code>tr</code>): <code>void</code></p> <p>Called after the camera is done being manipulated.</p>"},{"location":"API/classes/maplibregl.Map/#parameters","title":"Parameters","text":"Name Type Description <code>tr</code> <code>Transform</code> the requested camera end state Call <code>transformCameraUpdate</code> if present, and then apply the \"approved\" changes."},{"location":"API/classes/maplibregl.Map/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from","title":"Inherited from","text":"<p>Camera._applyUpdatedTransform</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_5","title":"Defined in","text":"<p>src/ui/camera.ts:1041</p>"},{"location":"API/classes/maplibregl.Map/#_cameraforboxandbearing","title":"_cameraForBoxAndBearing","text":"<p>\u25b8 <code>Private</code> _cameraForBoxAndBearing(<code>p0</code>, <code>p1</code>, <code>bearing</code>, <code>options?</code>): <code>CenterZoomBearing</code></p> <p>Calculate the center of these two points in the viewport and use the highest zoom level up to and including <code>Map#getMaxZoom()</code> that fits the points in the viewport at the specified bearing.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Example</code></p> <pre><code>var p0 = [-79, 43];\nvar p1 = [-73, 45];\nvar bearing = 90;\nvar newCameraTransform = map._cameraForBoxAndBearing(p0, p1, bearing, {\npadding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_1","title":"Parameters","text":"Name Type Description <code>p0</code> <code>LngLatLike</code> First point <code>p1</code> <code>LngLatLike</code> Second point <code>bearing</code> <code>number</code> Desired map bearing at end of animation, in degrees <code>options?</code> <code>CameraForBoundsOptions</code>"},{"location":"API/classes/maplibregl.Map/#returns_6","title":"Returns","text":"<p><code>CenterZoomBearing</code></p> <p>If map is able to fit to provided bounds, returns <code>center</code>, <code>zoom</code>, and <code>bearing</code>.      If map is unable to fit, method will warn and return undefined.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_1","title":"Inherited from","text":"<p>Camera._cameraForBoxAndBearing</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_6","title":"Defined in","text":"<p>src/ui/camera.ts:575</p>"},{"location":"API/classes/maplibregl.Map/#_gettransformforupdate","title":"_getTransformForUpdate","text":"<p>\u25b8 _getTransformForUpdate(): <code>Transform</code></p> <p>Called when the camera is about to be manipulated. If <code>transformCameraUpdate</code> is specified, a copy of the current transform is created to track the accumulated changes. This underlying transform represents the \"desired state\" proposed by input handlers / animations / UI controls. It may differ from the state used for rendering (<code>this.transform</code>).</p>"},{"location":"API/classes/maplibregl.Map/#returns_7","title":"Returns","text":"<p><code>Transform</code></p> <p>Transform to apply changes to</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_2","title":"Inherited from","text":"<p>Camera._getTransformForUpdate</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_7","title":"Defined in","text":"<p>src/ui/camera.ts:1027</p>"},{"location":"API/classes/maplibregl.Map/#_render","title":"_render","text":"<p>\u25b8 <code>Private</code> _render(<code>paintStartTimeStamp</code>): <code>Map</code></p> <p>Call when a (re-)render of the map is required: - The style has changed (<code>setPaintProperty()</code>, etc.) - Source data has changed (e.g. tiles have finished loading) - The map has is moving (or just finished moving) - A transition is in progress</p>"},{"location":"API/classes/maplibregl.Map/#parameters_2","title":"Parameters","text":"Name Type Description <code>paintStartTimeStamp</code> <code>number</code> The time when the animation frame began executing."},{"location":"API/classes/maplibregl.Map/#returns_8","title":"Returns","text":"<p><code>Map</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_8","title":"Defined in","text":"<p>src/ui/map.ts:2857</p>"},{"location":"API/classes/maplibregl.Map/#_requestrenderframe","title":"_requestRenderFrame","text":"<p>\u25b8 <code>Private</code> _requestRenderFrame(<code>callback</code>): <code>number</code></p> <p>Request that the given callback be executed during the next render frame.  Schedule a render frame if one is not already scheduled.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_3","title":"Parameters","text":"Name Type <code>callback</code> () =&gt; <code>void</code>"},{"location":"API/classes/maplibregl.Map/#returns_9","title":"Returns","text":"<p><code>number</code></p> <p>An id that can be used to cancel the callback</p>"},{"location":"API/classes/maplibregl.Map/#overrides","title":"Overrides","text":"<p>Camera._requestRenderFrame</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_9","title":"Defined in","text":"<p>src/ui/map.ts:2836</p>"},{"location":"API/classes/maplibregl.Map/#_update","title":"_update","text":"<p>\u25b8 <code>Private</code> _update(<code>updateStyle?</code>): <code>Map</code></p> <p>Update this map's style and sources, and re-render the map.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_4","title":"Parameters","text":"Name Type Description <code>updateStyle?</code> <code>boolean</code> mark the map's style for reprocessing as well as its sources"},{"location":"API/classes/maplibregl.Map/#returns_10","title":"Returns","text":"<p><code>Map</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_10","title":"Defined in","text":"<p>src/ui/map.ts:2820</p>"},{"location":"API/classes/maplibregl.Map/#addcontrol","title":"addControl","text":"<p>\u25b8 addControl(<code>control</code>, <code>position?</code>): <code>Map</code></p> <p>Adds an IControl to the map, calling <code>control.onAdd(this)</code>.</p> <p><code>Example</code></p> <pre><code>// Add zoom and rotation controls to the map.\nmap.addControl(new maplibregl.NavigationControl());\n</code></pre> <p><code>See</code></p> <p>Display map navigation controls</p>"},{"location":"API/classes/maplibregl.Map/#parameters_5","title":"Parameters","text":"Name Type Description <code>control</code> <code>IControl</code> The IControl to add. <code>position?</code> <code>ControlPosition</code> position on the map to which the control will be added. Valid values are <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>. Defaults to <code>'top-right'</code>."},{"location":"API/classes/maplibregl.Map/#returns_11","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_11","title":"Defined in","text":"<p>src/ui/map.ts:584</p>"},{"location":"API/classes/maplibregl.Map/#addimage","title":"addImage","text":"<p>\u25b8 addImage(<code>id</code>, <code>image</code>, <code>options?</code>): <code>Map</code></p> <p>Add an image to the style. This image can be displayed on the map like any other icon in the style's sprite using the image's ID with <code>icon-image</code>, <code>background-pattern</code>, <code>fill-pattern</code>, or <code>line-pattern</code>. A Map.event:error event will be fired if there is not enough space in the sprite to add this image.</p> <p><code>Example</code></p> <pre><code>// If the style's sprite does not already contain an image with ID 'cat',\n// add the image 'cat-icon.png' to the style's sprite with the ID 'cat'.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/400px-Cat_silhouette.svg.png', function(error, image) {\nif (error) throw error;\nif (!map.hasImage('cat')) map.addImage('cat', image);\n});\n// Add a stretchable image that can be used with `icon-text-fit`\n// In this example, the image is 600px wide by 400px high.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/8/89/Black_and_White_Boxed_%28bordered%29.png', function(error, image) {\nif (error) throw error;\nif (!map.hasImage('border-image')) {\nmap.addImage('border-image', image, {\ncontent: [16, 16, 300, 384], // place text over left half of image, avoiding the 16px border\nstretchX: [[16, 584]], // stretch everything horizontally except the 16px border\nstretchY: [[16, 384]], // stretch everything vertically except the 16px border\n});\n}\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Use <code>HTMLImageElement</code>: Add an icon to the map</li> <li>Use <code>ImageData</code>: Add a generated icon to the map</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_6","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image. <code>image</code> <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code> | <code>Uint8ClampedArray</code> ; <code>height</code>: <code>number</code> ; <code>width</code>: <code>number</code>  } The image as an <code>HTMLImageElement</code>, <code>ImageData</code>, <code>ImageBitmap</code> or object with <code>width</code>, <code>height</code>, and <code>data</code> properties with the same format as <code>ImageData</code>. <code>options</code> <code>Partial</code>&lt;<code>StyleImageMetadata</code>&gt; Options object."},{"location":"API/classes/maplibregl.Map/#returns_12","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_12","title":"Defined in","text":"<p>src/ui/map.ts:1879</p>"},{"location":"API/classes/maplibregl.Map/#addlayer","title":"addLayer","text":"<p>\u25b8 addLayer(<code>layer</code>, <code>beforeId?</code>): <code>Map</code></p> <p>Adds a MapLibre style layer to the map's style.</p> <p>A layer defines how data from a specified source will be styled. Read more about layer types and available paint and layout properties in the MapLibre Style Specification.</p> <p>TODO: JSDoc can't pass</p> <p><code>Example</code></p> <pre><code>// Add a circle layer with a vector source\nmap.addLayer({\nid: 'points-of-interest',\nsource: {\ntype: 'vector',\nurl: 'https://demotiles.maplibre.org/tiles/tiles.json'\n},\n'source-layer': 'poi_label',\ntype: 'circle',\npaint: {\n// MapLibre Style Specification paint properties\n},\nlayout: {\n// MapLibre Style Specification layout properties\n}\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Define a source before using it to create a new layer\nmap.addSource('state-data', {\ntype: 'geojson',\ndata: 'path/to/data.geojson'\n});\nmap.addLayer({\nid: 'states',\n// References the GeoJSON source defined above\n// and does not require a `source-layer`\nsource: 'state-data',\ntype: 'symbol',\nlayout: {\n// Set the label content to the\n// feature's `name` property\ntext-field: ['get', 'name']\n}\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Add a new symbol layer before an existing layer\nmap.addLayer({\nid: 'states',\n// References a source that's already been defined\nsource: 'state-data',\ntype: 'symbol',\nlayout: {\n// Set the label content to the\n// feature's `name` property\ntext-field: ['get', 'name']\n}\n// Add the layer before the existing `cities` layer\n}, 'cities');\n</code></pre> <p><code>See</code></p> <ul> <li>Create and style clusters</li> <li>Add a vector tile source</li> <li>Add a WMS source</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_7","title":"Parameters","text":"Name Type Description <code>layer</code> <code>CustomLayerInterface</code> | <code>Object</code> The layer to add, <code>beforeId?</code> <code>string</code> The ID of an existing layer to insert the new layer before, resulting in the new layer appearing visually beneath the existing layer. If this argument is not specified, the layer will be appended to the end of the layers array and appear visually above all other layers."},{"location":"API/classes/maplibregl.Map/#returns_13","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_13","title":"Defined in","text":"<p>src/ui/map.ts:2177</p>"},{"location":"API/classes/maplibregl.Map/#addsource","title":"addSource","text":"<p>\u25b8 addSource(<code>id</code>, <code>source</code>): <code>Map</code></p> <p>Adds a source to the map's style.</p> <p><code>Fires</code></p> <p>source.add</p> <p><code>Example</code></p> <pre><code>map.addSource('my-data', {\ntype: 'vector',\nurl: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('my-data', {\n\"type\": \"geojson\",\n\"data\": {\n\"type\": \"Feature\",\n\"geometry\": {\n\"type\": \"Point\",\n\"coordinates\": [-77.0323, 38.9131]\n},\n\"properties\": {\n\"title\": \"Mapbox DC\",\n\"marker-symbol\": \"monument\"\n}\n}\n});\n</code></pre> <p><code>See</code></p> <p>GeoJSON source: Add live realtime data</p>"},{"location":"API/classes/maplibregl.Map/#parameters_8","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to add. Must not conflict with existing sources. <code>source</code> <code>SourceSpecification</code> The source object, conforming to the MapLibre Style Specification's source definition or CanvasSourceOptions."},{"location":"API/classes/maplibregl.Map/#returns_14","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_14","title":"Defined in","text":"<p>src/ui/map.ts:1679</p>"},{"location":"API/classes/maplibregl.Map/#addsourcetype","title":"addSourceType","text":"<p>\u25b8 <code>Private</code> addSourceType(<code>name</code>, <code>SourceType</code>, <code>callback</code>): <code>void</code></p> <p>Adds a custom source type, making it available for use with addSource.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_9","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> The name of the source type; source definition objects use this name in the <code>{type: ...}</code> field. <code>SourceType</code> <code>any</code> A Source constructor. <code>callback</code> <code>Callback</code>&lt;<code>void</code>&gt; Called when the source type is ready or with an error argument if there is an error."},{"location":"API/classes/maplibregl.Map/#returns_15","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_15","title":"Defined in","text":"<p>src/ui/map.ts:1791</p>"},{"location":"API/classes/maplibregl.Map/#addsprite","title":"addSprite","text":"<p>\u25b8 addSprite(<code>id</code>, <code>url</code>, <code>options?</code>): <code>Map</code></p> <p>Adds a sprite to the map's style.</p> <p><code>Fires</code></p> <p>style</p> <p><code>Example</code></p> <pre><code>map.addSprite('sprite-two', 'http://example.com/sprite-two');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_10","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the sprite to add. Must not conflict with existing sprites. <code>url</code> <code>string</code> The URL to load the sprite from <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_16","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_16","title":"Defined in","text":"<p>src/ui/map.ts:2399</p>"},{"location":"API/classes/maplibregl.Map/#aretilesloaded","title":"areTilesLoaded","text":"<p>\u25b8 areTilesLoaded(): <code>boolean</code></p> <p>Returns a Boolean indicating whether all tiles in the viewport from all sources on the style are loaded.</p> <p><code>Example</code></p> <pre><code>var tilesLoaded = map.areTilesLoaded();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_17","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether all tiles are loaded.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_17","title":"Defined in","text":"<p>src/ui/map.ts:1770</p>"},{"location":"API/classes/maplibregl.Map/#cameraforbounds","title":"cameraForBounds","text":"<p>\u25b8 cameraForBounds(<code>bounds</code>, <code>options?</code>): <code>CenterZoomBearing</code></p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Example</code></p> <pre><code>var bbox = [[-79, 43], [-73, 45]];\nvar newCameraTransform = map.cameraForBounds(bbox, {\npadding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_11","title":"Parameters","text":"Name Type Description <code>bounds</code> <code>LngLatBoundsLike</code> Calculate the center for these bounds in the viewport and use the highest zoom level up to and including <code>Map#getMaxZoom()</code> that fits in the viewport. LngLatBounds represent a box that is always axis-aligned with bearing 0. <code>options?</code> <code>CameraForBoundsOptions</code> Options object"},{"location":"API/classes/maplibregl.Map/#returns_18","title":"Returns","text":"<p><code>CenterZoomBearing</code></p> <p>If map is able to fit to provided bounds, returns <code>center</code>, <code>zoom</code>, and <code>bearing</code>. If map is unable to fit, method will warn and return undefined.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_3","title":"Inherited from","text":"<p>Camera.cameraForBounds</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_18","title":"Defined in","text":"<p>src/ui/camera.ts:546</p>"},{"location":"API/classes/maplibregl.Map/#easeto","title":"easeTo","text":"<p>\u25b8 easeTo(<code>options</code>, <code>eventData?</code>): <code>Map</code></p> <p>Changes any combination of <code>center</code>, <code>zoom</code>, <code>bearing</code>, <code>pitch</code>, and <code>padding</code> with an animated transition between old and new values. The map will retain its current values for any details not specified in <code>options</code>.</p> <p>Note: The transition will happen instantly if the user has enabled the <code>reduced motion</code> accessibility feature enabled in their operating system, unless <code>options</code> includes <code>essential: true</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>pitchstart</p> <p><code>Fires</code></p> <p>rotate</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>pitch</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Fires</code></p> <p>pitchend</p> <p><code>See</code></p> <p>Navigate the map with game-like controls</p>"},{"location":"API/classes/maplibregl.Map/#parameters_12","title":"Parameters","text":"Name Type Description <code>options</code> <code>AnimationOptions</code> &amp; <code>CenterZoomBearing</code> &amp; { <code>around?</code>: <code>LngLatLike</code> ; <code>pitch?</code>: <code>number</code>  } &amp; { <code>delayEndEvents?</code>: <code>number</code> ; <code>padding?</code>: <code>number</code> | <code>RequireAtLeastOne</code>&lt;<code>PaddingOptions</code>&gt;  } &amp; { <code>easeId?</code>: <code>string</code> ; <code>noMoveStart?</code>: <code>boolean</code>  } Options describing the destination and animation of the transition. Accepts CameraOptions and AnimationOptions. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_19","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_4","title":"Inherited from","text":"<p>Camera.easeTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_19","title":"Defined in","text":"<p>src/ui/camera.ts:879</p>"},{"location":"API/classes/maplibregl.Map/#fitbounds","title":"fitBounds","text":"<p>\u25b8 fitBounds(<code>bounds</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans and zooms the map to contain its visible area within the specified geographical bounds. This function will also reset the map's bearing to 0 if bearing is nonzero.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Example</code></p> <pre><code>var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\npadding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <p><code>See</code></p> <p>Fit a map to a bounding box</p>"},{"location":"API/classes/maplibregl.Map/#parameters_13","title":"Parameters","text":"Name Type Description <code>bounds</code> <code>LngLatBoundsLike</code> Center these bounds in the viewport and use the highest zoom level up to and including <code>Map#getMaxZoom()</code> that fits them in the viewport. <code>options?</code> <code>FitBoundsOptions</code> Options supports all properties from AnimationOptions and CameraOptions in addition to the fields below. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_20","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_5","title":"Inherited from","text":"<p>Camera.fitBounds</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_20","title":"Defined in","text":"<p>src/ui/camera.ts:670</p>"},{"location":"API/classes/maplibregl.Map/#fitscreencoordinates","title":"fitScreenCoordinates","text":"<p>\u25b8 fitScreenCoordinates(<code>p0</code>, <code>p1</code>, <code>bearing</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans, rotates and zooms the map to to fit the box made by points p0 and p1 once the map is rotated to the specified bearing. To zoom without rotating, pass in the current map bearing.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Example</code></p> <pre><code>var p0 = [220, 400];\nvar p1 = [500, 900];\nmap.fitScreenCoordinates(p0, p1, map.getBearing(), {\npadding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <p><code>See</code></p> <p>Used by BoxZoomHandler</p>"},{"location":"API/classes/maplibregl.Map/#parameters_14","title":"Parameters","text":"Name Type Description <code>p0</code> <code>PointLike</code> First point on screen, in pixel coordinates <code>p1</code> <code>PointLike</code> Second point on screen, in pixel coordinates <code>bearing</code> <code>number</code> Desired map bearing at end of animation, in degrees <code>options?</code> <code>FitBoundsOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_21","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_6","title":"Inherited from","text":"<p>Camera.fitScreenCoordinates</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_21","title":"Defined in","text":"<p>src/ui/camera.ts:706</p>"},{"location":"API/classes/maplibregl.Map/#flyto","title":"flyTo","text":"<p>\u25b8 flyTo(<code>options</code>, <code>eventData?</code>): <code>Map</code></p> <p>Changes any combination of center, zoom, bearing, and pitch, animating the transition along a curve that evokes flight. The animation seamlessly incorporates zooming and panning to help the user maintain her bearings even after traversing a great distance.</p> <p>Note: The animation will be skipped, and this will behave equivalently to <code>jumpTo</code> if the user has the <code>reduced motion</code> accessibility feature enabled in their operating system, unless 'options' includes <code>essential: true</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>pitchstart</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>rotate</p> <p><code>Fires</code></p> <p>pitch</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Fires</code></p> <p>pitchend</p> <p><code>Example</code></p> <pre><code>// fly with default options to null island\nmap.flyTo({center: [0, 0], zoom: 9});\n// using flyTo options\nmap.flyTo({\ncenter: [0, 0],\nzoom: 9,\nspeed: 0.2,\ncurve: 1,\neasing(t) {\nreturn t;\n}\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Fly to a location</li> <li>Slowly fly to a location</li> <li>Fly to a location based on scroll position</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_15","title":"Parameters","text":"Name Type Description <code>options</code> <code>FlyToOptions</code> Options describing the destination and animation of the transition. Accepts CameraOptions, AnimationOptions, and the following additional options. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_22","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_7","title":"Inherited from","text":"<p>Camera.flyTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_22","title":"Defined in","text":"<p>src/ui/camera.ts:1161</p>"},{"location":"API/classes/maplibregl.Map/#getbearing","title":"getBearing","text":"<p>\u25b8 getBearing(): <code>number</code></p> <p>Returns the map's current bearing. The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>See</code></p> <p>Navigate the map with game-like controls</p>"},{"location":"API/classes/maplibregl.Map/#returns_23","title":"Returns","text":"<p><code>number</code></p> <p>The map's current bearing.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_8","title":"Inherited from","text":"<p>Camera.getBearing</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_23","title":"Defined in","text":"<p>src/ui/camera.ts:383</p>"},{"location":"API/classes/maplibregl.Map/#getbounds","title":"getBounds","text":"<p>\u25b8 getBounds(): <code>LngLatBounds</code></p> <p>Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.</p> <p><code>Example</code></p> <pre><code>var bounds = map.getBounds();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_24","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The geographical bounds of the map as LngLatBounds.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_24","title":"Defined in","text":"<p>src/ui/map.ts:728</p>"},{"location":"API/classes/maplibregl.Map/#getcameratargetelevation","title":"getCameraTargetElevation","text":"<p>\u25b8 getCameraTargetElevation(): <code>number</code></p> <p>Returns the elevation for the point where the camera is looking. This value corresponds to: \"meters above sea level\" * \"exaggeration\"</p>"},{"location":"API/classes/maplibregl.Map/#returns_25","title":"Returns","text":"<p><code>number</code></p> <ul> <li>The elevation.</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_25","title":"Defined in","text":"<p>src/ui/map.ts:3165</p>"},{"location":"API/classes/maplibregl.Map/#getcanvas","title":"getCanvas","text":"<p>\u25b8 getCanvas(): <code>HTMLCanvasElement</code></p> <p>Returns the map's <code>&lt;canvas&gt;</code> element.</p> <p><code>See</code></p> <ul> <li>Measure distances</li> <li>Display a popup on hover</li> <li>Center the map on a clicked symbol</li> </ul>"},{"location":"API/classes/maplibregl.Map/#returns_26","title":"Returns","text":"<p><code>HTMLCanvasElement</code></p> <p>The map's <code>&lt;canvas&gt;</code> element.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_26","title":"Defined in","text":"<p>src/ui/map.ts:2641</p>"},{"location":"API/classes/maplibregl.Map/#getcanvascontainer","title":"getCanvasContainer","text":"<p>\u25b8 getCanvasContainer(): <code>HTMLElement</code></p> <p>Returns the HTML element containing the map's <code>&lt;canvas&gt;</code> element.</p> <p>If you want to add non-GL overlays to the map, you should append them to this element.</p> <p>This is the element to which event bindings for map interactivity (such as panning and zooming) are attached. It will receive bubbled events from child elements such as the <code>&lt;canvas&gt;</code>, but not from map controls.</p> <p><code>See</code></p> <p>Create a draggable point</p>"},{"location":"API/classes/maplibregl.Map/#returns_27","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The container of the map's <code>&lt;canvas&gt;</code>.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_27","title":"Defined in","text":"<p>src/ui/map.ts:2629</p>"},{"location":"API/classes/maplibregl.Map/#getcenter","title":"getCenter","text":"<p>\u25b8 getCenter(): <code>LngLat</code></p> <p>Returns the map's geographical centerpoint.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Example</code></p> <pre><code>// return a LngLat object such as {lng: 0, lat: 0}\nvar center = map.getCenter();\n// access longitude and latitude values directly\nvar {lng, lat} = map.getCenter();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_28","title":"Returns","text":"<p><code>LngLat</code></p> <p>The map's geographical centerpoint.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_9","title":"Inherited from","text":"<p>Camera.getCenter</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_28","title":"Defined in","text":"<p>src/ui/camera.ts:212</p>"},{"location":"API/classes/maplibregl.Map/#getcontainer","title":"getContainer","text":"<p>\u25b8 getContainer(): <code>HTMLElement</code></p> <p>Returns the map's containing HTML element.</p>"},{"location":"API/classes/maplibregl.Map/#returns_29","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The map's container.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_29","title":"Defined in","text":"<p>src/ui/map.ts:2613</p>"},{"location":"API/classes/maplibregl.Map/#getcooperativegestures","title":"getCooperativeGestures","text":"<p>\u25b8 getCooperativeGestures(): <code>boolean</code> | <code>GestureOptions</code></p> <p>Gets the map's cooperativeGestures option</p>"},{"location":"API/classes/maplibregl.Map/#returns_30","title":"Returns","text":"<p><code>boolean</code> | <code>GestureOptions</code></p> <p>gestureOptions</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_30","title":"Defined in","text":"<p>src/ui/map.ts:951</p>"},{"location":"API/classes/maplibregl.Map/#getfeaturestate","title":"getFeatureState","text":"<p>\u25b8 getFeatureState(<code>feature</code>): <code>any</code></p> <p>Gets the <code>state</code> of a feature. A feature's <code>state</code> is a set of user-defined key-value pairs that are assigned to a feature at runtime. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p>Note: To access the values in a feature's state object for the purposes of styling the feature, use the <code>feature-state</code> expression.</p> <p><code>Example</code></p> <pre><code>// When the mouse moves over the `my-layer` layer,\n// get the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\nif (e.features.length &gt; 0) {\nmap.getFeatureState({\nsource: 'my-source',\nsourceLayer: 'my-source-layer',\nid: e.features[0].id\n});\n}\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_16","title":"Parameters","text":"Name Type Description <code>feature</code> <code>FeatureIdentifier</code> Feature identifier. Feature objects returned from queryRenderedFeatures or event handlers can be used as feature identifiers."},{"location":"API/classes/maplibregl.Map/#returns_31","title":"Returns","text":"<p><code>any</code></p> <p>The state of the feature: a set of key-value pairs that was assigned to the feature at runtime.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_31","title":"Defined in","text":"<p>src/ui/map.ts:2604</p>"},{"location":"API/classes/maplibregl.Map/#getfilter","title":"getFilter","text":"<p>\u25b8 getFilter(<code>layerId</code>): <code>void</code> | <code>FilterSpecification</code></p> <p>Returns the filter applied to the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_17","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the style layer whose filter to get."},{"location":"API/classes/maplibregl.Map/#returns_32","title":"Returns","text":"<p><code>void</code> | <code>FilterSpecification</code></p> <p>The layer's filter.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_32","title":"Defined in","text":"<p>src/ui/map.ts:2300</p>"},{"location":"API/classes/maplibregl.Map/#getglyphs","title":"getGlyphs","text":"<p>\u25b8 getGlyphs(): <code>string</code></p> <p>Returns the value of the style's glyphs URL</p>"},{"location":"API/classes/maplibregl.Map/#returns_33","title":"Returns","text":"<p><code>string</code></p> <p>glyphs Style's glyphs url</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_33","title":"Defined in","text":"<p>src/ui/map.ts:2384</p>"},{"location":"API/classes/maplibregl.Map/#getimage","title":"getImage","text":"<p>\u25b8 getImage(<code>id</code>): <code>StyleImage</code></p> <p>Returns an image, specified by ID, currently available in the map. This includes both images from the style's original sprite and any images that have been added at runtime using addImage.</p> <p><code>Example</code></p> <pre><code>var coffeeShopIcon = map.getImage(\"coffee_cup\");\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_18","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/maplibregl.Map/#returns_34","title":"Returns","text":"<p><code>StyleImage</code></p> <p>An image in the map with the specified ID.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_34","title":"Defined in","text":"<p>src/ui/map.ts:1987</p>"},{"location":"API/classes/maplibregl.Map/#getlayer","title":"getLayer","text":"<p>\u25b8 getLayer(<code>id</code>): <code>StyleLayer</code></p> <p>Returns the layer with the specified ID in the map's style.</p> <p><code>Example</code></p> <pre><code>var stateDataLayer = map.getLayer('state-data');\n</code></pre> <p><code>See</code></p> <ul> <li>Filter symbols by toggling a list</li> <li>Filter symbols by text input</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_19","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the layer to get."},{"location":"API/classes/maplibregl.Map/#returns_35","title":"Returns","text":"<p><code>StyleLayer</code></p> <p>The layer with the specified ID, or <code>undefined</code> if the ID corresponds to no existing layers.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_35","title":"Defined in","text":"<p>src/ui/map.ts:2230</p>"},{"location":"API/classes/maplibregl.Map/#getlayoutproperty","title":"getLayoutProperty","text":"<p>\u25b8 getLayoutProperty(<code>layerId</code>, <code>name</code>): <code>any</code></p> <p>Returns the value of a layout property in the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_20","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to get the layout property from. <code>name</code> <code>string</code> The name of the layout property to get."},{"location":"API/classes/maplibregl.Map/#returns_36","title":"Returns","text":"<p><code>any</code></p> <p>The value of the specified layout property.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_36","title":"Defined in","text":"<p>src/ui/map.ts:2359</p>"},{"location":"API/classes/maplibregl.Map/#getlight","title":"getLight","text":"<p>\u25b8 getLight(): <code>LightSpecification</code></p> <p>Returns the value of the light object.</p>"},{"location":"API/classes/maplibregl.Map/#returns_37","title":"Returns","text":"<p><code>LightSpecification</code></p> <p>light Light properties of the style.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_37","title":"Defined in","text":"<p>src/ui/map.ts:2476</p>"},{"location":"API/classes/maplibregl.Map/#getmaxbounds","title":"getMaxBounds","text":"<p>\u25b8 getMaxBounds(): <code>LngLatBounds</code></p> <p>Returns the maximum geographical bounds the map is constrained to, or <code>null</code> if none set.</p> <p><code>Example</code></p> <pre><code>var maxBounds = map.getMaxBounds();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_38","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The map object.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_38","title":"Defined in","text":"<p>src/ui/map.ts:738</p>"},{"location":"API/classes/maplibregl.Map/#getmaxpitch","title":"getMaxPitch","text":"<p>\u25b8 getMaxPitch(): <code>number</code></p> <p>Returns the map's maximum allowable pitch.</p>"},{"location":"API/classes/maplibregl.Map/#returns_39","title":"Returns","text":"<p><code>number</code></p> <p>maxPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_39","title":"Defined in","text":"<p>src/ui/map.ts:911</p>"},{"location":"API/classes/maplibregl.Map/#getmaxzoom","title":"getMaxZoom","text":"<p>\u25b8 getMaxZoom(): <code>number</code></p> <p>Returns the map's maximum allowable zoom level.</p> <p><code>Example</code></p> <pre><code>var maxZoom = map.getMaxZoom();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_40","title":"Returns","text":"<p><code>number</code></p> <p>maxZoom</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_40","title":"Defined in","text":"<p>src/ui/map.ts:841</p>"},{"location":"API/classes/maplibregl.Map/#getminpitch","title":"getMinPitch","text":"<p>\u25b8 getMinPitch(): <code>number</code></p> <p>Returns the map's minimum allowable pitch.</p>"},{"location":"API/classes/maplibregl.Map/#returns_41","title":"Returns","text":"<p><code>number</code></p> <p>minPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_41","title":"Defined in","text":"<p>src/ui/map.ts:876</p>"},{"location":"API/classes/maplibregl.Map/#getminzoom","title":"getMinZoom","text":"<p>\u25b8 getMinZoom(): <code>number</code></p> <p>Returns the map's minimum allowable zoom level.</p> <p><code>Example</code></p> <pre><code>var minZoom = map.getMinZoom();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_42","title":"Returns","text":"<p><code>number</code></p> <p>minZoom</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_42","title":"Defined in","text":"<p>src/ui/map.ts:806</p>"},{"location":"API/classes/maplibregl.Map/#getpadding","title":"getPadding","text":"<p>\u25b8 getPadding(): <code>PaddingOptions</code></p> <p>Returns the current padding applied around the map viewport.</p> <p><code>Memberof</code></p> <p>Map#</p>"},{"location":"API/classes/maplibregl.Map/#returns_43","title":"Returns","text":"<p><code>PaddingOptions</code></p> <p>The current padding around the map viewport.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_10","title":"Inherited from","text":"<p>Camera.getPadding</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_43","title":"Defined in","text":"<p>src/ui/camera.ts:412</p>"},{"location":"API/classes/maplibregl.Map/#getpaintproperty","title":"getPaintProperty","text":"<p>\u25b8 getPaintProperty(<code>layerId</code>, <code>name</code>): <code>unknown</code></p> <p>Returns the value of a paint property in the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_21","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to get the paint property from. <code>name</code> <code>string</code> The name of a paint property to get."},{"location":"API/classes/maplibregl.Map/#returns_44","title":"Returns","text":"<p><code>unknown</code></p> <p>The value of the specified paint property.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_44","title":"Defined in","text":"<p>src/ui/map.ts:2331</p>"},{"location":"API/classes/maplibregl.Map/#getpitch","title":"getPitch","text":"<p>\u25b8 getPitch(): <code>number</code></p> <p>Returns the map's current pitch (tilt).</p> <p><code>Memberof</code></p> <p>Map#</p>"},{"location":"API/classes/maplibregl.Map/#returns_45","title":"Returns","text":"<p><code>number</code></p> <p>The map's current pitch, measured in degrees away from the plane of the screen.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_11","title":"Inherited from","text":"<p>Camera.getPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_45","title":"Defined in","text":"<p>src/ui/camera.ts:510</p>"},{"location":"API/classes/maplibregl.Map/#getpixelratio","title":"getPixelRatio","text":"<p>\u25b8 getPixelRatio(): <code>number</code></p> <p>Returns the map's pixel ratio.</p>"},{"location":"API/classes/maplibregl.Map/#returns_46","title":"Returns","text":"<p><code>number</code></p> <p>The pixel ratio.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_46","title":"Defined in","text":"<p>src/ui/map.ts:702</p>"},{"location":"API/classes/maplibregl.Map/#getrenderworldcopies","title":"getRenderWorldCopies","text":"<p>\u25b8 getRenderWorldCopies(): <code>boolean</code></p> <p>Returns the state of <code>renderWorldCopies</code>. If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level.</p> <p><code>Example</code></p> <pre><code>var worldCopiesRendered = map.getRenderWorldCopies();\n</code></pre> <p><code>See</code></p> <p>Render world copies</p>"},{"location":"API/classes/maplibregl.Map/#returns_47","title":"Returns","text":"<p><code>boolean</code></p> <p>renderWorldCopies</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_47","title":"Defined in","text":"<p>src/ui/map.ts:924</p>"},{"location":"API/classes/maplibregl.Map/#getsource","title":"getSource","text":"<p>\u25b8 getSource(<code>id</code>): <code>Source</code></p> <p>Returns the source with the specified ID in the map's style.</p> <p>This method is often used to update a source using the instance members for the relevant source type as defined in Sources. For example, setting the <code>data</code> for a GeoJSON source or updating the <code>url</code> and <code>coordinates</code> of an image source.</p> <p><code>Example</code></p> <pre><code>var sourceObject = map.getSource('points');\n</code></pre> <p><code>See</code></p> <ul> <li>Create a draggable point</li> <li>Animate a point</li> <li>Add live realtime data</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_22","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to get."},{"location":"API/classes/maplibregl.Map/#returns_48","title":"Returns","text":"<p><code>Source</code></p> <p>The style source with the specified ID or <code>undefined</code> if the ID corresponds to no existing sources. The shape of the object varies by source type. A list of options for each source type is available on the MapLibre Style Specification's Sources page.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_48","title":"Defined in","text":"<p>src/ui/map.ts:1829</p>"},{"location":"API/classes/maplibregl.Map/#getsprite","title":"getSprite","text":"<p>\u25b8 getSprite(): { <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>Returns the as-is value of the style's sprite.</p>"},{"location":"API/classes/maplibregl.Map/#returns_49","title":"Returns","text":"<p>{ <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>style's sprite url or a list of id-url pairs</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_49","title":"Defined in","text":"<p>src/ui/map.ts:2431</p>"},{"location":"API/classes/maplibregl.Map/#getstyle","title":"getStyle","text":"<p>\u25b8 getStyle(): <code>StyleSpecification</code></p> <p>Returns the map's MapLibre style object, a JSON object which can be used to recreate the map's style.</p> <p><code>Example</code></p> <pre><code>var styleJson = map.getStyle();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_50","title":"Returns","text":"<p><code>StyleSpecification</code></p> <p>The map's style JSON object.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_50","title":"Defined in","text":"<p>src/ui/map.ts:1629</p>"},{"location":"API/classes/maplibregl.Map/#getterrain","title":"getTerrain","text":"<p>\u25b8 getTerrain(): <code>TerrainSpecification</code></p> <p>Get the terrain-options if terrain is loaded</p> <p><code>Example</code></p> <pre><code>map.getTerrain(); // { source: 'terrain' };\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_51","title":"Returns","text":"<p><code>TerrainSpecification</code></p> <p>the TerrainSpecification passed to setTerrain</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_51","title":"Defined in","text":"<p>src/ui/map.ts:1758</p>"},{"location":"API/classes/maplibregl.Map/#getzoom","title":"getZoom","text":"<p>\u25b8 getZoom(): <code>number</code></p> <p>Returns the map's current zoom level.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Example</code></p> <pre><code>map.getZoom();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_52","title":"Returns","text":"<p><code>number</code></p> <p>The map's current zoom level.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_12","title":"Inherited from","text":"<p>Camera.getZoom</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_52","title":"Defined in","text":"<p>src/ui/camera.ts:278</p>"},{"location":"API/classes/maplibregl.Map/#hascontrol","title":"hasControl","text":"<p>\u25b8 hasControl(<code>control</code>): <code>boolean</code></p> <p>Checks if a control exists on the map.</p> <p><code>Example</code></p> <pre><code>// Define a new navigation control.\nvar navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Check that the navigation control exists on the map.\nmap.hasControl(navigation);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_23","title":"Parameters","text":"Name Type Description <code>control</code> <code>IControl</code> The IControl to check."},{"location":"API/classes/maplibregl.Map/#returns_53","title":"Returns","text":"<p><code>boolean</code></p> <p>True if map contains control.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_53","title":"Defined in","text":"<p>src/ui/map.ts:645</p>"},{"location":"API/classes/maplibregl.Map/#hasimage","title":"hasImage","text":"<p>\u25b8 hasImage(<code>id</code>): <code>boolean</code></p> <p>Check whether or not an image with a specific ID exists in the style. This checks both images in the style's original sprite and any images that have been added at runtime using addImage.</p> <p><code>Example</code></p> <pre><code>// Check if an image with the ID 'cat' exists in\n// the style's sprite.\nvar catIconExists = map.hasImage('cat');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_24","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/maplibregl.Map/#returns_54","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the image exists.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_54","title":"Defined in","text":"<p>src/ui/map.ts:2004</p>"},{"location":"API/classes/maplibregl.Map/#ismoving","title":"isMoving","text":"<p>\u25b8 isMoving(): <code>boolean</code></p> <p>Returns true if the map is panning, zooming, rotating, or pitching due to a camera animation or user gesture.</p> <p><code>Example</code></p> <pre><code>var isMoving = map.isMoving();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_55","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the map is moving.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_55","title":"Defined in","text":"<p>src/ui/map.ts:1008</p>"},{"location":"API/classes/maplibregl.Map/#isrotating","title":"isRotating","text":"<p>\u25b8 isRotating(): <code>boolean</code></p> <p>Returns true if the map is rotating due to a camera animation or user gesture.</p> <p><code>Example</code></p> <pre><code>map.isRotating();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_56","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the map is rotating.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_56","title":"Defined in","text":"<p>src/ui/map.ts:1028</p>"},{"location":"API/classes/maplibregl.Map/#issourceloaded","title":"isSourceLoaded","text":"<p>\u25b8 isSourceLoaded(<code>id</code>): <code>boolean</code></p> <p>Returns a Boolean indicating whether the source is loaded. Returns <code>true</code> if the source with the given ID in the map's style has no outstanding network requests, otherwise <code>false</code>.</p> <p><code>Example</code></p> <pre><code>var sourceLoaded = map.isSourceLoaded('bathymetry-data');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_25","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to be checked."},{"location":"API/classes/maplibregl.Map/#returns_57","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the source is loaded.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_57","title":"Defined in","text":"<p>src/ui/map.ts:1694</p>"},{"location":"API/classes/maplibregl.Map/#isstyleloaded","title":"isStyleLoaded","text":"<p>\u25b8 isStyleLoaded(): <code>boolean</code> | <code>void</code></p> <p>Returns a Boolean indicating whether the map's style is fully loaded.</p> <p><code>Example</code></p> <pre><code>var styleLoadStatus = map.isStyleLoaded();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_58","title":"Returns","text":"<p><code>boolean</code> | <code>void</code></p> <p>A Boolean indicating whether the style is fully loaded.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_58","title":"Defined in","text":"<p>src/ui/map.ts:1643</p>"},{"location":"API/classes/maplibregl.Map/#iszooming","title":"isZooming","text":"<p>\u25b8 isZooming(): <code>boolean</code></p> <p>Returns true if the map is zooming due to a camera animation or user gesture.</p> <p><code>Example</code></p> <pre><code>var isZooming = map.isZooming();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_59","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the map is zooming.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_59","title":"Defined in","text":"<p>src/ui/map.ts:1018</p>"},{"location":"API/classes/maplibregl.Map/#jumpto","title":"jumpTo","text":"<p>\u25b8 jumpTo(<code>options</code>, <code>eventData?</code>): <code>Map</code></p> <p>Changes any combination of center, zoom, bearing, and pitch, without an animated transition. The map will retain its current values for any details not specified in <code>options</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>pitchstart</p> <p><code>Fires</code></p> <p>rotate</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>pitch</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Fires</code></p> <p>pitchend</p> <p><code>Example</code></p> <pre><code>// jump to coordinates at current zoom\nmap.jumpTo({center: [0, 0]});\n// jump with zoom, pitch, and bearing options\nmap.jumpTo({\ncenter: [0, 0],\nzoom: 8,\npitch: 45,\nbearing: 90\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Jump to a series of locations</li> <li>Update a feature in realtime</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_26","title":"Parameters","text":"Name Type Description <code>options</code> <code>JumpToOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_60","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_13","title":"Inherited from","text":"<p>Camera.jumpTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_60","title":"Defined in","text":"<p>src/ui/camera.ts:762</p>"},{"location":"API/classes/maplibregl.Map/#listimages","title":"listImages","text":"<p>\u25b8 listImages(): <code>string</code>[]</p> <p>Returns an Array of strings containing the IDs of all images currently available in the map. This includes both images from the style's original sprite and any images that have been added at runtime using addImage.</p> <p><code>Example</code></p> <pre><code>var allImages = map.listImages();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_61","title":"Returns","text":"<p><code>string</code>[]</p> <p>An Array of strings containing the names of all sprites/images currently available in the map.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_61","title":"Defined in","text":"<p>src/ui/map.ts:2061</p>"},{"location":"API/classes/maplibregl.Map/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_27","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Map/#returns_62","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_14","title":"Inherited from","text":"<p>Camera.listens</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_62","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.Map/#loadimage","title":"loadImage","text":"<p>\u25b8 loadImage(<code>url</code>, <code>callback</code>): <code>void</code></p> <p>Load an image from an external URL to be used with addImage. External domains must support CORS.</p> <p><code>Example</code></p> <pre><code>// Load an image from an external URL.\nmap.loadImage('http://placekitten.com/50/50', function(error, image) {\nif (error) throw error;\n// Add the loaded image to the style's sprite with the ID 'kitten'.\nmap.addImage('kitten', image);\n});\n</code></pre> <p><code>See</code></p> <p>Add an icon to the map</p>"},{"location":"API/classes/maplibregl.Map/#parameters_28","title":"Parameters","text":"Name Type Description <code>url</code> <code>string</code> The URL of the image file. Image file must be in png, webp, or jpg format. <code>callback</code> <code>GetImageCallback</code> Expecting <code>callback(error, data)</code>. Called when the image has loaded or with an error argument if there is an error."},{"location":"API/classes/maplibregl.Map/#returns_63","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_63","title":"Defined in","text":"<p>src/ui/map.ts:2046</p>"},{"location":"API/classes/maplibregl.Map/#loaded","title":"loaded","text":"<p>\u25b8 loaded(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the map is fully loaded.</p> <p>Returns <code>false</code> if the style is not yet fully loaded, or if there has been a change to the sources or style that has not yet fully loaded.</p>"},{"location":"API/classes/maplibregl.Map/#returns_64","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the map is fully loaded.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_64","title":"Defined in","text":"<p>src/ui/map.ts:2808</p>"},{"location":"API/classes/maplibregl.Map/#movelayer","title":"moveLayer","text":"<p>\u25b8 moveLayer(<code>id</code>, <code>beforeId?</code>): <code>Map</code></p> <p>Moves a layer to a different z-position.</p> <p><code>Example</code></p> <pre><code>// Move a layer with ID 'polygon' before the layer with ID 'country-label'. The `polygon` layer will appear beneath the `country-label` layer on the map.\nmap.moveLayer('polygon', 'country-label');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_29","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the layer to move. <code>beforeId?</code> <code>string</code> The ID of an existing layer to insert the new layer before. When viewing the map, the <code>id</code> layer will appear beneath the <code>beforeId</code> layer. If <code>beforeId</code> is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map."},{"location":"API/classes/maplibregl.Map/#returns_65","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_65","title":"Defined in","text":"<p>src/ui/map.ts:2194</p>"},{"location":"API/classes/maplibregl.Map/#off","title":"off","text":"<p>\u25b8 off&lt;<code>T</code>&gt;(<code>type</code>, <code>layer</code>, <code>listener</code>): <code>Map</code></p> <p>Removes an event listener for layer-specific events previously added with <code>Map#on</code>.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_30","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The event type previously used to install the listener. <code>layer</code> <code>string</code> The layer ID or listener previously used to install the listener. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function previously installed as a listener."},{"location":"API/classes/maplibregl.Map/#returns_66","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_1","title":"Overrides","text":"<p>Camera.off</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_66","title":"Defined in","text":"<p>src/ui/map.ts:1281</p>"},{"location":"API/classes/maplibregl.Map/#on","title":"on","text":"<p>\u25b8 on&lt;<code>T</code>&gt;(<code>type</code>, <code>layer</code>, <code>listener</code>): <code>Map</code></p> <p>Adds a listener for events of a specified type, optionally limited to features in a specified style layer.</p> <p><code>Example</code></p> <pre><code>// Set an event listener that will fire\n// when the map has finished loading\nmap.on('load', function() {\n// Once the map has finished loading,\n// add a new layer\nmap.addLayer({\nid: 'points-of-interest',\nsource: {\ntype: 'vector',\nurl: 'https://maplibre.org/maplibre-style-spec/'\n},\n'source-layer': 'poi_label',\ntype: 'circle',\npaint: {\n// MapLibre Style Specification paint properties\n},\nlayout: {\n// MapLibre Style Specification layout properties\n}\n});\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Set an event listener that will fire\n// when a feature on the countries layer of the map is clicked\nmap.on('click', 'countries', function(e) {\nnew maplibregl.Popup()\n.setLngLat(e.lngLat)\n.setHTML(`Country name: ${e.features[0].properties.name}`)\n.addTo(map);\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Display popup on click</li> <li>Center the map on a clicked symbol</li> <li>Create a hover effect</li> <li>Create a draggable marker</li> </ul>"},{"location":"API/classes/maplibregl.Map/#type-parameters_1","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_31","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The event type to listen for. Events compatible with the optional <code>layerId</code> parameter are triggered when the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas. | Event | Compatible with <code>layerId</code> | |-----------------------------------------------------------|---------------------------| | <code>mousedown</code> | yes | | <code>mouseup</code> | yes | | <code>mouseover</code> | yes | | <code>mouseout</code> | yes | | <code>mousemove</code> | yes | | <code>mouseenter</code> | yes (required) | | <code>mouseleave</code> | yes (required) | | <code>click</code> | yes | | <code>dblclick</code> | yes | | <code>contextmenu</code> | yes | | <code>touchstart</code> | yes | | <code>touchend</code> | yes | | <code>touchcancel</code> | yes | | <code>wheel</code> | | | <code>resize</code> | | | <code>remove</code> | | | <code>touchmove</code> | | | <code>movestart</code> | | | <code>move</code> | | | <code>moveend</code> | | | <code>dragstart</code> | | | <code>drag</code> | | | <code>dragend</code> | | | <code>zoomstart</code> | | | <code>zoom</code> | | | <code>zoomend</code> | | | <code>rotatestart</code> | | | <code>rotate</code> | | | <code>rotateend</code> | | | <code>pitchstart</code> | | | <code>pitch</code> | | | <code>pitchend</code> | | | <code>boxzoomstart</code> | | | <code>boxzoomend</code> | | | <code>boxzoomcancel</code> | | | <code>webglcontextlost</code> | | | <code>webglcontextrestored</code> | | | <code>load</code> | | | <code>render</code> | | | <code>idle</code> | | | <code>error</code> | | | <code>data</code> | | | <code>styledata</code> | | | <code>sourcedata</code> | | | <code>dataloading</code> | | | <code>styledataloading</code> | | | <code>sourcedataloading</code> | | | <code>styleimagemissing</code> | | | <code>dataabort</code> | | | <code>sourcedataabort</code> | | <code>layer</code> <code>string</code> The ID of a style layer or a listener if no ID is provided. Event will only be triggered if its location is within a visible feature in this layer. The event will have a <code>features</code> property containing an array of the matching features. If <code>layerIdOrListener</code> is not supplied, the event will not have a <code>features</code> property. Please note that many event types are not compatible with the optional <code>layerIdOrListener</code> parameter. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function to be called when the event is fired."},{"location":"API/classes/maplibregl.Map/#returns_67","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_2","title":"Overrides","text":"<p>Camera.on</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_67","title":"Defined in","text":"<p>src/ui/map.ts:1185</p>"},{"location":"API/classes/maplibregl.Map/#once","title":"once","text":"<p>\u25b8 once&lt;<code>T</code>&gt;(<code>type</code>, <code>layer</code>, <code>listener?</code>): <code>Map</code> | <code>Promise</code>&lt;<code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>&gt;</p> <p>Adds a listener that will be called only once to a specified event type occurring on features in a specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters_2","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_32","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The event type to listen for; one of <code>'mousedown'</code>, <code>'mouseup'</code>, <code>'click'</code>, <code>'dblclick'</code>, <code>'mousemove'</code>, <code>'mouseenter'</code>, <code>'mouseleave'</code>, <code>'mouseover'</code>, <code>'mouseout'</code>, <code>'contextmenu'</code>, <code>'touchstart'</code>, <code>'touchend'</code>, or <code>'touchcancel'</code>. <code>mouseenter</code> and <code>mouseover</code> events are triggered when the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas. <code>mouseleave</code> and <code>mouseout</code> events are triggered when the cursor leaves a visible portion of the specified layer, or leaves the map canvas. <code>layer</code> <code>string</code> The ID of a style layer or a listener if no ID is provided. Only events whose location is within a visible feature in this layer will trigger the listener. The event will have a <code>features</code> property containing an array of the matching features. <code>listener?</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function to be called when the event is fired."},{"location":"API/classes/maplibregl.Map/#returns_68","title":"Returns","text":"<p><code>Map</code> | <code>Promise</code>&lt;<code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>&gt;</p> <p><code>this</code> if listener is provided, promise otherwise to allow easier usage of async/await</p>"},{"location":"API/classes/maplibregl.Map/#overrides_3","title":"Overrides","text":"<p>Camera.once</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_68","title":"Defined in","text":"<p>src/ui/map.ts:1239</p>"},{"location":"API/classes/maplibregl.Map/#panby","title":"panBy","text":"<p>\u25b8 panBy(<code>offset</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans the map by the specified offset.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>See</code></p> <p>Navigate the map with game-like controls</p>"},{"location":"API/classes/maplibregl.Map/#parameters_33","title":"Parameters","text":"Name Type Description <code>offset</code> <code>PointLike</code> <code>x</code> and <code>y</code> coordinates by which to pan the map. <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_69","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_15","title":"Inherited from","text":"<p>Camera.panBy</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_69","title":"Defined in","text":"<p>src/ui/camera.ts:242</p>"},{"location":"API/classes/maplibregl.Map/#panto","title":"panTo","text":"<p>\u25b8 panTo(<code>lnglat</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans the map to the specified location with an animated transition.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Example</code></p> <pre><code>map.panTo([-74, 38]);\n</code></pre> <p><code>Example</code></p> <pre><code>// Specify that the panTo animation should last 5000 milliseconds.\nmap.panTo([-74, 38], {duration: 5000});\n</code></pre> <p><code>See</code></p> <p>Update a feature in realtime</p>"},{"location":"API/classes/maplibregl.Map/#parameters_34","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> The location to pan the map to. <code>options?</code> <code>AnimationOptions</code> Options describing the destination and animation of the transition. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_70","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_16","title":"Inherited from","text":"<p>Camera.panTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_70","title":"Defined in","text":"<p>src/ui/camera.ts:264</p>"},{"location":"API/classes/maplibregl.Map/#project","title":"project","text":"<p>\u25b8 project(<code>lnglat</code>): <code>Point</code></p> <p>Returns a Point representing pixel coordinates, relative to the map's <code>container</code>, that correspond to the specified geographical location.</p> <p><code>Example</code></p> <pre><code>var coordinate = [-122.420679, 37.772537];\nvar point = map.project(coordinate);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_35","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> The geographical location to project."},{"location":"API/classes/maplibregl.Map/#returns_71","title":"Returns","text":"<p><code>Point</code></p> <p>The Point corresponding to <code>lnglat</code>, relative to the map's <code>container</code>.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_71","title":"Defined in","text":"<p>src/ui/map.ts:982</p>"},{"location":"API/classes/maplibregl.Map/#queryrenderedfeatures","title":"queryRenderedFeatures","text":"<p>\u25b8 queryRenderedFeatures(<code>geometryOrOptions?</code>, <code>options?</code>): <code>MapGeoJSONFeature</code>[]</p> <p>Returns an array of MapGeoJSONFeature objects representing visible features that satisfy the query parameters.</p> <p><code>Example</code></p> <pre><code>// Find all features at a point\nvar features = map.queryRenderedFeatures(\n[20, 35],\n{ layers: ['my-layer-name'] }\n);\n</code></pre> <p><code>Example</code></p> <pre><code>// Find all features within a static bounding box\nvar features = map.queryRenderedFeatures(\n[[10, 20], [30, 50]],\n{ layers: ['my-layer-name'] }\n);\n</code></pre> <p><code>Example</code></p> <pre><code>// Find all features within a bounding box around a point\nvar width = 10;\nvar height = 20;\nvar features = map.queryRenderedFeatures([\n[point.x - width / 2, point.y - height / 2],\n[point.x + width / 2, point.y + height / 2]\n], { layers: ['my-layer-name'] });\n</code></pre> <p><code>Example</code></p> <pre><code>// Query all rendered features from a single layer\nvar features = map.queryRenderedFeatures({ layers: ['my-layer-name'] });\n</code></pre> <p><code>See</code></p> <p>Get features under the mouse pointer</p>"},{"location":"API/classes/maplibregl.Map/#parameters_36","title":"Parameters","text":"Name Type Description <code>geometryOrOptions?</code> <code>PointLike</code> | <code>QueryRenderedFeaturesOptions</code> | [<code>PointLike</code>, <code>PointLike</code>] (optional) The geometry of the query region: either a single point or southwest and northeast points describing a bounding box. Omitting this parameter (i.e. calling queryRenderedFeatures with zero arguments, or with only a <code>options</code> argument) is equivalent to passing a bounding box encompassing the entire map viewport. The geometryOrOptions can receive a QueryRenderedFeaturesOptions only to support a situation where the function receives only one parameter which is the options parameter. <code>options?</code> <code>QueryRenderedFeaturesOptions</code> (optional) Options object."},{"location":"API/classes/maplibregl.Map/#returns_72","title":"Returns","text":"<p><code>MapGeoJSONFeature</code>[]</p> <p>An array of MapGeoJSONFeature objects.</p> <p>The <code>properties</code> value of each returned feature object contains the properties of its source feature. For GeoJSON sources, only string and numeric property values are supported (i.e. <code>null</code>, <code>Array</code>, and <code>Object</code> values are not supported).</p> <p>Each feature includes top-level <code>layer</code>, <code>source</code>, and <code>sourceLayer</code> properties. The <code>layer</code> property is an object representing the style layer to  which the feature belongs. Layout and paint properties in this object contain values which are fully evaluated for the given zoom level and feature.</p> <p>Only features that are currently rendered are included. Some features will not be included, like:</p> <ul> <li>Features from layers whose <code>visibility</code> property is <code>\"none\"</code>.</li> <li>Features from layers whose zoom range excludes the current zoom level.</li> <li>Symbol features that have been hidden due to text or icon collision.</li> </ul> <p>Features from all other layers are included, including features that may have no visible contribution to the rendered result; for example, because the layer's opacity or color alpha component is set to 0.</p> <p>The topmost rendered feature appears first in the returned array, and subsequent features are sorted by descending z-order. Features that are rendered multiple times (due to wrapping across the antemeridian at low zoom levels) are returned only once (though subject to the following caveat).</p> <p>Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature geometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple times in query results. For example, suppose there is a highway running through the bounding rectangle of a query. The results of the query will be those parts of the highway that lie within the map tiles covering the bounding rectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile will be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple tiles due to tile buffering.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_72","title":"Defined in","text":"<p>src/ui/map.ts:1391</p>"},{"location":"API/classes/maplibregl.Map/#querysourcefeatures","title":"querySourceFeatures","text":"<p>\u25b8 querySourceFeatures(<code>sourceId</code>, <code>parameters?</code>): <code>MapGeoJSONFeature</code>[]</p> <p>Returns an array of MapGeoJSONFeature objects representing features within the specified vector tile or GeoJSON source that satisfy the query parameters.</p> <p><code>Example</code></p> <pre><code>// Find all features in one source layer in a vector source\nvar features = map.querySourceFeatures('your-source-id', {\nsourceLayer: 'your-source-layer'\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_37","title":"Parameters","text":"Name Type Description <code>sourceId</code> <code>string</code> The ID of the vector tile or GeoJSON source to query. <code>parameters?</code> <code>Object</code> Options object. <code>parameters.filter?</code> <code>FilterSpecification</code> A filter to limit query results. <code>parameters.sourceLayer?</code> <code>string</code> The name of the source layer to query. For vector tile sources, this parameter is required. For GeoJSON sources, it is ignored. <code>parameters.validate?</code> <code>boolean</code> Whether to check if the [parameters.filter] conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."},{"location":"API/classes/maplibregl.Map/#returns_73","title":"Returns","text":"<p><code>MapGeoJSONFeature</code>[]</p> <p>An array of MapGeoJSONFeature objects.</p> <p>In contrast to queryRenderedFeatures, this function returns all features matching the query parameters, whether or not they are rendered by the current style (i.e. visible). The domain of the query includes all currently-loaded vector tiles and GeoJSON source tiles: this function does not check tiles outside the currently visible viewport.</p> <p>Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature geometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple times in query results. For example, suppose there is a highway running through the bounding rectangle of a query. The results of the query will be those parts of the highway that lie within the map tiles covering the bounding rectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile will be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple tiles due to tile buffering.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_73","title":"Defined in","text":"<p>src/ui/map.ts:1445</p>"},{"location":"API/classes/maplibregl.Map/#queryterrainelevation","title":"queryTerrainElevation","text":"<p>\u25b8 queryTerrainElevation(<code>lngLatLike</code>): <code>number</code></p> <p>Query the current elevation of location. It return null if terrain is not enabled. the elevation is in meters relative to mean sea-level</p> <p><code>Memberof</code></p> <p>Map#</p>"},{"location":"API/classes/maplibregl.Map/#parameters_38","title":"Parameters","text":"Name Type Description <code>lngLatLike</code> <code>LngLatLike</code> [x,y] or LngLat coordinates of the location"},{"location":"API/classes/maplibregl.Map/#returns_74","title":"Returns","text":"<p><code>number</code></p> <p>elevation in meters</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_17","title":"Inherited from","text":"<p>Camera.queryTerrainElevation</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_74","title":"Defined in","text":"<p>src/ui/camera.ts:1420</p>"},{"location":"API/classes/maplibregl.Map/#redraw","title":"redraw","text":"<p>\u25b8 redraw(): <code>Map</code></p> <p>Force a synchronous redraw of the map.</p> <p><code>Example</code></p> <pre><code>map.redraw();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#returns_75","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_75","title":"Defined in","text":"<p>src/ui/map.ts:2966</p>"},{"location":"API/classes/maplibregl.Map/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>void</code></p> <p>Clean up and release all internal resources associated with this map.</p> <p>This includes DOM elements, event bindings, web workers, and WebGL resources.</p> <p>Use this method when you are done using the map and wish to ensure that it no longer consumes browser resources. Afterwards, you must not call any other methods on the map.</p>"},{"location":"API/classes/maplibregl.Map/#returns_76","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_76","title":"Defined in","text":"<p>src/ui/map.ts:2987</p>"},{"location":"API/classes/maplibregl.Map/#removecontrol","title":"removeControl","text":"<p>\u25b8 removeControl(<code>control</code>): <code>Map</code></p> <p>Removes the control from the map.</p> <p><code>Example</code></p> <pre><code>// Define a new navigation control.\nvar navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Remove zoom and rotation controls from the map.\nmap.removeControl(navigation);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_39","title":"Parameters","text":"Name Type Description <code>control</code> <code>IControl</code> The IControl to remove."},{"location":"API/classes/maplibregl.Map/#returns_77","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_77","title":"Defined in","text":"<p>src/ui/map.ts:621</p>"},{"location":"API/classes/maplibregl.Map/#removefeaturestate","title":"removeFeatureState","text":"<p>\u25b8 removeFeatureState(<code>target</code>, <code>key?</code>): <code>Map</code></p> <p>Removes the <code>state</code> of a feature, setting it back to the default behavior. If only a <code>target.source</code> is specified, it will remove the state for all features from that source. If <code>target.id</code> is also specified, it will remove all keys for that feature's state. If <code>key</code> is also specified, it removes only that key from that feature's state. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p><code>Example</code></p> <pre><code>// Reset the entire state object for all features\n// in the `my-source` source\nmap.removeFeatureState({\nsource: 'my-source'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// When the mouse leaves the `my-layer` layer,\n// reset the entire state object for the\n// feature under the mouse\nmap.on('mouseleave', 'my-layer', function(e) {\nmap.removeFeatureState({\nsource: 'my-source',\nsourceLayer: 'my-source-layer',\nid: e.features[0].id\n});\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// When the mouse leaves the `my-layer` layer,\n// reset only the `hover` key-value pair in the\n// state for the feature under the mouse\nmap.on('mouseleave', 'my-layer', function(e) {\nmap.removeFeatureState({\nsource: 'my-source',\nsourceLayer: 'my-source-layer',\nid: e.features[0].id\n}, 'hover');\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_40","title":"Parameters","text":"Name Type Description <code>target</code> <code>FeatureIdentifier</code> Identifier of where to remove state. It can be a source, a feature, or a specific key of feature. Feature objects returned from queryRenderedFeatures or event handlers can be used as feature identifiers. <code>key?</code> <code>string</code> (optional) The key in the feature state to reset."},{"location":"API/classes/maplibregl.Map/#returns_78","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_78","title":"Defined in","text":"<p>src/ui/map.ts:2570</p>"},{"location":"API/classes/maplibregl.Map/#removeimage","title":"removeImage","text":"<p>\u25b8 removeImage(<code>id</code>): <code>void</code></p> <p>Remove an image from a style. This can be an image from the style's original sprite or any images that have been added at runtime using addImage.</p> <p><code>Example</code></p> <pre><code>// If an image with the ID 'cat' exists in\n// the style's sprite, remove it.\nif (map.hasImage('cat')) map.removeImage('cat');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_41","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/maplibregl.Map/#returns_79","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_79","title":"Defined in","text":"<p>src/ui/map.ts:2025</p>"},{"location":"API/classes/maplibregl.Map/#removelayer","title":"removeLayer","text":"<p>\u25b8 removeLayer(<code>id</code>): <code>Map</code></p> <p>Removes the layer with the given ID from the map's style.</p> <p>If no such layer exists, an <code>error</code> event is fired.</p> <p><code>Fires</code></p> <p>error</p> <p><code>Example</code></p> <pre><code>// If a layer with ID 'state-data' exists, remove it.\nif (map.getLayer('state-data')) map.removeLayer('state-data');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_42","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the layer to remove"},{"location":"API/classes/maplibregl.Map/#returns_80","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_80","title":"Defined in","text":"<p>src/ui/map.ts:2212</p>"},{"location":"API/classes/maplibregl.Map/#removesource","title":"removeSource","text":"<p>\u25b8 removeSource(<code>id</code>): <code>Map</code></p> <p>Removes a source from the map's style.</p> <p><code>Example</code></p> <pre><code>map.removeSource('bathymetry-data');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_43","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to remove."},{"location":"API/classes/maplibregl.Map/#returns_81","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_81","title":"Defined in","text":"<p>src/ui/map.ts:1804</p>"},{"location":"API/classes/maplibregl.Map/#removesprite","title":"removeSprite","text":"<p>\u25b8 removeSprite(<code>id</code>): <code>Map</code></p> <p>Removes the sprite from the map's style.</p> <p><code>Fires</code></p> <p>style</p> <p><code>Example</code></p> <pre><code>map.removeSprite('sprite-two');\n</code></pre> <p><code>Example</code></p> <pre><code>map.removeSprite('default');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_44","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the sprite to remove. If the sprite is declared as a single URL, the ID must be \"default\"."},{"location":"API/classes/maplibregl.Map/#returns_82","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_82","title":"Defined in","text":"<p>src/ui/map.ts:2420</p>"},{"location":"API/classes/maplibregl.Map/#resetnorth","title":"resetNorth","text":"<p>\u25b8 resetNorth(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Rotates the map so that north is up (0\u00b0 bearing), with an animated transition.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p>"},{"location":"API/classes/maplibregl.Map/#parameters_45","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_83","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_18","title":"Inherited from","text":"<p>Camera.resetNorth</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_83","title":"Defined in","text":"<p>src/ui/camera.ts:462</p>"},{"location":"API/classes/maplibregl.Map/#resetnorthpitch","title":"resetNorthPitch","text":"<p>\u25b8 resetNorthPitch(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Rotates and pitches the map so that north is up (0\u00b0 bearing) and pitch is 0\u00b0, with an animated transition.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p>"},{"location":"API/classes/maplibregl.Map/#parameters_46","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_84","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_19","title":"Inherited from","text":"<p>Camera.resetNorthPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_84","title":"Defined in","text":"<p>src/ui/camera.ts:477</p>"},{"location":"API/classes/maplibregl.Map/#resize","title":"resize","text":"<p>\u25b8 resize(<code>eventData?</code>): <code>Map</code></p> <p>Resizes the map according to the dimensions of its <code>container</code> element.</p> <p>Checks if the map container size changed and updates the map if it has changed. This method must be called after the map's <code>container</code> is resized programmatically or when the map is shown after being initially hidden with CSS.</p> <p><code>Example</code></p> <pre><code>// Resize the map when the map container is shown\n// after being initially hidden with CSS.\nvar mapDiv = document.getElementById('map');\nif (mapDiv.style.visibility === true) map.resize();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_47","title":"Parameters","text":"Name Type Description <code>eventData?</code> <code>any</code> Additional properties to be passed to <code>movestart</code>, <code>move</code>, <code>resize</code>, and <code>moveend</code> events that get triggered as a result of resize. This can be useful for differentiating the source of an event (for example, user-initiated or programmatically-triggered events)."},{"location":"API/classes/maplibregl.Map/#returns_85","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_85","title":"Defined in","text":"<p>src/ui/map.ts:674</p>"},{"location":"API/classes/maplibregl.Map/#rotateto","title":"rotateTo","text":"<p>\u25b8 rotateTo(<code>bearing</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Rotates the map to the specified bearing, with an animated transition. The bearing is the compass direction that is \\\"up\\\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p>"},{"location":"API/classes/maplibregl.Map/#parameters_48","title":"Parameters","text":"Name Type Description <code>bearing</code> <code>number</code> The desired bearing. <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_86","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_20","title":"Inherited from","text":"<p>Camera.rotateTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_86","title":"Defined in","text":"<p>src/ui/camera.ts:446</p>"},{"location":"API/classes/maplibregl.Map/#setbearing","title":"setBearing","text":"<p>\u25b8 setBearing(<code>bearing</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's bearing (rotation). The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p>Equivalent to <code>jumpTo({bearing: bearing})</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Example</code></p> <pre><code>// rotate the map to 90 degrees\nmap.setBearing(90);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_49","title":"Parameters","text":"Name Type Description <code>bearing</code> <code>number</code> The desired bearing. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_87","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_21","title":"Inherited from","text":"<p>Camera.setBearing</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_87","title":"Defined in","text":"<p>src/ui/camera.ts:401</p>"},{"location":"API/classes/maplibregl.Map/#setcenter","title":"setCenter","text":"<p>\u25b8 setCenter(<code>center</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's geographical centerpoint. Equivalent to <code>jumpTo({center: center})</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Example</code></p> <pre><code>map.setCenter([-74, 38]);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_50","title":"Parameters","text":"Name Type Description <code>center</code> <code>LngLatLike</code> The centerpoint to set. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_88","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_22","title":"Inherited from","text":"<p>Camera.setCenter</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_88","title":"Defined in","text":"<p>src/ui/camera.ts:226</p>"},{"location":"API/classes/maplibregl.Map/#setcooperativegestures","title":"setCooperativeGestures","text":"<p>\u25b8 setCooperativeGestures(<code>gestureOptions?</code>): <code>Map</code></p> <p>Sets or clears the map's cooperativeGestures option</p>"},{"location":"API/classes/maplibregl.Map/#parameters_51","title":"Parameters","text":"Name Type Description <code>gestureOptions?</code> <code>boolean</code> | <code>GestureOptions</code> If <code>true</code> or set to an options object, map is only accessible on desktop while holding Command/Ctrl and only accessible on mobile with two fingers. Interacting with the map using normal gestures will trigger an informational screen. With this option enabled, \"drag to pitch\" requires a three-finger gesture."},{"location":"API/classes/maplibregl.Map/#returns_89","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_89","title":"Defined in","text":"<p>src/ui/map.ts:961</p>"},{"location":"API/classes/maplibregl.Map/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Map</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_52","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Map/#returns_90","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_23","title":"Inherited from","text":"<p>Camera.setEventedParent</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_90","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.Map/#setfeaturestate","title":"setFeatureState","text":"<p>\u25b8 setFeatureState(<code>feature</code>, <code>state</code>): <code>Map</code></p> <p>Sets the <code>state</code> of a feature. A feature's <code>state</code> is a set of user-defined key-value pairs that are assigned to a feature at runtime. When using this method, the <code>state</code> object is merged with any existing key-value pairs in the feature's state. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p>This method can only be used with sources that have a <code>feature.id</code> attribute. The <code>feature.id</code> attribute can be defined in three ways: - For vector or GeoJSON sources, including an <code>id</code> attribute in the original data file. - For vector or GeoJSON sources, using the <code>promoteId</code> option at the time the source is defined. - For GeoJSON sources, using the <code>generateId</code> option to auto-assign an <code>id</code> based on the feature's index in the source data. If you change feature data using <code>map.getSource('some id').setData(..)</code>, you may need to re-apply state taking into account updated <code>id</code> values.</p> <p>Note: You can use the <code>feature-state</code> expression to access the values in a feature's state object for the purposes of styling.</p> <p><code>Example</code></p> <pre><code>// When the mouse moves over the `my-layer` layer, update\n// the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\nif (e.features.length &gt; 0) {\nmap.setFeatureState({\nsource: 'my-source',\nsourceLayer: 'my-source-layer',\nid: e.features[0].id,\n}, {\nhover: true\n});\n}\n});\n</code></pre> <p><code>See</code></p> <p>Create a hover effect</p>"},{"location":"API/classes/maplibregl.Map/#parameters_53","title":"Parameters","text":"Name Type Description <code>feature</code> <code>FeatureIdentifier</code> Feature identifier. Feature objects returned from queryRenderedFeatures or event handlers can be used as feature identifiers. <code>state</code> <code>any</code> A set of key-value pairs. The values should be valid JSON types."},{"location":"API/classes/maplibregl.Map/#returns_91","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_91","title":"Defined in","text":"<p>src/ui/map.ts:2518</p>"},{"location":"API/classes/maplibregl.Map/#setfilter","title":"setFilter","text":"<p>\u25b8 setFilter(<code>layerId</code>, <code>filter?</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the filter for the specified style layer.</p> <p>Filters control which features a style layer renders from its source. Any feature for which the filter expression evaluates to <code>true</code> will be rendered on the map. Those that are false will be hidden.</p> <p>Use <code>setFilter</code> to show a subset of your source data.</p> <p>To clear the filter, pass <code>null</code> or <code>undefined</code> as the second parameter.</p> <p><code>Example</code></p> <pre><code>// display only features with the 'name' property 'USA'\nmap.setFilter('my-layer', ['==', ['get', 'name'], 'USA']);\n</code></pre> <p><code>Example</code></p> <pre><code>// display only features with five or more 'available-spots'\nmap.setFilter('bike-docks', ['&gt;=', ['get', 'available-spots'], 5]);\n</code></pre> <p><code>Example</code></p> <pre><code>// remove the filter for the 'bike-docks' style layer\nmap.setFilter('bike-docks', null);\n</code></pre> <p><code>See</code></p> <p>Create a timeline animation</p>"},{"location":"API/classes/maplibregl.Map/#parameters_54","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to which the filter will be applied. <code>filter?</code> <code>FilterSpecification</code> The filter, conforming to the MapLibre Style Specification's filter definition. If <code>null</code> or <code>undefined</code> is provided, the function removes any existing filter from the layer. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_92","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_92","title":"Defined in","text":"<p>src/ui/map.ts:2289</p>"},{"location":"API/classes/maplibregl.Map/#setglyphs","title":"setGlyphs","text":"<p>\u25b8 setGlyphs(<code>glyphsUrl</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of the style's glyphs property.</p> <p><code>Example</code></p> <pre><code>map.setGlyphs('https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_55","title":"Parameters","text":"Name Type Description <code>glyphsUrl</code> <code>string</code> Glyph URL to set. Must conform to the MapLibre Style Specification. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_93","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_93","title":"Defined in","text":"<p>src/ui/map.ts:2373</p>"},{"location":"API/classes/maplibregl.Map/#setlayerzoomrange","title":"setLayerZoomRange","text":"<p>\u25b8 setLayerZoomRange(<code>layerId</code>, <code>minzoom</code>, <code>maxzoom</code>): <code>Map</code></p> <p>Sets the zoom extent for the specified style layer. The zoom extent includes the minimum zoom level and maximum zoom level) at which the layer will be rendered.</p> <p>Note: For style layers using vector sources, style layers cannot be rendered at zoom levels lower than the minimum zoom level of the source layer because the data does not exist at those zoom levels. If the minimum zoom level of the source layer is higher than the minimum zoom level defined in the style layer, the style layer will not be rendered at all zoom levels in the zoom range.</p> <p><code>Example</code></p> <pre><code>map.setLayerZoomRange('my-layer', 2, 5);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_56","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to which the zoom extent will be applied. <code>minzoom</code> <code>number</code> The minimum zoom to set (0-24). <code>maxzoom</code> <code>number</code> The maximum zoom to set (0-24)."},{"location":"API/classes/maplibregl.Map/#returns_94","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_94","title":"Defined in","text":"<p>src/ui/map.ts:2254</p>"},{"location":"API/classes/maplibregl.Map/#setlayoutproperty","title":"setLayoutProperty","text":"<p>\u25b8 setLayoutProperty(<code>layerId</code>, <code>name</code>, <code>value</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of a layout property in the specified style layer.</p> <p><code>Example</code></p> <pre><code>map.setLayoutProperty('my-layer', 'visibility', 'none');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_57","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to set the layout property in. <code>name</code> <code>string</code> The name of the layout property to set. <code>value</code> <code>any</code> The value of the layout property. Must be of a type appropriate for the property, as defined in the MapLibre Style Specification. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_95","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_95","title":"Defined in","text":"<p>src/ui/map.ts:2347</p>"},{"location":"API/classes/maplibregl.Map/#setlight","title":"setLight","text":"<p>\u25b8 setLight(<code>light</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the any combination of light values.</p> <p><code>Example</code></p> <pre><code>var layerVisibility = map.getLayoutProperty('my-layer', 'visibility');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_58","title":"Parameters","text":"Name Type Description <code>light</code> <code>LightSpecification</code> Light properties to set. Must conform to the MapLibre Style Specification. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_96","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_96","title":"Defined in","text":"<p>src/ui/map.ts:2465</p>"},{"location":"API/classes/maplibregl.Map/#setmaxbounds","title":"setMaxBounds","text":"<p>\u25b8 setMaxBounds(<code>bounds?</code>): <code>Map</code></p> <p>Sets or clears the map's geographical bounds.</p> <p>Pan and zoom operations are constrained within these bounds. If a pan or zoom is performed that would display regions outside these bounds, the map will instead display a position and zoom level as close as possible to the operation's request while still remaining within the bounds.</p> <p><code>Example</code></p> <pre><code>// Define bounds that conform to the `LngLatBoundsLike` object.\nvar bounds = [\n[-74.04728, 40.68392], // [west, south]\n[-73.91058, 40.87764]  // [east, north]\n];\n// Set the map's max bounds.\nmap.setMaxBounds(bounds);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_59","title":"Parameters","text":"Name Type Description <code>bounds?</code> <code>LngLatBoundsLike</code> The maximum bounds to set. If <code>null</code> or <code>undefined</code> is provided, the function removes the map's maximum bounds."},{"location":"API/classes/maplibregl.Map/#returns_97","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_97","title":"Defined in","text":"<p>src/ui/map.ts:763</p>"},{"location":"API/classes/maplibregl.Map/#setmaxpitch","title":"setMaxPitch","text":"<p>\u25b8 setMaxPitch(<code>maxPitch?</code>): <code>Map</code></p> <p>Sets or clears the map's maximum pitch. If the map's current pitch is higher than the new maximum, the map will pitch to the new maximum.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_60","title":"Parameters","text":"Name Type Description <code>maxPitch?</code> <code>number</code> The maximum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. If <code>null</code> or <code>undefined</code> is provided, the function removes the current maximum pitch (sets it to 60)."},{"location":"API/classes/maplibregl.Map/#returns_98","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_98","title":"Defined in","text":"<p>src/ui/map.ts:887</p>"},{"location":"API/classes/maplibregl.Map/#setmaxzoom","title":"setMaxZoom","text":"<p>\u25b8 setMaxZoom(<code>maxZoom?</code>): <code>Map</code></p> <p>Sets or clears the map's maximum zoom level. If the map's current zoom level is higher than the new maximum, the map will zoom to the new maximum.</p> <p><code>Example</code></p> <pre><code>map.setMaxZoom(18.75);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_61","title":"Parameters","text":"Name Type Description <code>maxZoom?</code> <code>number</code> The maximum zoom level to set. If <code>null</code> or <code>undefined</code> is provided, the function removes the current maximum zoom (sets it to 22)."},{"location":"API/classes/maplibregl.Map/#returns_99","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_99","title":"Defined in","text":"<p>src/ui/map.ts:819</p>"},{"location":"API/classes/maplibregl.Map/#setminpitch","title":"setMinPitch","text":"<p>\u25b8 setMinPitch(<code>minPitch?</code>): <code>Map</code></p> <p>Sets or clears the map's minimum pitch. If the map's current pitch is lower than the new minimum, the map will pitch to the new minimum.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_62","title":"Parameters","text":"Name Type Description <code>minPitch?</code> <code>number</code> The minimum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. If <code>null</code> or <code>undefined</code> is provided, the function removes the current minimum pitch (i.e. sets it to 0)."},{"location":"API/classes/maplibregl.Map/#returns_100","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_100","title":"Defined in","text":"<p>src/ui/map.ts:852</p>"},{"location":"API/classes/maplibregl.Map/#setminzoom","title":"setMinZoom","text":"<p>\u25b8 setMinZoom(<code>minZoom?</code>): <code>Map</code></p> <p>Sets or clears the map's minimum zoom level. If the map's current zoom level is lower than the new minimum, the map will zoom to the new minimum.</p> <p>It is not always possible to zoom out and reach the set <code>minZoom</code>. Other factors such as map height may restrict zooming. For example, if the map is 512px tall it will not be possible to zoom below zoom 0 no matter what the <code>minZoom</code> is set to.</p> <p><code>Example</code></p> <pre><code>map.setMinZoom(12.25);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_63","title":"Parameters","text":"Name Type Description <code>minZoom?</code> <code>number</code> The minimum zoom level to set (-2 - 24). If <code>null</code> or <code>undefined</code> is provided, the function removes the current minimum zoom (i.e. sets it to -2)."},{"location":"API/classes/maplibregl.Map/#returns_101","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_101","title":"Defined in","text":"<p>src/ui/map.ts:784</p>"},{"location":"API/classes/maplibregl.Map/#setpadding","title":"setPadding","text":"<p>\u25b8 setPadding(<code>padding</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the padding in pixels around the viewport.</p> <p>Equivalent to <code>jumpTo({padding: padding})</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Example</code></p> <pre><code>// Sets a left padding of 300px, and a top padding of 50px\nmap.setPadding({ left: 300, top: 50 });\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_64","title":"Parameters","text":"Name Type Description <code>padding</code> <code>PaddingOptions</code> The desired padding. Format: { left: number, right: number, top: number, bottom: number } <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_102","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_24","title":"Inherited from","text":"<p>Camera.setPadding</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_102","title":"Defined in","text":"<p>src/ui/camera.ts:429</p>"},{"location":"API/classes/maplibregl.Map/#setpaintproperty","title":"setPaintProperty","text":"<p>\u25b8 setPaintProperty(<code>layerId</code>, <code>name</code>, <code>value</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of a paint property in the specified style layer.</p> <p><code>Example</code></p> <pre><code>map.setPaintProperty('my-layer', 'fill-color', '#faafee');\n</code></pre> <p><code>See</code></p> <ul> <li>Change a layer's color with buttons</li> <li>Create a draggable point</li> </ul>"},{"location":"API/classes/maplibregl.Map/#parameters_65","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to set the paint property in. <code>name</code> <code>string</code> The name of the paint property to set. <code>value</code> <code>any</code> The value of the paint property to set. Must be of a type appropriate for the property, as defined in the MapLibre Style Specification. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_103","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_103","title":"Defined in","text":"<p>src/ui/map.ts:2319</p>"},{"location":"API/classes/maplibregl.Map/#setpitch","title":"setPitch","text":"<p>\u25b8 setPitch(<code>pitch</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's pitch (tilt). Equivalent to <code>jumpTo({pitch: pitch})</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>pitchstart</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p>"},{"location":"API/classes/maplibregl.Map/#parameters_66","title":"Parameters","text":"Name Type Description <code>pitch</code> <code>number</code> The pitch to set, measured in degrees away from the plane of the screen (0-60). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_104","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_25","title":"Inherited from","text":"<p>Camera.setPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_104","title":"Defined in","text":"<p>src/ui/camera.ts:523</p>"},{"location":"API/classes/maplibregl.Map/#setpixelratio","title":"setPixelRatio","text":"<p>\u25b8 setPixelRatio(<code>pixelRatio</code>): <code>void</code></p> <p>Sets the map's pixel ratio. This allows to override <code>devicePixelRatio</code>. After this call, the canvas' <code>width</code> attribute will be <code>container.clientWidth * pixelRatio</code> and its height attribute will be <code>container.clientHeight * pixelRatio</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_67","title":"Parameters","text":"Name Type Description <code>pixelRatio</code> <code>number</code> The pixel ratio."},{"location":"API/classes/maplibregl.Map/#returns_105","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_105","title":"Defined in","text":"<p>src/ui/map.ts:712</p>"},{"location":"API/classes/maplibregl.Map/#setrenderworldcopies","title":"setRenderWorldCopies","text":"<p>\u25b8 setRenderWorldCopies(<code>renderWorldCopies?</code>): <code>Map</code></p> <p>Sets the state of <code>renderWorldCopies</code>.</p> <p><code>Example</code></p> <pre><code>map.setRenderWorldCopies(true);\n</code></pre> <p><code>See</code></p> <p>Render world copies</p>"},{"location":"API/classes/maplibregl.Map/#parameters_68","title":"Parameters","text":"Name Type Description <code>renderWorldCopies?</code> <code>boolean</code> If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level. <code>undefined</code> is treated as <code>true</code>, <code>null</code> is treated as <code>false</code>."},{"location":"API/classes/maplibregl.Map/#returns_106","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_106","title":"Defined in","text":"<p>src/ui/map.ts:941</p>"},{"location":"API/classes/maplibregl.Map/#setsprite","title":"setSprite","text":"<p>\u25b8 setSprite(<code>spriteUrl</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of the style's sprite property.</p> <p><code>Example</code></p> <pre><code>map.setSprite('YOUR_SPRITE_URL');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_69","title":"Parameters","text":"Name Type Description <code>spriteUrl</code> <code>string</code> Sprite URL to set. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_107","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_107","title":"Defined in","text":"<p>src/ui/map.ts:2445</p>"},{"location":"API/classes/maplibregl.Map/#setstyle","title":"setStyle","text":"<p>\u25b8 setStyle(<code>style</code>, <code>options?</code>): <code>Map</code></p> <p>Updates the map's MapLibre style object with a new value.</p> <p>If a style is already set when this is used and options.diff is set to true, the map renderer will attempt to compare the given style against the map's current state and perform only the changes necessary to make the map style match the desired state. Changes in sprites (images used for icons and patterns) and glyphs (fonts for label text) cannot be diffed. If the sprites or fonts used in the current style and the given style are different in any way, the map renderer will force a full update, removing the current style and building the given one from scratch.</p> <p><code>Example</code></p> <pre><code>map.setStyle(\"https://demotiles.maplibre.org/style.json\");\nmap.setStyle('https://demotiles.maplibre.org/style.json', {\ntransformStyle: (previousStyle, nextStyle) =&gt; ({\n...nextStyle,\nsources: {\n...nextStyle.sources,\n// copy a source from previous style\n'osm': previousStyle.sources.osm\n},\nlayers: [\n// background layer\nnextStyle.layers[0],\n// copy a layer from previous style\npreviousStyle.layers[0],\n// other layers from the next style\n...nextStyle.layers.slice(1).map(layer =&gt; {\n// hide the layers we don't need from demotiles style\nif (layer.id.startsWith('geolines')) {\nlayer.layout = {...layer.layout || {}, visibility: 'none'};\n// filter out US polygons\n} else if (layer.id.startsWith('coastline') || layer.id.startsWith('countries')) {\nlayer.filter = ['!=', ['get', 'ADM0_A3'], 'USA'];\n}\nreturn layer;\n})\n]\n})\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_70","title":"Parameters","text":"Name Type Description <code>style</code> <code>string</code> | <code>StyleSpecification</code> A JSON object conforming to the schema described in the MapLibre Style Specification, or a URL to such JSON. <code>options?</code> <code>StyleSwapOptions</code> &amp; <code>StyleOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_108","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_108","title":"Defined in","text":"<p>src/ui/map.ts:1509</p>"},{"location":"API/classes/maplibregl.Map/#setterrain","title":"setTerrain","text":"<p>\u25b8 setTerrain(<code>options?</code>): <code>Map</code></p> <p>Loads a 3D terrain mesh, based on a \"raster-dem\" source.</p> <p><code>Example</code></p> <pre><code>map.setTerrain({ source: 'terrain' });\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_71","title":"Parameters","text":"Name Type Description <code>options?</code> <code>TerrainSpecification</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_109","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_109","title":"Defined in","text":"<p>src/ui/map.ts:1710</p>"},{"location":"API/classes/maplibregl.Map/#settransformrequest","title":"setTransformRequest","text":"<p>\u25b8 setTransformRequest(<code>transformRequest</code>): <code>Map</code></p> <p>Updates the requestManager's transform request with a new function</p> <p><code>Example</code></p> <pre><code>map.setTransformRequest((url: string, resourceType: string) =&gt; {});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_72","title":"Parameters","text":"Name Type Description <code>transformRequest</code> <code>RequestTransformFunction</code> A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests. Expected to return an object with a <code>url</code> property and optionally <code>headers</code> and <code>credentials</code> properties"},{"location":"API/classes/maplibregl.Map/#returns_110","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_110","title":"Defined in","text":"<p>src/ui/map.ts:1536</p>"},{"location":"API/classes/maplibregl.Map/#setzoom","title":"setZoom","text":"<p>\u25b8 setZoom(<code>zoom</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's zoom level. Equivalent to <code>jumpTo({zoom: zoom})</code>.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Example</code></p> <pre><code>// Zoom to the zoom level 5 without an animated transition\nmap.setZoom(5);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_73","title":"Parameters","text":"Name Type Description <code>zoom</code> <code>number</code> The zoom level to set (0-20). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_111","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_26","title":"Inherited from","text":"<p>Camera.setZoom</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_111","title":"Defined in","text":"<p>src/ui/camera.ts:297</p>"},{"location":"API/classes/maplibregl.Map/#snaptonorth","title":"snapToNorth","text":"<p>\u25b8 snapToNorth(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Snaps the map so that north is up (0\u00b0 bearing), if the current bearing is close enough to it (i.e. within the <code>bearingSnap</code> threshold).</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>moveend</p>"},{"location":"API/classes/maplibregl.Map/#parameters_74","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_112","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_27","title":"Inherited from","text":"<p>Camera.snapToNorth</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_112","title":"Defined in","text":"<p>src/ui/camera.ts:497</p>"},{"location":"API/classes/maplibregl.Map/#stop","title":"stop","text":"<p>\u25b8 stop(): <code>Map</code></p> <p>Stops any animated transition underway.</p> <p><code>Memberof</code></p> <p>Map#</p>"},{"location":"API/classes/maplibregl.Map/#returns_113","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_28","title":"Inherited from","text":"<p>Camera.stop</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_113","title":"Defined in","text":"<p>src/ui/camera.ts:1337</p>"},{"location":"API/classes/maplibregl.Map/#triggerrepaint","title":"triggerRepaint","text":"<p>\u25b8 triggerRepaint(): <code>void</code></p> <p>Trigger the rendering of a single frame. Use this method with custom layers to repaint the map when the layer changes. Calling this multiple times before the next frame is rendered will still result in only a single frame being rendered.</p> <p><code>Example</code></p> <pre><code>map.triggerRepaint();\n</code></pre> <p><code>See</code></p> <ul> <li>Add a 3D model</li> <li>Add an animated icon to the map</li> </ul>"},{"location":"API/classes/maplibregl.Map/#returns_114","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_114","title":"Defined in","text":"<p>src/ui/map.ts:3035</p>"},{"location":"API/classes/maplibregl.Map/#unproject","title":"unproject","text":"<p>\u25b8 unproject(<code>point</code>): <code>LngLat</code></p> <p>Returns a LngLat representing geographical coordinates that correspond to the specified pixel coordinates.</p> <p><code>Example</code></p> <pre><code>map.on('click', function(e) {\n// When the map is clicked, get the geographic coordinate.\nvar coordinate = map.unproject(e.point);\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_75","title":"Parameters","text":"Name Type Description <code>point</code> <code>PointLike</code> The pixel coordinates to unproject."},{"location":"API/classes/maplibregl.Map/#returns_115","title":"Returns","text":"<p><code>LngLat</code></p> <p>The LngLat corresponding to <code>point</code>.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_115","title":"Defined in","text":"<p>src/ui/map.ts:998</p>"},{"location":"API/classes/maplibregl.Map/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>id</code>, <code>image</code>): <code>Map</code></p> <p>Update an existing image in a style. This image can be displayed on the map like any other icon in the style's sprite using the image's ID with <code>icon-image</code>, <code>background-pattern</code>, <code>fill-pattern</code>, or <code>line-pattern</code>.</p> <p><code>Example</code></p> <pre><code>// If an image with the ID 'cat' already exists in the style's sprite,\n// replace that image with a new image, 'other-cat-icon.png'.\nif (map.hasImage('cat')) map.updateImage('cat', './other-cat-icon.png');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_76","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image. <code>image</code> <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code> | <code>Uint8ClampedArray</code> ; <code>height</code>: <code>number</code> ; <code>width</code>: <code>number</code>  } The image as an <code>HTMLImageElement</code>, <code>ImageData</code>, <code>ImageBitmap</code> or object with <code>width</code>, <code>height</code>, and <code>data</code> properties with the same format as <code>ImageData</code>."},{"location":"API/classes/maplibregl.Map/#returns_116","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_116","title":"Defined in","text":"<p>src/ui/map.ts:1941</p>"},{"location":"API/classes/maplibregl.Map/#zoomin","title":"zoomIn","text":"<p>\u25b8 zoomIn(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Increases the map's zoom level by 1.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Example</code></p> <pre><code>// zoom the map in one level with a custom animation duration\nmap.zoomIn({duration: 1000});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_77","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_117","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_29","title":"Inherited from","text":"<p>Camera.zoomIn</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_117","title":"Defined in","text":"<p>src/ui/camera.ts:348</p>"},{"location":"API/classes/maplibregl.Map/#zoomout","title":"zoomOut","text":"<p>\u25b8 zoomOut(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Decreases the map's zoom level by 1.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Example</code></p> <pre><code>// zoom the map out one level with a custom animation offset\nmap.zoomOut({offset: [80, 60]});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_78","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_118","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_30","title":"Inherited from","text":"<p>Camera.zoomOut</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_118","title":"Defined in","text":"<p>src/ui/camera.ts:370</p>"},{"location":"API/classes/maplibregl.Map/#zoomto","title":"zoomTo","text":"<p>\u25b8 zoomTo(<code>zoom</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Zooms the map to the specified zoom level, with an animated transition.</p> <p><code>Memberof</code></p> <p>Map#</p> <p><code>Fires</code></p> <p>movestart</p> <p><code>Fires</code></p> <p>zoomstart</p> <p><code>Fires</code></p> <p>move</p> <p><code>Fires</code></p> <p>zoom</p> <p><code>Fires</code></p> <p>moveend</p> <p><code>Fires</code></p> <p>zoomend</p> <p><code>Example</code></p> <pre><code>// Zoom to the zoom level 5 without an animated transition\nmap.zoomTo(5);\n// Zoom to the zoom level 8 with an animated transition\nmap.zoomTo(8, {\nduration: 2000,\noffset: [100, 50]\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#parameters_79","title":"Parameters","text":"Name Type Description <code>zoom</code> <code>number</code> The zoom level to transition to. <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_119","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_31","title":"Inherited from","text":"<p>Camera.zoomTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_119","title":"Defined in","text":"<p>src/ui/camera.ts:325</p>"},{"location":"API/classes/maplibregl.Map/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.Map/#_imagequeuehandle","title":"_imageQueueHandle","text":"<p>\u2022 _imageQueueHandle: <code>number</code></p> <p>image queue throttling handle. To be used later when clean up</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_120","title":"Defined in","text":"<p>src/ui/map.ts:364</p>"},{"location":"API/classes/maplibregl.Map/#_requestedcamerastate","title":"_requestedCameraState","text":"<p>\u2022 <code>Optional</code> _requestedCameraState: <code>Transform</code></p> <p>Used to track accumulated changes during continuous interaction</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_32","title":"Inherited from","text":"<p>Camera._requestedCameraState</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_121","title":"Defined in","text":"<p>src/ui/camera.ts:177</p>"},{"location":"API/classes/maplibregl.Map/#boxzoom","title":"boxZoom","text":"<p>\u2022 boxZoom: <code>BoxZoomHandler</code></p> <p>The map's BoxZoomHandler, which implements zooming using a drag gesture with the Shift key pressed. Find more details and examples using <code>boxZoom</code> in the BoxZoomHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_122","title":"Defined in","text":"<p>src/ui/map.ts:376</p>"},{"location":"API/classes/maplibregl.Map/#doubleclickzoom","title":"doubleClickZoom","text":"<p>\u2022 doubleClickZoom: <code>DoubleClickZoomHandler</code></p> <p>The map's DoubleClickZoomHandler, which allows the user to zoom by double clicking. Find more details and examples using <code>doubleClickZoom</code> in the DoubleClickZoomHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_123","title":"Defined in","text":"<p>src/ui/map.ts:401</p>"},{"location":"API/classes/maplibregl.Map/#dragpan","title":"dragPan","text":"<p>\u2022 dragPan: <code>DragPanHandler</code></p> <p>The map's DragPanHandler, which implements dragging the map with a mouse or touch gesture. Find more details and examples using <code>dragPan</code> in the DragPanHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_124","title":"Defined in","text":"<p>src/ui/map.ts:389</p>"},{"location":"API/classes/maplibregl.Map/#dragrotate","title":"dragRotate","text":"<p>\u2022 dragRotate: <code>DragRotateHandler</code></p> <p>The map's DragRotateHandler, which implements rotating the map while dragging with the right mouse button or with the Control key pressed. Find more details and examples using <code>dragRotate</code> in the DragRotateHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_125","title":"Defined in","text":"<p>src/ui/map.ts:383</p>"},{"location":"API/classes/maplibregl.Map/#keyboard","title":"keyboard","text":"<p>\u2022 keyboard: <code>KeyboardHandler</code></p> <p>The map's KeyboardHandler, which allows the user to zoom, rotate, and pan the map using keyboard shortcuts. Find more details and examples using <code>keyboard</code> in the KeyboardHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_126","title":"Defined in","text":"<p>src/ui/map.ts:395</p>"},{"location":"API/classes/maplibregl.Map/#scrollzoom","title":"scrollZoom","text":"<p>\u2022 scrollZoom: <code>ScrollZoomHandler</code></p> <p>The map's ScrollZoomHandler, which implements zooming in and out with a scroll wheel or trackpad. Find more details and examples using <code>scrollZoom</code> in the ScrollZoomHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_127","title":"Defined in","text":"<p>src/ui/map.ts:370</p>"},{"location":"API/classes/maplibregl.Map/#touchpitch","title":"touchPitch","text":"<p>\u2022 touchPitch: <code>TwoFingersTouchPitchHandler</code></p> <p>The map's TwoFingersTouchPitchHandler, which allows the user to pitch the map with touch gestures. Find more details and examples using <code>touchPitch</code> in the TwoFingersTouchPitchHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_128","title":"Defined in","text":"<p>src/ui/map.ts:413</p>"},{"location":"API/classes/maplibregl.Map/#touchzoomrotate","title":"touchZoomRotate","text":"<p>\u2022 touchZoomRotate: <code>TwoFingersTouchZoomRotateHandler</code></p> <p>The map's TwoFingersTouchZoomRotateHandler, which allows the user to zoom or rotate the map with touch gestures. Find more details and examples using <code>touchZoomRotate</code> in the TwoFingersTouchZoomRotateHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_129","title":"Defined in","text":"<p>src/ui/map.ts:407</p>"},{"location":"API/classes/maplibregl.Map/#transformcameraupdate","title":"transformCameraUpdate","text":"<p>\u2022 transformCameraUpdate: <code>CameraUpdateTransformFunction</code></p> <p>A callback used to defer camera updates or apply arbitrary constraints. If specified, this Camera instance can be used as a stateless component in React etc.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_33","title":"Inherited from","text":"<p>Camera.transformCameraUpdate</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_130","title":"Defined in","text":"<p>src/ui/camera.ts:181</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/","title":"Class: MapMouseEvent","text":"<p>maplibregl.MapMouseEvent</p> <p><code>MapMouseEvent</code> is the event type for mouse-related map events.</p> <p><code>Example</code></p> <pre><code>// The `click` event is an example of a `MapMouseEvent`.\n// Set up an event listener on the map.\nmap.on('click', function(e) {\n// The event object (e) contains information like the\n// coordinates of the point on the map that was clicked.\nconsole.log('A click event has occurred at ' + e.lngLat);\n});\n</code></pre>"},{"location":"API/classes/maplibregl.MapMouseEvent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapMouseEvent</code></p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implements","title":"Implements","text":"<ul> <li><code>MapLibreEvent</code>&lt;<code>MouseEvent</code>&gt;</li> </ul>"},{"location":"API/classes/maplibregl.MapMouseEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#defaultprevented","title":"defaultPrevented","text":"<p>\u2022 <code>get</code> defaultPrevented(): <code>boolean</code></p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:119</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new MapMouseEvent(<code>type</code>, <code>map</code>, <code>originalEvent</code>, <code>data?</code>)</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#parameters","title":"Parameters","text":"Name Type <code>type</code> <code>string</code> <code>map</code> <code>Map</code> <code>originalEvent</code> <code>MouseEvent</code> <code>data</code> <code>any</code>"},{"location":"API/classes/maplibregl.MapMouseEvent/#overrides","title":"Overrides","text":"<p>Event.constructor</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_1","title":"Defined in","text":"<p>src/ui/events.ts:128</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#preventdefault","title":"preventDefault","text":"<p>\u25b8 preventDefault(): <code>void</code></p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the following default map behaviors:</p> <ul> <li>On <code>mousedown</code> events, the behavior of DragPanHandler</li> <li>On <code>mousedown</code> events, the behavior of DragRotateHandler</li> <li>On <code>mousedown</code> events, the behavior of BoxZoomHandler</li> <li>On <code>dblclick</code> events, the behavior of DoubleClickZoomHandler</li> </ul>"},{"location":"API/classes/maplibregl.MapMouseEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_2","title":"Defined in","text":"<p>src/ui/events.ts:111</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#lnglat","title":"lngLat","text":"<p>\u2022 lngLat: <code>LngLat</code></p> <p>The geographic location on the map of the mouse cursor.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_3","title":"Defined in","text":"<p>src/ui/events.ts:98</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#originalevent","title":"originalEvent","text":"<p>\u2022 originalEvent: <code>MouseEvent</code></p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implementation-of","title":"Implementation of","text":"<p>MapLibreEvent.originalEvent</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_4","title":"Defined in","text":"<p>src/ui/events.ts:88</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#point","title":"point","text":"<p>\u2022 point: <code>Point</code></p> <p>The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:93</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#target","title":"target","text":"<p>\u2022 target: <code>Map</code></p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implementation-of_1","title":"Implementation of","text":"<p>MapLibreEvent.target</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_6","title":"Defined in","text":"<p>src/ui/events.ts:83</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#type","title":"type","text":"<p>\u2022 type: <code>\"click\"</code> | <code>\"contextmenu\"</code> | <code>\"dblclick\"</code> | <code>\"mousedown\"</code> | <code>\"mouseenter\"</code> | <code>\"mouseleave\"</code> | <code>\"mousemove\"</code> | <code>\"mouseout\"</code> | <code>\"mouseover\"</code> | <code>\"mouseup\"</code></p> <p>The event type (one of Map.event:mousedown, Map.event:mouseup, Map.event:click, Map.event:dblclick, Map.event:mousemove, Map.event:mouseover, Map.event:mouseenter, Map.event:mouseleave, Map.event:mouseout, Map.event:contextmenu).</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implementation-of_2","title":"Implementation of","text":"<p>MapLibreEvent.type</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#overrides_1","title":"Overrides","text":"<p>Event.type</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_7","title":"Defined in","text":"<p>src/ui/events.ts:78</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/","title":"Class: MapTouchEvent","text":"<p>maplibregl.MapTouchEvent</p> <p><code>MapTouchEvent</code> is the event type for touch-related map events.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapTouchEvent</code></p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implements","title":"Implements","text":"<ul> <li><code>MapLibreEvent</code>&lt;<code>TouchEvent</code>&gt;</li> </ul>"},{"location":"API/classes/maplibregl.MapTouchEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#defaultprevented","title":"defaultPrevented","text":"<p>\u2022 <code>get</code> defaultPrevented(): <code>boolean</code></p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:197</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new MapTouchEvent(<code>type</code>, <code>map</code>, <code>originalEvent</code>)</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#parameters","title":"Parameters","text":"Name Type <code>type</code> <code>string</code> <code>map</code> <code>Map</code> <code>originalEvent</code> <code>TouchEvent</code>"},{"location":"API/classes/maplibregl.MapTouchEvent/#overrides","title":"Overrides","text":"<p>Event.constructor</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_1","title":"Defined in","text":"<p>src/ui/events.ts:206</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#preventdefault","title":"preventDefault","text":"<p>\u25b8 preventDefault(): <code>void</code></p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the following default map behaviors:</p> <ul> <li>On <code>touchstart</code> events, the behavior of DragPanHandler</li> <li>On <code>touchstart</code> events, the behavior of TouchZoomRotateHandler</li> </ul>"},{"location":"API/classes/maplibregl.MapTouchEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_2","title":"Defined in","text":"<p>src/ui/events.ts:189</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#lnglat","title":"lngLat","text":"<p>\u2022 lngLat: <code>LngLat</code></p> <p>The geographic location on the map of the center of the touch event points.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_3","title":"Defined in","text":"<p>src/ui/events.ts:160</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#lnglats","title":"lngLats","text":"<p>\u2022 lngLats: <code>LngLat</code>[]</p> <p>The geographical locations on the map corresponding to a touch event's <code>touches</code> property.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_4","title":"Defined in","text":"<p>src/ui/events.ts:178</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#originalevent","title":"originalEvent","text":"<p>\u2022 originalEvent: <code>TouchEvent</code></p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implementation-of","title":"Implementation of","text":"<p>MapLibreEvent.originalEvent</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:155</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#point","title":"point","text":"<p>\u2022 point: <code>Point</code></p> <p>The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left corner.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_6","title":"Defined in","text":"<p>src/ui/events.ts:166</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#points","title":"points","text":"<p>\u2022 points: <code>Point</code>[]</p> <p>The array of pixel coordinates corresponding to a touch event's <code>touches</code> property.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_7","title":"Defined in","text":"<p>src/ui/events.ts:172</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#target","title":"target","text":"<p>\u2022 target: <code>Map</code></p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implementation-of_1","title":"Implementation of","text":"<p>MapLibreEvent.target</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_8","title":"Defined in","text":"<p>src/ui/events.ts:150</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#type","title":"type","text":"<p>\u2022 type: <code>\"touchcancel\"</code> | <code>\"touchend\"</code> | <code>\"touchmove\"</code> | <code>\"touchstart\"</code></p> <p>The event type.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implementation-of_2","title":"Implementation of","text":"<p>MapLibreEvent.type</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#overrides_1","title":"Overrides","text":"<p>Event.type</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_9","title":"Defined in","text":"<p>src/ui/events.ts:145</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/","title":"Class: MapWheelEvent","text":"<p>maplibregl.MapWheelEvent</p> <p><code>MapWheelEvent</code> is the event type for the <code>wheel</code> map event.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapWheelEvent</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#defaultprevented","title":"defaultPrevented","text":"<p>\u2022 <code>get</code> defaultPrevented(): <code>boolean</code></p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:252</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new MapWheelEvent(<code>type</code>, <code>map</code>, <code>originalEvent</code>)</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#parameters","title":"Parameters","text":"Name Type <code>type</code> <code>string</code> <code>map</code> <code>Map</code> <code>originalEvent</code> <code>WheelEvent</code>"},{"location":"API/classes/maplibregl.MapWheelEvent/#overrides","title":"Overrides","text":"<p>Event.constructor</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_1","title":"Defined in","text":"<p>src/ui/events.ts:261</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#preventdefault","title":"preventDefault","text":"<p>\u25b8 preventDefault(): <code>void</code></p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the the behavior of ScrollZoomHandler.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_2","title":"Defined in","text":"<p>src/ui/events.ts:244</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#originalevent","title":"originalEvent","text":"<p>\u2022 originalEvent: <code>WheelEvent</code></p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_3","title":"Defined in","text":"<p>src/ui/events.ts:237</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#target","title":"target","text":"<p>\u2022 target: <code>Map</code></p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_4","title":"Defined in","text":"<p>src/ui/events.ts:232</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#type","title":"type","text":"<p>\u2022 type: <code>\"wheel\"</code></p> <p>The event type.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#overrides_1","title":"Overrides","text":"<p>Event.type</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:227</p>"},{"location":"API/classes/maplibregl.Marker/","title":"Class: Marker","text":"<p>maplibregl.Marker</p> <p>Creates a marker component</p> <p><code>Param</code></p> <p><code>Param</code></p> <p>DOM element to use as a marker. The default is a light blue, droplet-shaped SVG marker.</p> <p><code>Param</code></p> <p>A string indicating the part of the Marker that should be positioned closest to the coordinate set via setLngLat. Options are <code>'center'</code>, <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code>, <code>'right'</code>, <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>.</p> <p><code>Param</code></p> <p>The offset in pixels as a PointLike object to apply relative to the element's center. Negatives indicate left and up.</p> <p><code>Param</code></p> <p>The color to use for the default marker if options.element is not provided. The default is light blue.</p> <p><code>Param</code></p> <p>The scale to use for the default marker if options.element is not provided. The default scale corresponds to a height of <code>41px</code> and a width of <code>27px</code>.</p> <p><code>Param</code></p> <p>A boolean indicating whether or not a marker is able to be dragged to a new position on the map.</p> <p><code>Param</code></p> <p>The max number of pixels a user can shift the mouse pointer during a click on the marker for it to be considered a valid click (as opposed to a marker drag). The default is to inherit map's clickTolerance.</p> <p><code>Param</code></p> <p>The rotation angle of the marker in degrees, relative to its respective <code>rotationAlignment</code> setting. A positive value will rotate the marker clockwise.</p> <p><code>Param</code></p> <p><code>map</code> aligns the <code>Marker</code> to the plane of the map. <code>viewport</code> aligns the <code>Marker</code> to the plane of the viewport. <code>auto</code> automatically matches the value of <code>rotationAlignment</code>.</p> <p><code>Param</code></p> <p><code>map</code> aligns the <code>Marker</code>'s rotation relative to the map, maintaining a bearing as the map rotates. <code>viewport</code> aligns the <code>Marker</code>'s rotation relative to the viewport, agnostic to map rotations. <code>auto</code> is equivalent to <code>viewport</code>.</p> <p><code>Example</code></p> <pre><code>var marker = new maplibregl.Marker()\n.setLngLat([30.5, 50.5])\n.addTo(map);\n</code></pre> <p><code>Example</code></p> <pre><code>// Set options\nvar marker = new maplibregl.Marker({\ncolor: \"#FFFFFF\",\ndraggable: true\n}).setLngLat([30.5, 50.5])\n.addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Add custom icons with Markers</li> <li>Create a draggable Marker</li> </ul>"},{"location":"API/classes/maplibregl.Marker/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>Marker</code></p>"},{"location":"API/classes/maplibregl.Marker/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Marker/#addto","title":"addTo","text":"<p>\u25b8 addTo(<code>map</code>): <code>Marker</code></p> <p>Attaches the <code>Marker</code> to a <code>Map</code> object.</p> <p><code>Example</code></p> <pre><code>var marker = new maplibregl.Marker()\n.setLngLat([30.5, 50.5])\n.addTo(map); // add the marker to the map\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The MapLibre GL JS map to add the marker to."},{"location":"API/classes/maplibregl.Marker/#returns","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in","title":"Defined in","text":"<p>src/ui/marker.ts:234</p>"},{"location":"API/classes/maplibregl.Marker/#getelement","title":"getElement","text":"<p>\u25b8 getElement(): <code>HTMLElement</code></p> <p>Returns the <code>Marker</code>'s HTML element.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_1","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>element</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_1","title":"Defined in","text":"<p>src/ui/marker.ts:323</p>"},{"location":"API/classes/maplibregl.Marker/#getlnglat","title":"getLngLat","text":"<p>\u25b8 getLngLat(): <code>LngLat</code></p> <p>Get the marker's geographical location.</p> <p>The longitude of the result may differ by a multiple of 360 degrees from the longitude previously set by <code>setLngLat</code> because <code>Marker</code> wraps the anchor longitude across copies of the world to keep the marker on screen.</p> <p><code>Example</code></p> <pre><code>// Store the marker's longitude and latitude coordinates in a variable\nvar lngLat = marker.getLngLat();\n// Print the marker's longitude and latitude values in the console\nconsole.log('Longitude: ' + lngLat.lng + ', Latitude: ' + lngLat.lat )\n</code></pre> <p><code>See</code></p> <p>Create a draggable Marker</p>"},{"location":"API/classes/maplibregl.Marker/#returns_2","title":"Returns","text":"<p><code>LngLat</code></p> <p>A LngLat describing the marker's location.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_2","title":"Defined in","text":"<p>src/ui/marker.ts:295</p>"},{"location":"API/classes/maplibregl.Marker/#getoffset","title":"getOffset","text":"<p>\u25b8 getOffset(): <code>Point</code></p> <p>Get the marker's offset.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_3","title":"Returns","text":"<p><code>Point</code></p> <p>The marker's screen coordinates in pixels.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_3","title":"Defined in","text":"<p>src/ui/marker.ts:481</p>"},{"location":"API/classes/maplibregl.Marker/#getpitchalignment","title":"getPitchAlignment","text":"<p>\u25b8 getPitchAlignment(): <code>string</code></p> <p>Returns the current <code>pitchAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_4","title":"Returns","text":"<p><code>string</code></p> <p>The current pitch alignment of the marker in degrees.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_4","title":"Defined in","text":"<p>src/ui/marker.ts:671</p>"},{"location":"API/classes/maplibregl.Marker/#getpopup","title":"getPopup","text":"<p>\u25b8 getPopup(): <code>Popup</code></p> <p>Returns the Popup instance that is bound to the Marker.</p> <p><code>Example</code></p> <pre><code>var marker = new maplibregl.Marker()\n.setLngLat([0, 0])\n.setPopup(new maplibregl.Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"))\n.addTo(map);\nconsole.log(marker.getPopup()); // return the popup instance\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#returns_5","title":"Returns","text":"<p><code>Popup</code></p> <p>popup</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_5","title":"Defined in","text":"<p>src/ui/marker.ts:411</p>"},{"location":"API/classes/maplibregl.Marker/#getrotation","title":"getRotation","text":"<p>\u25b8 getRotation(): <code>number</code></p> <p>Returns the current rotation angle of the marker (in degrees).</p>"},{"location":"API/classes/maplibregl.Marker/#returns_6","title":"Returns","text":"<p><code>number</code></p> <p>The current rotation angle of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_6","title":"Defined in","text":"<p>src/ui/marker.ts:633</p>"},{"location":"API/classes/maplibregl.Marker/#getrotationalignment","title":"getRotationAlignment","text":"<p>\u25b8 getRotationAlignment(): <code>string</code></p> <p>Returns the current <code>rotationAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_7","title":"Returns","text":"<p><code>string</code></p> <p>The current rotational alignment of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_7","title":"Defined in","text":"<p>src/ui/marker.ts:652</p>"},{"location":"API/classes/maplibregl.Marker/#isdraggable","title":"isDraggable","text":"<p>\u25b8 isDraggable(): <code>boolean</code></p> <p>Returns true if the marker can be dragged</p>"},{"location":"API/classes/maplibregl.Marker/#returns_8","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the marker is draggable.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_8","title":"Defined in","text":"<p>src/ui/marker.ts:614</p>"},{"location":"API/classes/maplibregl.Marker/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Marker/#returns_9","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_9","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.Marker/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Marker</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Marker/#returns_10","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.Marker/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Marker</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Marker/#returns_11","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_11","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.Marker/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Marker</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Marker/#returns_12","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Marker</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_12","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.Marker/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>Marker</code></p> <p>Removes the marker from a map</p> <p><code>Example</code></p> <pre><code>var marker = new maplibregl.Marker().addTo(map);\nmarker.remove();\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#returns_13","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_13","title":"Defined in","text":"<p>src/ui/marker.ts:258</p>"},{"location":"API/classes/maplibregl.Marker/#setdraggable","title":"setDraggable","text":"<p>\u25b8 setDraggable(<code>shouldBeDraggable?</code>): <code>Marker</code></p> <p>Sets the <code>draggable</code> property and functionality of the marker</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_5","title":"Parameters","text":"Name Type Description <code>shouldBeDraggable?</code> <code>boolean</code> Turns drag functionality on/off"},{"location":"API/classes/maplibregl.Marker/#returns_14","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_14","title":"Defined in","text":"<p>src/ui/marker.ts:592</p>"},{"location":"API/classes/maplibregl.Marker/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Marker</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_6","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Marker/#returns_15","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_15","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.Marker/#setlnglat","title":"setLngLat","text":"<p>\u25b8 setLngLat(<code>lnglat</code>): <code>Marker</code></p> <p>Set the marker's geographical position and move it.</p> <p><code>Example</code></p> <pre><code>// Create a new marker, set the longitude and latitude, and add it to the map\nnew maplibregl.Marker()\n.setLngLat([-65.017, -16.457])\n.addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Add custom icons with Markers</li> <li>Create a draggable Marker</li> </ul>"},{"location":"API/classes/maplibregl.Marker/#parameters_7","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> A LngLat describing where the marker should be located."},{"location":"API/classes/maplibregl.Marker/#returns_16","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_16","title":"Defined in","text":"<p>src/ui/marker.ts:311</p>"},{"location":"API/classes/maplibregl.Marker/#setoffset","title":"setOffset","text":"<p>\u25b8 setOffset(<code>offset</code>): <code>Marker</code></p> <p>Sets the offset of the marker</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_8","title":"Parameters","text":"Name Type Description <code>offset</code> <code>PointLike</code> The offset in pixels as a PointLike object to apply relative to the element's center. Negatives indicate left and up."},{"location":"API/classes/maplibregl.Marker/#returns_17","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_17","title":"Defined in","text":"<p>src/ui/marker.ts:490</p>"},{"location":"API/classes/maplibregl.Marker/#setpitchalignment","title":"setPitchAlignment","text":"<p>\u25b8 setPitchAlignment(<code>alignment?</code>): <code>Marker</code></p> <p>Sets the <code>pitchAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_9","title":"Parameters","text":"Name Type Description <code>alignment?</code> <code>string</code> Sets the <code>pitchAlignment</code> property of the marker. If alignment is 'auto', it will automatically match <code>rotationAlignment</code>."},{"location":"API/classes/maplibregl.Marker/#returns_18","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_18","title":"Defined in","text":"<p>src/ui/marker.ts:661</p>"},{"location":"API/classes/maplibregl.Marker/#setpopup","title":"setPopup","text":"<p>\u25b8 setPopup(<code>popup?</code>): <code>Marker</code></p> <p>Binds a Popup to the Marker.</p> <p><code>Example</code></p> <pre><code>var marker = new maplibregl.Marker()\n.setLngLat([0, 0])\n.setPopup(new maplibregl.Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")) // add popup\n.addTo(map);\n</code></pre> <p><code>See</code></p> <p>Attach a popup to a marker instance</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_10","title":"Parameters","text":"Name Type Description <code>popup?</code> <code>Popup</code> An instance of the Popup class. If undefined or null, any popup set on this Marker instance is unset."},{"location":"API/classes/maplibregl.Marker/#returns_19","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_19","title":"Defined in","text":"<p>src/ui/marker.ts:339</p>"},{"location":"API/classes/maplibregl.Marker/#setrotation","title":"setRotation","text":"<p>\u25b8 setRotation(<code>rotation?</code>): <code>Marker</code></p> <p>Sets the <code>rotation</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_11","title":"Parameters","text":"Name Type Description <code>rotation?</code> <code>number</code> The rotation angle of the marker (clockwise, in degrees), relative to its respective setRotationAlignment setting."},{"location":"API/classes/maplibregl.Marker/#returns_20","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_20","title":"Defined in","text":"<p>src/ui/marker.ts:623</p>"},{"location":"API/classes/maplibregl.Marker/#setrotationalignment","title":"setRotationAlignment","text":"<p>\u25b8 setRotationAlignment(<code>alignment?</code>): <code>Marker</code></p> <p>Sets the <code>rotationAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_12","title":"Parameters","text":"Name Type Description <code>alignment?</code> <code>string</code> Sets the <code>rotationAlignment</code> property of the marker."},{"location":"API/classes/maplibregl.Marker/#returns_21","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_21","title":"Defined in","text":"<p>src/ui/marker.ts:642</p>"},{"location":"API/classes/maplibregl.Marker/#togglepopup","title":"togglePopup","text":"<p>\u25b8 togglePopup(): <code>Marker</code></p> <p>Opens or closes the Popup instance that is bound to the Marker, depending on the current state of the Popup.</p> <p><code>Example</code></p> <pre><code>var marker = new maplibregl.Marker()\n.setLngLat([0, 0])\n.setPopup(new maplibregl.Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"))\n.addTo(map);\nmarker.togglePopup(); // toggle popup open or closed\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#returns_22","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_22","title":"Defined in","text":"<p>src/ui/marker.ts:426</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/","title":"Class: MercatorCoordinate","text":"<p>maplibregl.MercatorCoordinate</p> <p>A <code>MercatorCoordinate</code> object represents a projected three dimensional position.</p> <p><code>MercatorCoordinate</code> uses the web mercator projection (EPSG:3857) with slightly different units: - the size of 1 unit is the width of the projected world instead of the \"mercator meter\" - the origin of the coordinate space is at the north-west corner instead of the middle</p> <p>For example, <code>MercatorCoordinate(0, 0, 0)</code> is the north-west corner of the mercator world and <code>MercatorCoordinate(1, 1, 0)</code> is the south-east corner. If you are familiar with vector tiles it may be helpful to think of the coordinate space as the <code>0/0/0</code> tile with an extent of <code>1</code>.</p> <p>The <code>z</code> dimension of <code>MercatorCoordinate</code> is conformal. A cube in the mercator coordinate space would be rendered as a cube.</p> <p><code>Param</code></p> <p>The x component of the position.</p> <p><code>Param</code></p> <p>The y component of the position.</p> <p><code>Param</code></p> <p>The z component of the position.</p> <p><code>Example</code></p> <pre><code>var nullIsland = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);\n</code></pre> <p><code>See</code></p> <p>Add a custom style layer</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implements","title":"Implements","text":"<ul> <li><code>IMercatorCoordinate</code></li> </ul>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MercatorCoordinate/#meterinmercatorcoordinateunits","title":"meterInMercatorCoordinateUnits","text":"<p>\u25b8 meterInMercatorCoordinateUnits(): <code>number</code></p> <p>Returns the distance of 1 meter in <code>MercatorCoordinate</code> units at this latitude.</p> <p>For coordinates in real world units using meters, this naturally provides the scale to transform into <code>MercatorCoordinate</code>s.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns","title":"Returns","text":"<p><code>number</code></p> <p>Distance of 1 meter in <code>MercatorCoordinate</code> units.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implementation-of","title":"Implementation of","text":"<p>IMercatorCoordinate.meterInMercatorCoordinateUnits</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:142</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#toaltitude","title":"toAltitude","text":"<p>\u25b8 toAltitude(): <code>number</code></p> <p>Returns the altitude in meters of the coordinate.</p> <p><code>Example</code></p> <pre><code>var coord = new maplibregl.MercatorCoordinate(0, 0, 0.02);\ncoord.toAltitude(); // 6914.281956295339\n</code></pre>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_1","title":"Returns","text":"<p><code>number</code></p> <p>The altitude in meters.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implementation-of_1","title":"Implementation of","text":"<p>IMercatorCoordinate.toAltitude</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_1","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:130</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#tolnglat","title":"toLngLat","text":"<p>\u25b8 toLngLat(): <code>LngLat</code></p> <p>Returns the <code>LngLat</code> for the coordinate.</p> <p><code>Example</code></p> <pre><code>var coord = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);\nvar lngLat = coord.toLngLat(); // LngLat(0, 0)\n</code></pre>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_2","title":"Returns","text":"<p><code>LngLat</code></p> <p>The <code>LngLat</code> object.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implementation-of_2","title":"Implementation of","text":"<p>IMercatorCoordinate.toLngLat</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_2","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:116</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#fromlnglat","title":"fromLngLat","text":"<p>\u25b8 <code>Static</code> fromLngLat(<code>lngLatLike</code>, <code>altitude?</code>): <code>MercatorCoordinate</code></p> <p>Project a <code>LngLat</code> to a <code>MercatorCoordinate</code>.</p> <p><code>Example</code></p> <pre><code>var coord = maplibregl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\ncoord; // MercatorCoordinate(0.5, 0.5, 0)\n</code></pre>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#parameters","title":"Parameters","text":"Name Type Default value Description <code>lngLatLike</code> <code>LngLatLike</code> <code>undefined</code> The location to project. <code>altitude</code> <code>number</code> <code>0</code> The altitude in meters of the position."},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_3","title":"Returns","text":"<p><code>MercatorCoordinate</code></p> <p>The projected mercator coordinate.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_3","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:99</p>"},{"location":"API/classes/maplibregl.NavigationControl/","title":"Class: NavigationControl","text":"<p>maplibregl.NavigationControl</p> <p>A <code>NavigationControl</code> control contains zoom buttons and a compass.</p> <p><code>Implements</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>If <code>true</code> the compass button is included.</p> <p><code>Param</code></p> <p>If <code>true</code> the zoom-in and zoom-out buttons are included.</p> <p><code>Param</code></p> <p>If <code>true</code> the pitch is visualized by rotating X-axis of compass.</p> <p><code>Example</code></p> <pre><code>var nav = new maplibregl.NavigationControl();\nmap.addControl(nav, 'top-left');\n</code></pre> <p><code>See</code></p> <ul> <li>Display map navigation controls</li> <li>Add a third party vector tile source</li> </ul>"},{"location":"API/classes/maplibregl.NavigationControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.Painter/","title":"Class: Painter","text":"<p>maplibregl.Painter</p> <p>Initialize a new painter object.</p> <p><code>Param</code></p> <p>a webgl drawing context</p>"},{"location":"API/classes/maplibregl.Painter/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Painter/#ispatternmissing","title":"isPatternMissing","text":"<p>\u25b8 <code>Private</code> isPatternMissing(<code>image?</code>): <code>boolean</code></p> <p>Checks whether a pattern image is needed, and if it is, whether it is not loaded.</p>"},{"location":"API/classes/maplibregl.Painter/#parameters","title":"Parameters","text":"Name Type <code>image?</code> <code>CrossFaded</code>&lt;<code>ResolvedImage</code>&gt;"},{"location":"API/classes/maplibregl.Painter/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p>true if a needed image is missing and rendering needs to be skipped.</p>"},{"location":"API/classes/maplibregl.Painter/#defined-in","title":"Defined in","text":"<p>src/render/painter.ts:565</p>"},{"location":"API/classes/maplibregl.Painter/#translateposmatrix","title":"translatePosMatrix","text":"<p>\u25b8 <code>Private</code> translatePosMatrix(<code>matrix</code>, <code>tile</code>, <code>translate</code>, <code>translateAnchor</code>, <code>inViewportPixelUnitsUnits?</code>): <code>mat4</code></p> <p>Transform a matrix to incorporate the -translate and -translate-anchor properties into it.</p>"},{"location":"API/classes/maplibregl.Painter/#parameters_1","title":"Parameters","text":"Name Type Description <code>matrix</code> <code>mat4</code> - <code>tile</code> <code>Tile</code> - <code>translate</code> [<code>number</code>, <code>number</code>] - <code>translateAnchor</code> <code>\"map\"</code> | <code>\"viewport\"</code> - <code>inViewportPixelUnitsUnits?</code> <code>boolean</code> True when the units accepted by the matrix are in viewport pixels instead of tile units."},{"location":"API/classes/maplibregl.Painter/#returns_1","title":"Returns","text":"<p><code>mat4</code></p> <p>matrix</p>"},{"location":"API/classes/maplibregl.Painter/#defined-in_1","title":"Defined in","text":"<p>src/render/painter.ts:518</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/","title":"Class: PlacedSymbolArray","text":"<p>maplibregl.PlacedSymbolArray</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48</code></li> </ul> <p>\u21b3 <code>PlacedSymbolArray</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.PlacedSymbolArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#inherited-from","title":"Inherited from","text":"<p>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48._trim</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#inherited-from_1","title":"Inherited from","text":"<p>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48.clear</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#get","title":"get","text":"<p>\u25b8 <code>Private</code> get(<code>index</code>): <code>PlacedSymbolStruct</code></p> <p>Return the PlacedSymbolStruct at the given location in the array.</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#parameters","title":"Parameters","text":"Name Type Description <code>index</code> <code>number</code> The index of the element."},{"location":"API/classes/maplibregl.PlacedSymbolArray/#returns_2","title":"Returns","text":"<p><code>PlacedSymbolStruct</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#defined-in_2","title":"Defined in","text":"<p>src/data/array_types.g.ts:922</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.PlacedSymbolArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#inherited-from_2","title":"Inherited from","text":"<p>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48.reserve</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#parameters_2","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.PlacedSymbolArray/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#inherited-from_3","title":"Inherited from","text":"<p>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48.resize</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#parameters_3","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#returns_5","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#inherited-from_4","title":"Inherited from","text":"<p>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48.serialize</p>"},{"location":"API/classes/maplibregl.PlacedSymbolArray/#defined-in_5","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.Popup/","title":"Class: Popup","text":"<p>maplibregl.Popup</p> <p>A popup component.</p> <p><code>Param</code></p> <p><code>Param</code></p> <p>If <code>true</code>, a close button will appear in the top right corner of the popup.</p> <p><code>Param</code></p> <p>If <code>true</code>, the popup will closed when the map is clicked.</p> <p><code>Param</code></p> <p>If <code>true</code>, the popup will closed when the map moves.</p> <p><code>Param</code></p> <p>If <code>true</code>, the popup will try to focus the first focusable element inside the popup.</p> <p><code>Param</code></p> <p>A string indicating the part of the Popup that should be positioned closest to the coordinate set via setLngLat. Options are <code>'center'</code>, <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code>, <code>'right'</code>, <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>. If unset the anchor will be dynamically set to ensure the popup falls within the map container with a preference for <code>'bottom'</code>.</p> <p><code>Param</code></p> <p>A pixel offset applied to the popup's location specified as: - a single number specifying a distance from the popup's location - a PointLike specifying a constant offset - an object of Points specifying an offset for each anchor position Negative offsets indicate left and up.</p> <p><code>Param</code></p> <p>Space-separated CSS class names to add to popup container</p> <p><code>Param</code></p> <p>A string that sets the CSS property of the popup's maximum width, eg <code>'300px'</code>. To ensure the popup resizes to fit its content, set this property to <code>'none'</code>. Available values can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/max-width</p> <p><code>Example</code></p> <pre><code>var markerHeight = 50, markerRadius = 10, linearOffset = 25;\nvar popupOffsets = {\n'top': [0, 0],\n'top-left': [0,0],\n'top-right': [0,0],\n'bottom': [0, -markerHeight],\n'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n'left': [markerRadius, (markerHeight - markerRadius) * -1],\n'right': [-markerRadius, (markerHeight - markerRadius) * -1]\n};\nvar popup = new maplibregl.Popup({offset: popupOffsets, className: 'my-class'})\n.setLngLat(e.lngLat)\n.setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n.setMaxWidth(\"300px\")\n.addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Attach a popup to a marker instance</li> </ul>"},{"location":"API/classes/maplibregl.Popup/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>Popup</code></p>"},{"location":"API/classes/maplibregl.Popup/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Popup/#addclassname","title":"addClassName","text":"<p>\u25b8 addClassName(<code>className</code>): <code>void</code></p> <p>Adds a CSS class to the popup container element.</p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\npopup.addClassName('some-class')\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#parameters","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add to popup container"},{"location":"API/classes/maplibregl.Popup/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in","title":"Defined in","text":"<p>src/ui/popup.ts:441</p>"},{"location":"API/classes/maplibregl.Popup/#addto","title":"addTo","text":"<p>\u25b8 addTo(<code>map</code>): <code>Popup</code></p> <p>Adds the popup to a map.</p> <p><code>Example</code></p> <pre><code>new maplibregl.Popup()\n.setLngLat([0, 0])\n.setHTML(\"&lt;h1&gt;Null Island&lt;/h1&gt;\")\n.addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Show polygon information on click</li> </ul>"},{"location":"API/classes/maplibregl.Popup/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The MapLibre GL JS map to add the popup to."},{"location":"API/classes/maplibregl.Popup/#returns_1","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_1","title":"Defined in","text":"<p>src/ui/popup.ts:130</p>"},{"location":"API/classes/maplibregl.Popup/#getelement","title":"getElement","text":"<p>\u25b8 getElement(): <code>HTMLElement</code></p> <p>Returns the <code>Popup</code>'s HTML element.</p> <p><code>Example</code></p> <pre><code>// Change the `Popup` element's font size\nvar popup = new maplibregl.Popup()\n.setLngLat([-96, 37.8])\n.setHTML(\"&lt;p&gt;Hello World!&lt;/p&gt;\")\n.addTo(map);\nvar popupElem = popup.getElement();\npopupElem.style.fontSize = \"25px\";\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#returns_2","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>element</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_2","title":"Defined in","text":"<p>src/ui/popup.ts:320</p>"},{"location":"API/classes/maplibregl.Popup/#getlnglat","title":"getLngLat","text":"<p>\u25b8 getLngLat(): <code>LngLat</code></p> <p>Returns the geographical location of the popup's anchor.</p> <p>The longitude of the result may differ by a multiple of 360 degrees from the longitude previously set by <code>setLngLat</code> because <code>Popup</code> wraps the anchor longitude across copies of the world to keep the popup on screen.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_3","title":"Returns","text":"<p><code>LngLat</code></p> <p>The geographical location of the popup's anchor.</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_3","title":"Defined in","text":"<p>src/ui/popup.ts:250</p>"},{"location":"API/classes/maplibregl.Popup/#getmaxwidth","title":"getMaxWidth","text":"<p>\u25b8 getMaxWidth(): <code>string</code></p> <p>Returns the popup's maximum width.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_4","title":"Returns","text":"<p><code>string</code></p> <p>The maximum width of the popup.</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_4","title":"Defined in","text":"<p>src/ui/popup.ts:381</p>"},{"location":"API/classes/maplibregl.Popup/#isopen","title":"isOpen","text":"<p>\u25b8 isOpen(): <code>boolean</code></p>"},{"location":"API/classes/maplibregl.Popup/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the popup is open, <code>false</code> if it is closed.</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_5","title":"Defined in","text":"<p>src/ui/popup.ts:184</p>"},{"location":"API/classes/maplibregl.Popup/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Popup/#returns_6","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.Popup/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Popup</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Popup/#returns_7","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_7","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.Popup/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Popup</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Popup/#returns_8","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_8","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.Popup/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Popup</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Popup/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Popup</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_9","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.Popup/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>this</code></p> <p>Removes the popup from the map it has been added to.</p> <p><code>Example</code></p> <pre><code>var popup = new maplibregl.Popup().addTo(map);\npopup.remove();\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#returns_10","title":"Returns","text":"<p><code>this</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_10","title":"Defined in","text":"<p>src/ui/popup.ts:196</p>"},{"location":"API/classes/maplibregl.Popup/#removeclassname","title":"removeClassName","text":"<p>\u25b8 removeClassName(<code>className</code>): <code>void</code></p> <p>Removes a CSS class from the popup container element.</p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\npopup.removeClassName('some-class')\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#parameters_6","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to remove from popup container"},{"location":"API/classes/maplibregl.Popup/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_11","title":"Defined in","text":"<p>src/ui/popup.ts:456</p>"},{"location":"API/classes/maplibregl.Popup/#setdomcontent","title":"setDOMContent","text":"<p>\u25b8 setDOMContent(<code>htmlNode</code>): <code>Popup</code></p> <p>Sets the popup's content to the element provided as a DOM node.</p> <p><code>Example</code></p> <pre><code>// create an element with the popup content\nvar div = document.createElement('div');\ndiv.innerHTML = 'Hello, world!';\nvar popup = new maplibregl.Popup()\n.setLngLat(e.lngLat)\n.setDOMContent(div)\n.addTo(map);\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#parameters_7","title":"Parameters","text":"Name Type Description <code>htmlNode</code> <code>Node</code> A DOM node to be used as content for the popup."},{"location":"API/classes/maplibregl.Popup/#returns_12","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_12","title":"Defined in","text":"<p>src/ui/popup.ts:412</p>"},{"location":"API/classes/maplibregl.Popup/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Popup</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_8","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Popup/#returns_13","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_13","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.Popup/#sethtml","title":"setHTML","text":"<p>\u25b8 setHTML(<code>html</code>): <code>Popup</code></p> <p>Sets the popup's content to the HTML provided as a string.</p> <p>This method does not perform HTML filtering or sanitization, and must be used only with trusted content. Consider setText if the content is an untrusted text string.</p> <p><code>Example</code></p> <pre><code>var popup = new maplibregl.Popup()\n.setLngLat(e.lngLat)\n.setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n.addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Attach a popup to a marker instance</li> </ul>"},{"location":"API/classes/maplibregl.Popup/#parameters_9","title":"Parameters","text":"Name Type Description <code>html</code> <code>string</code> A string representing HTML content for the popup."},{"location":"API/classes/maplibregl.Popup/#returns_14","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_14","title":"Defined in","text":"<p>src/ui/popup.ts:362</p>"},{"location":"API/classes/maplibregl.Popup/#setlnglat","title":"setLngLat","text":"<p>\u25b8 setLngLat(<code>lnglat</code>): <code>Popup</code></p> <p>Sets the geographical location of the popup's anchor, and moves the popup to it. Replaces trackPointer() behavior.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_10","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> The geographical location to set as the popup's anchor."},{"location":"API/classes/maplibregl.Popup/#returns_15","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_15","title":"Defined in","text":"<p>src/ui/popup.ts:260</p>"},{"location":"API/classes/maplibregl.Popup/#setmaxwidth","title":"setMaxWidth","text":"<p>\u25b8 setMaxWidth(<code>maxWidth</code>): <code>Popup</code></p> <p>Sets the popup's maximum width. This is setting the CSS property <code>max-width</code>. Available values can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/max-width</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_11","title":"Parameters","text":"Name Type Description <code>maxWidth</code> <code>string</code> A string representing the value for the maximum width."},{"location":"API/classes/maplibregl.Popup/#returns_16","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_16","title":"Defined in","text":"<p>src/ui/popup.ts:392</p>"},{"location":"API/classes/maplibregl.Popup/#setoffset","title":"setOffset","text":"<p>\u25b8 setOffset(<code>offset?</code>): <code>Popup</code></p> <p>Sets the popup's offset.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_12","title":"Parameters","text":"Name Type Description <code>offset?</code> <code>Offset</code> Sets the popup's offset."},{"location":"API/classes/maplibregl.Popup/#returns_17","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_17","title":"Defined in","text":"<p>src/ui/popup.ts:468</p>"},{"location":"API/classes/maplibregl.Popup/#settext","title":"setText","text":"<p>\u25b8 setText(<code>text</code>): <code>Popup</code></p> <p>Sets the popup's content to a string of text.</p> <p>This function creates a Text node in the DOM, so it cannot insert raw HTML. Use this method for security against XSS if the popup content is user-provided.</p> <p><code>Example</code></p> <pre><code>var popup = new maplibregl.Popup()\n.setLngLat(e.lngLat)\n.setText('Hello, world!')\n.addTo(map);\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#parameters_13","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> Textual content for the popup."},{"location":"API/classes/maplibregl.Popup/#returns_18","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_18","title":"Defined in","text":"<p>src/ui/popup.ts:339</p>"},{"location":"API/classes/maplibregl.Popup/#toggleclassname","title":"toggleClassName","text":"<p>\u25b8 toggleClassName(<code>className</code>): <code>boolean</code></p> <p>Add or remove the given CSS class on the popup container, depending on whether the container currently has that class.</p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\npopup.toggleClassName('toggleClass')\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#parameters_14","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add/remove"},{"location":"API/classes/maplibregl.Popup/#returns_19","title":"Returns","text":"<p><code>boolean</code></p> <p>if the class was removed return false, if class was added, then return true</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_19","title":"Defined in","text":"<p>src/ui/popup.ts:485</p>"},{"location":"API/classes/maplibregl.Popup/#trackpointer","title":"trackPointer","text":"<p>\u25b8 trackPointer(): <code>Popup</code></p> <p>Tracks the popup anchor to the cursor position on screens with a pointer device (it will be hidden on touchscreens). Replaces the <code>setLngLat</code> behavior. For most use cases, set <code>closeOnClick</code> and <code>closeButton</code> to <code>false</code>.</p> <p><code>Example</code></p> <pre><code>var popup = new maplibregl.Popup({ closeOnClick: false, closeButton: false })\n.setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n.trackPointer()\n.addTo(map);\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#returns_20","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_20","title":"Defined in","text":"<p>src/ui/popup.ts:290</p>"},{"location":"API/classes/maplibregl.PossiblyEvaluated/","title":"Class: PossiblyEvaluated&lt;Props, PossibleEvaluatedProps&gt;","text":"<p>maplibregl.PossiblyEvaluated</p> <p><code>PossiblyEvaluated</code> stores a map of all (property name, <code>R</code>) pairs for paint or layout properties of a given layer type.</p>"},{"location":"API/classes/maplibregl.PossiblyEvaluated/#type-parameters","title":"Type parameters","text":"Name <code>Props</code> <code>PossibleEvaluatedProps</code>"},{"location":"API/classes/maplibregl.PossiblyEvaluatedPropertyValue/","title":"Class: PossiblyEvaluatedPropertyValue&lt;T&gt;","text":"<p>maplibregl.PossiblyEvaluatedPropertyValue</p> <p><code>PossiblyEvaluatedPropertyValue</code> is used for data-driven paint and layout property values. It holds a <code>PossiblyEvaluatedValue</code> and the <code>GlobalProperties</code> that were used to generate it. You're not allowed to supply a different set of <code>GlobalProperties</code> when performing the final evaluation because they would be ignored in the case where the input value was a constant or camera function.</p>"},{"location":"API/classes/maplibregl.PossiblyEvaluatedPropertyValue/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/classes/maplibregl.ProgramConfiguration/","title":"Class: ProgramConfiguration","text":"<p>maplibregl.ProgramConfiguration</p> <p>ProgramConfiguration contains the logic for binding style layer properties and tile layer feature data into GL program uniforms and vertex attributes.</p> <p>Non-data-driven property values are bound to shader uniforms. Data-driven property values are bound to vertex attributes. In order to support a uniform GLSL syntax over both, Mapbox GL Shaders defines a <code>#pragma</code> abstraction, which ProgramConfiguration is responsible for implementing. At runtime, it examines the attributes of a particular layer, combines this with fixed knowledge about how layers of the particular type are implemented, and determines which uniforms and vertex attributes will be required. It can then substitute the appropriate text into the shader source code, create and link a program, and bind the uniforms and vertex attributes in preparation for drawing.</p> <p>When a vector tile is parsed, this same configuration information is used to populate the attribute buffers needed for data-driven styling using the zoom level and feature property data.</p>"},{"location":"API/classes/maplibregl.Properties/","title":"Class: Properties&lt;Props&gt;","text":"<p>maplibregl.Properties</p> <p><code>Properties</code> holds objects containing default values for the layout or paint property set of a given layer type. These objects are immutable, and they are used as the prototypes for the <code>_values</code> members of <code>Transitionable</code>, <code>Transitioning</code>, <code>Layout</code>, and <code>PossiblyEvaluated</code>. This allows these classes to avoid doing work in the common case where a property has no explicit value set and should be considered to take on the default value: using <code>for (const property of Object.keys(this._values))</code>, they can iterate over only the own properties of <code>_values</code>, skipping repeated calculation of transitions and possible/final evaluations for defaults, the result of which will always be the same.</p>"},{"location":"API/classes/maplibregl.Properties/#type-parameters","title":"Type parameters","text":"Name <code>Props</code>"},{"location":"API/classes/maplibregl.PropertyValue/","title":"Class: PropertyValue&lt;T, R&gt;","text":"<p>maplibregl.PropertyValue</p> <p><code>PropertyValue</code> represents the value part of a property key-value unit. It's used to represent both  paint and layout property values, and regardless of whether or not their property supports data-driven  expressions.</p> <p><code>PropertyValue</code> stores the raw input value as seen in a style or a runtime styling API call, i.e. one of the  following:</p> <ul> <li>A constant value of the type appropriate for the property</li> <li>A function which produces a value of that type (but functions are quasi-deprecated in favor of expressions)</li> <li>An expression which produces a value of that type</li> <li>\"undefined\"/\"not present\", in which case the property is assumed to take on its default value.</li> </ul> <p>In addition to storing the original input value, <code>PropertyValue</code> also stores a normalized representation,  effectively treating functions as if they are expressions, and constant or default values as if they are  (constant) expressions.</p>"},{"location":"API/classes/maplibregl.PropertyValue/#type-parameters","title":"Type parameters","text":"Name <code>T</code> <code>R</code>"},{"location":"API/classes/maplibregl.RenderPool/","title":"Class: RenderPool","text":"<p>maplibregl.RenderPool</p> <p>RenderPool a resource pool for textures and framebuffers</p>"},{"location":"API/classes/maplibregl.RenderPool/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.RenderPool/#_recentlyused","title":"_recentlyUsed","text":"<p>\u2022 <code>Private</code> _recentlyUsed: <code>number</code>[]</p>"},{"location":"API/classes/maplibregl.RenderPool/#defined-in","title":"Defined in","text":"<p>src/gl/render_pool.ts:21</p>"},{"location":"API/classes/maplibregl.RenderToTexture/","title":"Class: RenderToTexture","text":"<p>maplibregl.RenderToTexture</p> <p>RenderToTexture</p>"},{"location":"API/classes/maplibregl.RenderToTexture/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.RenderToTexture/#renderlayer","title":"renderLayer","text":"<p>\u25b8 renderLayer(<code>layer</code>): <code>boolean</code></p> <p>due that switching textures is relatively slow, the render layer-by-layer context is not practicable. To bypass this problem this lines of code stack all layers and later render all at once. Because of the stylesheet possibility to mixing render-to-texture layers and 'live'-layers (f.e. symbols) it is necessary to create more stacks. For example a symbol-layer is in between of fill-layers.</p>"},{"location":"API/classes/maplibregl.RenderToTexture/#parameters","title":"Parameters","text":"Name Type Description <code>layer</code> <code>StyleLayer</code> the layer to render"},{"location":"API/classes/maplibregl.RenderToTexture/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p>if true layer is rendered to texture, otherwise false</p>"},{"location":"API/classes/maplibregl.RenderToTexture/#defined-in","title":"Defined in","text":"<p>src/render/render_to_texture.ts:114</p>"},{"location":"API/classes/maplibregl.ScaleControl/","title":"Class: ScaleControl","text":"<p>maplibregl.ScaleControl</p> <p>A <code>ScaleControl</code> control displays the ratio of a distance on the map to the corresponding distance on the ground.</p> <p><code>Implements</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>The maximum length of the scale control in pixels.</p> <p><code>Param</code></p> <p>Unit of the distance (<code>'imperial'</code>, <code>'metric'</code> or <code>'nautical'</code>).</p> <p><code>Example</code></p> <pre><code>var scale = new maplibregl.ScaleControl({\nmaxWidth: 80,\nunit: 'imperial'\n});\nmap.addControl(scale);\nscale.setUnit('metric');\n</code></pre>"},{"location":"API/classes/maplibregl.ScaleControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.ScaleControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.ScaleControl/#setunit","title":"setUnit","text":"<p>\u25b8 setUnit(<code>unit</code>): <code>void</code></p> <p>Set the scale's unit of the distance</p>"},{"location":"API/classes/maplibregl.ScaleControl/#parameters","title":"Parameters","text":"Name Type Description <code>unit</code> <code>Unit</code> Unit of the distance (<code>'imperial'</code>, <code>'metric'</code> or <code>'nautical'</code>)."},{"location":"API/classes/maplibregl.ScaleControl/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScaleControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/scale_control.ts:73</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/","title":"Class: ScrollZoomHandler","text":"<p>maplibregl.ScrollZoomHandler</p> <p>The <code>ScrollZoomHandler</code> allows the user to zoom the map by scrolling.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.ScrollZoomHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new ScrollZoomHandler(<code>map</code>, <code>triggerRenderFrame</code>)</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters","title":"Parameters","text":"Name Type <code>map</code> <code>Map</code> <code>triggerRenderFrame</code> () =&gt; <code>void</code>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:66</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.ScrollZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"scroll to zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.scrollZoom.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:145</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"scroll to zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.scrollZoom.enable();\n</code></pre> <p><code>Example</code></p> <pre><code>map.scrollZoom.enable({ around: 'center' })\n</code></pre>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters_1","title":"Parameters","text":"Name Type Description <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code> Options object."},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:133</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"scroll to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"scroll to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:105</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#setwheelzoomrate","title":"setWheelZoomRate","text":"<p>\u25b8 setWheelZoomRate(<code>wheelZoomRate?</code>): <code>void</code></p> <p>Set the zoom rate of a mouse wheel</p> <p><code>Example</code></p> <pre><code>// Slow down zoom of mouse wheel\nmap.scrollZoom.setWheelZoomRate(1/600);\n</code></pre>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters_2","title":"Parameters","text":"Name Type Description <code>wheelZoomRate?</code> <code>number</code> The rate used to scale mouse wheel movement to a zoom value."},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:96</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#setzoomrate","title":"setZoomRate","text":"<p>\u25b8 setZoomRate(<code>zoomRate?</code>): <code>void</code></p> <p>Set the zoom rate of a trackpad</p> <p><code>Example</code></p> <pre><code>// Speed up trackpad zoom\nmap.scrollZoom.setZoomRate(1/25);\n</code></pre>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters_3","title":"Parameters","text":"Name Type Description <code>zoomRate?</code> <code>number</code> The rate used to scale trackpad movement to a zoom value."},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_5","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:85</p>"},{"location":"API/classes/maplibregl.SourceCache/","title":"Class: SourceCache","text":"<p>maplibregl.SourceCache</p> <p><code>SourceCache</code> is responsible for</p> <ul> <li>creating an instance of <code>Source</code></li> <li>forwarding events from <code>Source</code></li> <li>caching tiles loaded from an instance of <code>Source</code></li> <li>loading the tiles needed to render a given viewport</li> <li>unloading the cached tiles not needed to render a given viewport</li> </ul>"},{"location":"API/classes/maplibregl.SourceCache/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>SourceCache</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.SourceCache/#_addtile","title":"_addTile","text":"<p>\u25b8 <code>Private</code> _addTile(<code>tileID</code>): <code>Tile</code></p> <p>Add a tile, given its coordinate, to the pyramid.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters","title":"Parameters","text":"Name Type <code>tileID</code> <code>OverscaledTileID</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns","title":"Returns","text":"<p><code>Tile</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in","title":"Defined in","text":"<p>src/source/source_cache.ts:806</p>"},{"location":"API/classes/maplibregl.SourceCache/#_backfilldem","title":"_backfillDEM","text":"<p>\u25b8 <code>Private</code> _backfillDEM(<code>tile</code>): <code>void</code></p> <p>For raster terrain source, backfill DEM to eliminate visible tile boundaries</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_1","title":"Parameters","text":"Name Type <code>tile</code> <code>Tile</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_1","title":"Defined in","text":"<p>src/source/source_cache.ts:303</p>"},{"location":"API/classes/maplibregl.SourceCache/#_removetile","title":"_removeTile","text":"<p>\u25b8 <code>Private</code> _removeTile(<code>id</code>): <code>void</code></p> <p>Remove a tile, given its id, from the pyramid</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_2","title":"Parameters","text":"Name Type <code>id</code> <code>string</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_2","title":"Defined in","text":"<p>src/source/source_cache.ts:859</p>"},{"location":"API/classes/maplibregl.SourceCache/#_retainloadedchildren","title":"_retainLoadedChildren","text":"<p>\u25b8 <code>Private</code> _retainLoadedChildren(<code>idealTiles</code>, <code>zoom</code>, <code>maxCoveringZoom</code>, <code>retain</code>): <code>void</code></p> <p>For a given set of tiles, retain children that are loaded and have a zoom between <code>zoom</code> (exclusive) and <code>maxCoveringZoom</code> (inclusive)</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_3","title":"Parameters","text":"Name Type <code>idealTiles</code> <code>Object</code> <code>zoom</code> <code>number</code> <code>maxCoveringZoom</code> <code>number</code> <code>retain</code> <code>Object</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_3","title":"Defined in","text":"<p>src/source/source_cache.ts:361</p>"},{"location":"API/classes/maplibregl.SourceCache/#cleartiles","title":"clearTiles","text":"<p>\u25b8 clearTiles(): <code>void</code></p> <p>Remove all tiles from this pyramid</p>"},{"location":"API/classes/maplibregl.SourceCache/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_4","title":"Defined in","text":"<p>src/source/source_cache.ts:886</p>"},{"location":"API/classes/maplibregl.SourceCache/#findloadedparent","title":"findLoadedParent","text":"<p>\u25b8 <code>Private</code> findLoadedParent(<code>tileID</code>, <code>minCoveringZoom</code>): <code>Tile</code></p> <p>Find a loaded parent of the given tile (up to minCoveringZoom)</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_4","title":"Parameters","text":"Name Type <code>tileID</code> <code>OverscaledTileID</code> <code>minCoveringZoom</code> <code>number</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_5","title":"Returns","text":"<p><code>Tile</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_5","title":"Defined in","text":"<p>src/source/source_cache.ts:411</p>"},{"location":"API/classes/maplibregl.SourceCache/#getfeaturestate","title":"getFeatureState","text":"<p>\u25b8 <code>Private</code> getFeatureState(<code>sourceLayer</code>, <code>featureId</code>): <code>any</code></p> <p>Get the entire state object for a feature</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_5","title":"Parameters","text":"Name Type <code>sourceLayer</code> <code>string</code> <code>featureId</code> <code>string</code> | <code>number</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_6","title":"Returns","text":"<p><code>any</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_6","title":"Defined in","text":"<p>src/source/source_cache.ts:1013</p>"},{"location":"API/classes/maplibregl.SourceCache/#getids","title":"getIds","text":"<p>\u25b8 <code>Private</code> getIds(): <code>string</code>[]</p> <p>Return all tile ids ordered with z-order, and cast to numbers</p>"},{"location":"API/classes/maplibregl.SourceCache/#returns_7","title":"Returns","text":"<p><code>string</code>[]</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_7","title":"Defined in","text":"<p>src/source/source_cache.ts:213</p>"},{"location":"API/classes/maplibregl.SourceCache/#gettile","title":"getTile","text":"<p>\u25b8 <code>Private</code> getTile(<code>tileID</code>): <code>Tile</code></p> <p>Get a specific tile by TileID</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_6","title":"Parameters","text":"Name Type <code>tileID</code> <code>OverscaledTileID</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_8","title":"Returns","text":"<p><code>Tile</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_8","title":"Defined in","text":"<p>src/source/source_cache.ts:344</p>"},{"location":"API/classes/maplibregl.SourceCache/#gettilebyid","title":"getTileByID","text":"<p>\u25b8 <code>Private</code> getTileByID(<code>id</code>): <code>Tile</code></p> <p>Get a specific tile by id</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_7","title":"Parameters","text":"Name Type <code>id</code> <code>string</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_9","title":"Returns","text":"<p><code>Tile</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_9","title":"Defined in","text":"<p>src/source/source_cache.ts:352</p>"},{"location":"API/classes/maplibregl.SourceCache/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.SourceCache/#returns_10","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.SourceCache/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.SourceCache/#loaded","title":"loaded","text":"<p>\u25b8 <code>Private</code> loaded(): <code>boolean</code></p> <p>Return true if no tile data is pending, tiles will not change unless an additional API call is received.</p>"},{"location":"API/classes/maplibregl.SourceCache/#returns_11","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_11","title":"Defined in","text":"<p>src/source/source_cache.ts:143</p>"},{"location":"API/classes/maplibregl.SourceCache/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>SourceCache</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_9","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.SourceCache/#returns_12","title":"Returns","text":"<p><code>SourceCache</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_12","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.SourceCache/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>SourceCache</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_10","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.SourceCache/#returns_13","title":"Returns","text":"<p><code>SourceCache</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_13","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.SourceCache/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>SourceCache</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_11","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.SourceCache/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>SourceCache</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.SourceCache/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_14","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.SourceCache/#reloadtilesfordependencies","title":"reloadTilesForDependencies","text":"<p>\u25b8 <code>Private</code> reloadTilesForDependencies(<code>namespaces</code>, <code>keys</code>): <code>void</code></p> <p>Reloads all tiles that depend on the given keys.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_12","title":"Parameters","text":"Name Type <code>namespaces</code> <code>string</code>[] <code>keys</code> <code>string</code>[]"},{"location":"API/classes/maplibregl.SourceCache/#returns_15","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_15","title":"Defined in","text":"<p>src/source/source_cache.ts:1034</p>"},{"location":"API/classes/maplibregl.SourceCache/#removefeaturestate","title":"removeFeatureState","text":"<p>\u25b8 <code>Private</code> removeFeatureState(<code>sourceLayer?</code>, <code>featureId?</code>, <code>key?</code>): <code>void</code></p> <p>Resets the value of a particular state key for a feature</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_13","title":"Parameters","text":"Name Type <code>sourceLayer?</code> <code>string</code> <code>featureId?</code> <code>string</code> | <code>number</code> <code>key?</code> <code>string</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_16","title":"Defined in","text":"<p>src/source/source_cache.ts:1004</p>"},{"location":"API/classes/maplibregl.SourceCache/#setdependencies","title":"setDependencies","text":"<p>\u25b8 <code>Private</code> setDependencies(<code>tileKey</code>, <code>namespace</code>, <code>dependencies</code>): <code>void</code></p> <p>Sets the set of keys that the tile depends on. This allows tiles to be reloaded when their dependencies change.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_14","title":"Parameters","text":"Name Type <code>tileKey</code> <code>string</code> <code>namespace</code> <code>string</code> <code>dependencies</code> <code>string</code>[]"},{"location":"API/classes/maplibregl.SourceCache/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_17","title":"Defined in","text":"<p>src/source/source_cache.ts:1023</p>"},{"location":"API/classes/maplibregl.SourceCache/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>SourceCache</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_15","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_18","title":"Returns","text":"<p><code>SourceCache</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_18","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.SourceCache/#setfeaturestate","title":"setFeatureState","text":"<p>\u25b8 <code>Private</code> setFeatureState(<code>sourceLayer</code>, <code>featureId</code>, <code>state</code>): <code>void</code></p> <p>Set the value of a particular state for a feature</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_16","title":"Parameters","text":"Name Type <code>sourceLayer</code> <code>string</code> <code>featureId</code> <code>string</code> | <code>number</code> <code>state</code> <code>any</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_19","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_19","title":"Defined in","text":"<p>src/source/source_cache.ts:995</p>"},{"location":"API/classes/maplibregl.SourceCache/#tilesin","title":"tilesIn","text":"<p>\u25b8 <code>Private</code> tilesIn(<code>pointQueryGeometry</code>, <code>maxPitchScaleFactor</code>, <code>has3DLayer</code>): <code>any</code>[]</p> <p>Search through our current tiles and attempt to find the tiles that cover the given bounds.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_17","title":"Parameters","text":"Name Type Description <code>pointQueryGeometry</code> <code>Point</code>[] coordinates of the corners of bounding rectangle <code>maxPitchScaleFactor</code> <code>number</code> - <code>has3DLayer</code> <code>boolean</code> -"},{"location":"API/classes/maplibregl.SourceCache/#returns_20","title":"Returns","text":"<p><code>any</code>[]</p> <p>result items have {tile, minX, maxX, minY, maxY}, where min/max bounding values are the given bounds transformed in into the coordinate space of this tile.</p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_20","title":"Defined in","text":"<p>src/source/source_cache.ts:903</p>"},{"location":"API/classes/maplibregl.SourceCache/#update","title":"update","text":"<p>\u25b8 <code>Private</code> update(<code>transform</code>, <code>terrain?</code>): <code>void</code></p> <p>Removes tiles that are outside the viewport and adds new tiles that are inside the viewport.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_18","title":"Parameters","text":"Name Type <code>transform</code> <code>Transform</code> <code>terrain?</code> <code>Terrain</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_21","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_21","title":"Defined in","text":"<p>src/source/source_cache.ts:509</p>"},{"location":"API/classes/maplibregl.SourceCache/#updatecachesize","title":"updateCacheSize","text":"<p>\u25b8 <code>Private</code> updateCacheSize(<code>transform</code>): <code>void</code></p> <p>Resizes the tile cache based on the current viewport's size or the maxTileCacheSize option passed during map creation</p> <p>Larger viewports use more tiles and need larger caches. Larger viewports are more likely to be found on devices with more memory and on pages where the map is more important.</p>"},{"location":"API/classes/maplibregl.SourceCache/#parameters_19","title":"Parameters","text":"Name Type <code>transform</code> <code>Transform</code>"},{"location":"API/classes/maplibregl.SourceCache/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SourceCache/#defined-in_22","title":"Defined in","text":"<p>src/source/source_cache.ts:448</p>"},{"location":"API/classes/maplibregl.SourceFeatureState/","title":"Class: SourceFeatureState","text":"<p>maplibregl.SourceFeatureState</p> <p>SourceFeatureState manages the state and pending changes to features in a source, separated by source layer. stateChanges and deletedStates batch all changes to the tile (updates and removes, respectively) between coalesce() events. addFeatureState() and removeFeatureState() also update their counterpart's list of changes, such that coalesce() can apply the proper state changes while agnostic to the order of operations. In deletedStates, all null's denote complete removal of state at that scope</p>"},{"location":"API/classes/maplibregl.Struct/","title":"Class: Struct","text":"<p>maplibregl.Struct</p>"},{"location":"API/classes/maplibregl.Struct/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.Struct/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new Struct(<code>structArray</code>, <code>index</code>)</p>"},{"location":"API/classes/maplibregl.Struct/#parameters","title":"Parameters","text":"Name Type Description <code>structArray</code> <code>StructArray</code> The StructArray the struct is stored in <code>index</code> <code>number</code> The index of the struct in the StructArray."},{"location":"API/classes/maplibregl.Struct/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:35</p>"},{"location":"API/classes/maplibregl.StructArray/","title":"Class: StructArray","text":"<p>maplibregl.StructArray</p> <p><code>StructArray</code> provides an abstraction over <code>ArrayBuffer</code> and <code>TypedArray</code> making it behave like an array of typed structs.</p> <p>Conceptually, a StructArray is comprised of elements, i.e., instances of its associated struct type. Each particular struct type, together with an alignment size, determines the memory layout of a StructArray whose elements are of that type.  Thus, for each such layout that we need, we have a corresponding StructArrayLayout class, inheriting from StructArray and implementing <code>emplaceBack()</code> and <code>_refreshViews()</code>.</p> <p>In some cases, where we need to access particular elements of a StructArray, we implement a more specific subclass that inherits from one of the StructArrayLayouts and adds a <code>get(i): T</code> accessor that returns a structured object whose properties are proxies into the underlying memory space for the i-th element.  This affords the convience of working with (seemingly) plain Javascript objects without the overhead of serializing/deserializing them into ArrayBuffers for efficient web worker transfer.</p>"},{"location":"API/classes/maplibregl.StructArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout4i8</code></p> <p>\u21b3 <code>StructArrayLayout6i1ul2ui20</code></p> <p>\u21b3 <code>StructArrayLayout3ui6</code></p> <p>\u21b3 <code>StructArrayLayout2ui4</code></p> <p>\u21b3 <code>StructArrayLayout1ui2</code></p> <p>\u21b3 <code>StructArrayLayout3i6</code></p> <p>\u21b3 <code>StructArrayLayout1f4</code></p> <p>\u21b3 <code>StructArrayLayout8i15ui1ul4f68</code></p> <p>\u21b3 <code>StructArrayLayout1ul2ui8</code></p> <p>\u21b3 <code>StructArrayLayout4i4ui4i24</code></p> <p>\u21b3 <code>StructArrayLayout3f12</code></p> <p>\u21b3 <code>StructArrayLayout1ul4</code></p> <p>\u21b3 <code>StructArrayLayout2ub2f12</code></p> <p>\u21b3 <code>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48</code></p> <p>\u21b3 <code>StructArrayLayout2i4</code></p> <p>\u21b3 <code>StructArrayLayout2i4i12</code></p> <p>\u21b3 <code>StructArrayLayout2i4ub8</code></p> <p>\u21b3 <code>StructArrayLayout2f8</code></p>"},{"location":"API/classes/maplibregl.StructArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArray/#_refreshviews","title":"_refreshViews","text":"<p>\u25b8 _refreshViews(): <code>void</code></p> <p>Create TypedArray views for the current ArrayBuffer.</p>"},{"location":"API/classes/maplibregl.StructArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:183</p>"},{"location":"API/classes/maplibregl.StructArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArray/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArray/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArray/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArray/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArray/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArray/#returns_5","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArray/#defined-in_5","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/","title":"Class: StructArrayLayout1f4","text":"<p>maplibregl.StructArrayLayout1f4</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout1f4</code></p> <p>\u21b3\u21b3 <code>GlyphOffsetArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1f4/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/","title":"Class: StructArrayLayout1ui2","text":"<p>maplibregl.StructArrayLayout1ui2</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout1ui2</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ui2/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/","title":"Class: StructArrayLayout1ul2ui8","text":"<p>maplibregl.StructArrayLayout1ul2ui8</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout1ul2ui8</code></p> <p>\u21b3\u21b3 <code>FeatureIndexArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul2ui8/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/","title":"Class: StructArrayLayout1ul4","text":"<p>maplibregl.StructArrayLayout1ul4</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout1ul4</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout1ul4/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/","title":"Class: StructArrayLayout2f8","text":"<p>maplibregl.StructArrayLayout2f8</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2f8</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2f8/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/","title":"Class: StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48","text":"<p>maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48</code></p> <p>\u21b3\u21b3 <code>PlacedSymbolArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/","title":"Class: StructArrayLayout2i4","text":"<p>maplibregl.StructArrayLayout2i4</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2i4</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/","title":"Class: StructArrayLayout2i4i12","text":"<p>maplibregl.StructArrayLayout2i4i12</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2i4i12</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4i12/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/","title":"Class: StructArrayLayout2i4ub8","text":"<p>maplibregl.StructArrayLayout2i4ub8</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2i4ub8</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2i4ub8/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/","title":"Class: StructArrayLayout2ub2f12","text":"<p>maplibregl.StructArrayLayout2ub2f12</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2ub2f12</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ub2f12/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/","title":"Class: StructArrayLayout2ui4","text":"<p>maplibregl.StructArrayLayout2ui4</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout2ui4</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout2ui4/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/","title":"Class: StructArrayLayout3f12","text":"<p>maplibregl.StructArrayLayout3f12</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout3f12</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3f12/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/","title":"Class: StructArrayLayout3i6","text":"<p>maplibregl.StructArrayLayout3i6</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout3i6</code></p> <p>\u21b3\u21b3 <code>SymbolLineVertexArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3i6/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/","title":"Class: StructArrayLayout3ui6","text":"<p>maplibregl.StructArrayLayout3ui6</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout3ui6</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout3ui6/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/","title":"Class: StructArrayLayout4i4ui4i24","text":"<p>maplibregl.StructArrayLayout4i4ui4i24</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout4i4ui4i24</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i4ui4i24/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/","title":"Class: StructArrayLayout4i8","text":"<p>maplibregl.StructArrayLayout4i8</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout4i8</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout4i8/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/","title":"Class: StructArrayLayout6i1ul2ui20","text":"<p>maplibregl.StructArrayLayout6i1ul2ui20</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout6i1ul2ui20</code></p> <p>\u21b3\u21b3 <code>CollisionBoxArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout6i1ul2ui20/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/","title":"Class: StructArrayLayout8i15ui1ul4f68","text":"<p>maplibregl.StructArrayLayout8i15ui1ul4f68</p> <p>Implementation of the StructArray layout:</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArray</code></li> </ul> <p>\u21b3 <code>StructArrayLayout8i15ui1ul4f68</code></p> <p>\u21b3\u21b3 <code>SymbolInstanceArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#inherited-from","title":"Inherited from","text":"<p>StructArray._trim</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#inherited-from_1","title":"Inherited from","text":"<p>StructArray.clear</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#inherited-from_2","title":"Inherited from","text":"<p>StructArray.reserve</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#inherited-from_3","title":"Inherited from","text":"<p>StructArray.resize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#inherited-from_4","title":"Inherited from","text":"<p>StructArray.serialize</p>"},{"location":"API/classes/maplibregl.StructArrayLayout8i15ui1ul4f68/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.Style/","title":"Class: Style","text":"<p>maplibregl.Style</p>"},{"location":"API/classes/maplibregl.Style/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>Style</code></p>"},{"location":"API/classes/maplibregl.Style/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Style/#_serializebyids","title":"_serializeByIds","text":"<p>\u25b8 <code>Private</code> _serializeByIds(<code>ids?</code>): <code>LayerSpecification</code>[]</p> <p>take an array of string IDs, and based on this._layers, generate an array of LayerSpecification</p>"},{"location":"API/classes/maplibregl.Style/#parameters","title":"Parameters","text":"Name Type Description <code>ids?</code> <code>string</code>[] an array of string IDs, for which serialized layers will be generated. If omitted, all serialized layers will be returned"},{"location":"API/classes/maplibregl.Style/#returns","title":"Returns","text":"<p><code>LayerSpecification</code>[]</p> <p>generated result</p>"},{"location":"API/classes/maplibregl.Style/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:456</p>"},{"location":"API/classes/maplibregl.Style/#_serializedalllayers","title":"_serializedAllLayers","text":"<p>\u25b8 <code>Private</code> _serializedAllLayers(): <code>Object</code></p> <p>Lazy initialization of this._serializedLayers dictionary and return it</p>"},{"location":"API/classes/maplibregl.Style/#returns_1","title":"Returns","text":"<p><code>Object</code></p> <p>this._serializedLayers dictionary</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_1","title":"Defined in","text":"<p>src/style/style.ts:478</p>"},{"location":"API/classes/maplibregl.Style/#addlayer","title":"addLayer","text":"<p>\u25b8 addLayer(<code>layerObject</code>, <code>before?</code>, <code>options?</code>): <code>void</code></p> <p>Add a layer to the map style. The layer will be inserted before the layer with ID <code>before</code>, or appended if <code>before</code> is omitted.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_1","title":"Parameters","text":"Name Type Description <code>layerObject</code> <code>LayerSpecification</code> | <code>CustomLayerInterface</code> The style layer to add. <code>before?</code> <code>string</code> ID of an existing layer to insert before <code>options</code> <code>StyleSetterOptions</code> Style setter options."},{"location":"API/classes/maplibregl.Style/#returns_2","title":"Returns","text":"<p><code>void</code></p> <p>The Map object.</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_2","title":"Defined in","text":"<p>src/style/style.ts:810</p>"},{"location":"API/classes/maplibregl.Style/#addsprite","title":"addSprite","text":"<p>\u25b8 addSprite(<code>id</code>, <code>url</code>, <code>options?</code>, <code>completion?</code>): <code>void</code></p> <p>Add a sprite.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_2","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the desired sprite <code>url</code> <code>string</code> url to load the desired sprite from <code>options?</code> <code>StyleSetterOptions</code> style setter options <code>completion?</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code> completion handler"},{"location":"API/classes/maplibregl.Style/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_3","title":"Defined in","text":"<p>src/style/style.ts:1604</p>"},{"location":"API/classes/maplibregl.Style/#getfilter","title":"getFilter","text":"<p>\u25b8 getFilter(<code>layer</code>): <code>void</code> | <code>FilterSpecification</code></p> <p>Get a layer's filter object</p>"},{"location":"API/classes/maplibregl.Style/#parameters_3","title":"Parameters","text":"Name Type Description <code>layer</code> <code>string</code> the layer to inspect"},{"location":"API/classes/maplibregl.Style/#returns_4","title":"Returns","text":"<p><code>void</code> | <code>FilterSpecification</code></p> <p>the layer's filter, if any</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_4","title":"Defined in","text":"<p>src/style/style.ts:1022</p>"},{"location":"API/classes/maplibregl.Style/#getlayer","title":"getLayer","text":"<p>\u25b8 getLayer(<code>id</code>): <code>StyleLayer</code></p> <p>Return the style layer object with the given <code>id</code>.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_4","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the desired layer"},{"location":"API/classes/maplibregl.Style/#returns_5","title":"Returns","text":"<p><code>StyleLayer</code></p> <p>a layer, if one with the given <code>id</code> exists</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_5","title":"Defined in","text":"<p>src/style/style.ts:956</p>"},{"location":"API/classes/maplibregl.Style/#getlayoutproperty","title":"getLayoutProperty","text":"<p>\u25b8 getLayoutProperty(<code>layerId</code>, <code>name</code>): <code>any</code></p> <p>Get a layout property's value from a given layer</p>"},{"location":"API/classes/maplibregl.Style/#parameters_5","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> the layer to inspect <code>name</code> <code>string</code> the name of the layout property"},{"location":"API/classes/maplibregl.Style/#returns_6","title":"Returns","text":"<p><code>any</code></p> <p>the property value</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_6","title":"Defined in","text":"<p>src/style/style.ts:1047</p>"},{"location":"API/classes/maplibregl.Style/#getsource","title":"getSource","text":"<p>\u25b8 getSource(<code>id</code>): <code>Source</code></p> <p>Get a source by id.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_6","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the desired source"},{"location":"API/classes/maplibregl.Style/#returns_7","title":"Returns","text":"<p><code>Source</code></p> <p>source</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_7","title":"Defined in","text":"<p>src/style/style.ts:798</p>"},{"location":"API/classes/maplibregl.Style/#getsprite","title":"getSprite","text":"<p>\u25b8 getSprite(): { <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>Get the current sprite value.</p>"},{"location":"API/classes/maplibregl.Style/#returns_8","title":"Returns","text":"<p>{ <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>empty array when no sprite is set; id-url pairs otherwise</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_8","title":"Defined in","text":"<p>src/style/style.ts:1657</p>"},{"location":"API/classes/maplibregl.Style/#haslayer","title":"hasLayer","text":"<p>\u25b8 hasLayer(<code>id</code>): <code>boolean</code></p> <p>checks if a specific layer is present within the style.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_7","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the desired layer"},{"location":"API/classes/maplibregl.Style/#returns_9","title":"Returns","text":"<p><code>boolean</code></p> <p>a boolean specifying if the given layer is present</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_9","title":"Defined in","text":"<p>src/style/style.ts:966</p>"},{"location":"API/classes/maplibregl.Style/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Style/#returns_10","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Style/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.Style/#movelayer","title":"moveLayer","text":"<p>\u25b8 moveLayer(<code>id</code>, <code>before?</code>): <code>void</code></p> <p>Moves a layer to a different z-position. The layer will be inserted before the layer with ID <code>before</code>, or appended if <code>before</code> is omitted.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_9","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> ID of the layer to move <code>before?</code> <code>string</code> ID of an existing layer to insert before"},{"location":"API/classes/maplibregl.Style/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_11","title":"Defined in","text":"<p>src/style/style.ts:885</p>"},{"location":"API/classes/maplibregl.Style/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Style</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_10","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Style/#returns_12","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_12","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.Style/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Style</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_11","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Style/#returns_13","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_13","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.Style/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Style</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_12","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Style/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Style</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_14","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.Style/#removelayer","title":"removeLayer","text":"<p>\u25b8 removeLayer(<code>id</code>): <code>void</code></p> <p>Remove the layer with the given id from the style.</p> <p>If no such layer exists, an <code>error</code> event is fired.</p> <p><code>Fires</code></p> <p>error</p>"},{"location":"API/classes/maplibregl.Style/#parameters_13","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the layer to remove"},{"location":"API/classes/maplibregl.Style/#returns_15","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_15","title":"Defined in","text":"<p>src/style/style.ts:920</p>"},{"location":"API/classes/maplibregl.Style/#removesource","title":"removeSource","text":"<p>\u25b8 removeSource(<code>id</code>): <code>Style</code></p> <p>Remove a source from this stylesheet, given its id.</p> <p><code>Throws</code></p> <p>if no source is found with the given ID</p>"},{"location":"API/classes/maplibregl.Style/#parameters_14","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the source to remove"},{"location":"API/classes/maplibregl.Style/#returns_16","title":"Returns","text":"<p><code>Style</code></p> <p>The Map object.</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_16","title":"Defined in","text":"<p>src/style/style.ts:756</p>"},{"location":"API/classes/maplibregl.Style/#removesprite","title":"removeSprite","text":"<p>\u25b8 removeSprite(<code>id</code>): <code>void</code></p> <p>Remove a sprite by its id. When the last sprite is removed, the whole <code>this.stylesheet.sprite</code> object becomes <code>undefined</code>. This falsy <code>undefined</code> value later prevents attempts to load the sprite when it's absent.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_15","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> the id of the sprite to remove"},{"location":"API/classes/maplibregl.Style/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_17","title":"Defined in","text":"<p>src/style/style.ts:1625</p>"},{"location":"API/classes/maplibregl.Style/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Style</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_16","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Style/#returns_18","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_18","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.Style/#setgeojsonsourcedata","title":"setGeoJSONSourceData","text":"<p>\u25b8 setGeoJSONSourceData(<code>id</code>, <code>data</code>): <code>void</code></p> <p>Set the data of a GeoJSON source, given its id.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_17","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the source <code>data</code> <code>string</code> | <code>GeoJSON</code> GeoJSON source"},{"location":"API/classes/maplibregl.Style/#returns_19","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_19","title":"Defined in","text":"<p>src/style/style.ts:782</p>"},{"location":"API/classes/maplibregl.Style/#setsprite","title":"setSprite","text":"<p>\u25b8 setSprite(<code>sprite</code>, <code>options?</code>, <code>completion?</code>): <code>void</code></p> <p>Set a new value for the style's sprite.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_18","title":"Parameters","text":"Name Type Description <code>sprite</code> <code>SpriteSpecification</code> new sprite value <code>options?</code> <code>StyleSetterOptions</code> style setter options <code>completion?</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code> completion handler"},{"location":"API/classes/maplibregl.Style/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_20","title":"Defined in","text":"<p>src/style/style.ts:1668</p>"},{"location":"API/classes/maplibregl.Style/#setstate","title":"setState","text":"<p>\u25b8 <code>Private</code> setState(<code>nextState</code>, <code>options?</code>): <code>boolean</code></p> <p>Update this style's state to match the given style JSON, performing only the necessary mutations.</p> <p>May throw an Error ('Unimplemented: METHOD') if the mapbox-gl-style-spec diff algorithm produces an operation that is not supported.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_19","title":"Parameters","text":"Name Type <code>nextState</code> <code>StyleSpecification</code> <code>options</code> <code>StyleSwapOptions</code>"},{"location":"API/classes/maplibregl.Style/#returns_21","title":"Returns","text":"<p><code>boolean</code></p> <p>true if any changes were made; false otherwise</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_21","title":"Defined in","text":"<p>src/style/style.ts:648</p>"},{"location":"API/classes/maplibregl.Style/#update","title":"update","text":"<p>\u25b8 <code>Private</code> update(<code>parameters</code>): <code>void</code></p> <p>Apply queued style updates in a batch and recalculate zoom-dependent paint properties.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_20","title":"Parameters","text":"Name Type <code>parameters</code> <code>EvaluationParameters</code>"},{"location":"API/classes/maplibregl.Style/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_22","title":"Defined in","text":"<p>src/style/style.ts:526</p>"},{"location":"API/classes/maplibregl.SymbolBucket/","title":"Class: SymbolBucket","text":"<p>maplibregl.SymbolBucket</p> <p>Unlike other buckets, which simply implement #addFeature with type-specific logic for (essentially) triangulating feature geometries, SymbolBucket requires specialized behavior:</p> <ol> <li> <p>WorkerTile#parse(), the logical owner of the bucket creation process,    calls SymbolBucket#populate(), which resolves text and icon tokens on    each feature, adds each glyphs and symbols needed to the passed-in    collections options.glyphDependencies and options.iconDependencies, and    stores the feature data for use in subsequent step (this.features).</p> </li> <li> <p>WorkerTile asynchronously requests from the main thread all of the glyphs    and icons needed (by this bucket and any others). When glyphs and icons    have been received, the WorkerTile creates a CollisionIndex and invokes:</p> </li> <li> <p>performSymbolLayout(bucket, stacks, icons) perform texts shaping and    layout on a Symbol Bucket. This step populates:      <code>this.symbolInstances</code>: metadata on generated symbols      <code>this.collisionBoxArray</code>: collision data for use by foreground      <code>this.text</code>: SymbolBuffers for text symbols      <code>this.icons</code>: SymbolBuffers for icons      <code>this.iconCollisionBox</code>: Debug SymbolBuffers for icon collision boxes      <code>this.textCollisionBox</code>: Debug SymbolBuffers for text collision boxes    The results are sent to the foreground for rendering</p> </li> <li> <p>performSymbolPlacement(bucket, collisionIndex) is run on the foreground,    and uses the CollisionIndex along with current camera settings to determine    which symbols can actually show on the map. Collided symbols are hidden    using a dynamic \"OpacityVertexArray\".</p> </li> </ol>"},{"location":"API/classes/maplibregl.SymbolBucket/#implements","title":"Implements","text":"<ul> <li><code>Bucket</code></li> </ul>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/","title":"Class: SymbolInstanceArray","text":"<p>maplibregl.SymbolInstanceArray</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArrayLayout8i15ui1ul4f68</code></li> </ul> <p>\u21b3 <code>SymbolInstanceArray</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.SymbolInstanceArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#inherited-from","title":"Inherited from","text":"<p>StructArrayLayout8i15ui1ul4f68._trim</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#inherited-from_1","title":"Inherited from","text":"<p>StructArrayLayout8i15ui1ul4f68.clear</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#get","title":"get","text":"<p>\u25b8 <code>Private</code> get(<code>index</code>): <code>SymbolInstanceStruct</code></p> <p>Return the SymbolInstanceStruct at the given location in the array.</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#parameters","title":"Parameters","text":"Name Type Description <code>index</code> <code>number</code> The index of the element."},{"location":"API/classes/maplibregl.SymbolInstanceArray/#returns_2","title":"Returns","text":"<p><code>SymbolInstanceStruct</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#defined-in_2","title":"Defined in","text":"<p>src/data/array_types.g.ts:975</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.SymbolInstanceArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#inherited-from_2","title":"Inherited from","text":"<p>StructArrayLayout8i15ui1ul4f68.reserve</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#parameters_2","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.SymbolInstanceArray/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#inherited-from_3","title":"Inherited from","text":"<p>StructArrayLayout8i15ui1ul4f68.resize</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#parameters_3","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#returns_5","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#inherited-from_4","title":"Inherited from","text":"<p>StructArrayLayout8i15ui1ul4f68.serialize</p>"},{"location":"API/classes/maplibregl.SymbolInstanceArray/#defined-in_5","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/","title":"Class: SymbolLineVertexArray","text":"<p>maplibregl.SymbolLineVertexArray</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StructArrayLayout3i6</code></li> </ul> <p>\u21b3 <code>SymbolLineVertexArray</code></p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#_trim","title":"_trim","text":"<p>\u25b8 _trim(): <code>void</code></p> <p>Resize the array to discard unused capacity.</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#inherited-from","title":"Inherited from","text":"<p>StructArrayLayout3i6._trim</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:138</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>void</code></p> <p>Resets the the length of the array to 0 without de-allocating capcacity.</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#inherited-from_1","title":"Inherited from","text":"<p>StructArrayLayout3i6.clear</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#defined-in_1","title":"Defined in","text":"<p>src/util/struct_array.ts:149</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#reserve","title":"reserve","text":"<p>\u25b8 reserve(<code>n</code>): <code>void</code></p> <p>Indicate a planned increase in size, so that any necessary allocation may be done once, ahead of time.</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#parameters","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The expected size of the array."},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#inherited-from_2","title":"Inherited from","text":"<p>StructArrayLayout3i6.reserve</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#defined-in_2","title":"Defined in","text":"<p>src/util/struct_array.ts:169</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#resize","title":"resize","text":"<p>\u25b8 resize(<code>n</code>): <code>void</code></p> <p>Resize the array. If <code>n</code> is greater than the current length then additional elements with undefined values are added. If <code>n</code> is less than the current length then the array will be reduced to the first <code>n</code> elements.</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#parameters_1","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> The new size of the array."},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#inherited-from_3","title":"Inherited from","text":"<p>StructArrayLayout3i6.resize</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#defined-in_3","title":"Defined in","text":"<p>src/util/struct_array.ts:159</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#serialize","title":"serialize","text":"<p>\u25b8 <code>Static</code> <code>Private</code> serialize(<code>array</code>, <code>transferables?</code>): <code>SerializedStructArray</code></p> <p>Serialize a StructArray instance.  Serializes both the raw data and the metadata needed to reconstruct the StructArray base class during deserialization.</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#parameters_2","title":"Parameters","text":"Name Type <code>array</code> <code>StructArray</code> <code>transferables?</code> <code>Transferable</code>[]"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#returns_4","title":"Returns","text":"<p><code>SerializedStructArray</code></p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#inherited-from_4","title":"Inherited from","text":"<p>StructArrayLayout3i6.serialize</p>"},{"location":"API/classes/maplibregl.SymbolLineVertexArray/#defined-in_4","title":"Defined in","text":"<p>src/util/struct_array.ts:111</p>"},{"location":"API/classes/maplibregl.Terrain/","title":"Class: Terrain","text":"<p>maplibregl.Terrain</p> <p>This is the main class which handles most of the 3D Terrain logic. It has the following topics:    1) loads raster-dem tiles via the internal sourceCache this.sourceCache    2) creates a depth-framebuffer, which is used to calculate the visibility of coordinates    3) creates a coords-framebuffer, which is used the get to tile-coordinate for a screen-pixel    4) stores all render-to-texture tiles in the this.sourceCache._tiles    5) calculates the elevation for a specific tile-coordinate    6) creates a terrain-mesh</p> <p>A note about the GPU resource-usage:    Framebuffers:       - one for the depth &amp; coords framebuffer with the size of the map-div.       - one for rendering a tile to texture with the size of tileSize (= 512x512).    Textures:       - one texture for an empty raster-dem tile with size 1x1       - one texture for an empty depth-buffer, when terrain is disabled with size 1x1       - one texture for an each loaded raster-dem with size of the source.tileSize       - one texture for the coords-framebuffer with the size of the map-div.       - one texture for the depth-framebuffer with the size of the map-div.       - one texture for the encoded tile-coords with the size 2tileSize (=1024x1024)       - finally for each render-to-texture tile (= this._tiles) a set of textures         for each render stack (The stack-concept is documented in painter.ts).         Normally there exists 1-3 Textures per tile, depending on the stylesheet.         Each Textures has the size 2tileSize (= 1024x1024). Also there exists a         cache of the last 150 newest rendered tiles.</p>"},{"location":"API/classes/maplibregl.Terrain/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Terrain/#getcoordstexture","title":"getCoordsTexture","text":"<p>\u25b8 getCoordsTexture(): <code>Texture</code></p> <p>create coords texture, needed to grab coordinates from canvas encode coords coordinate into 4 bytes:   - 8 lower bits for x   - 8 lower bits for y   - 4 higher bits for x   - 4 higher bits for y   - 8 bits for coordsIndex (1 .. 255) (= number of terraintile), is later setted in draw_terrain uniform value</p>"},{"location":"API/classes/maplibregl.Terrain/#returns","title":"Returns","text":"<p><code>Texture</code></p> <ul> <li>the texture</li> </ul>"},{"location":"API/classes/maplibregl.Terrain/#defined-in","title":"Defined in","text":"<p>src/render/terrain.ts:257</p>"},{"location":"API/classes/maplibregl.Terrain/#getdemelevation","title":"getDEMElevation","text":"<p>\u25b8 getDEMElevation(<code>tileID</code>, <code>x</code>, <code>y</code>, <code>extent?</code>): <code>number</code></p> <p>get the elevation-value from original dem-data for a given tile-coordinate</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters","title":"Parameters","text":"Name Type Default value Description <code>tileID</code> <code>OverscaledTileID</code> <code>undefined</code> the tile to get elevation for <code>x</code> <code>number</code> <code>undefined</code> between 0 .. EXTENT <code>y</code> <code>number</code> <code>undefined</code> between 0 .. EXTENT <code>extent</code> <code>number</code> <code>EXTENT</code> optional, default 8192"},{"location":"API/classes/maplibregl.Terrain/#returns_1","title":"Returns","text":"<p><code>number</code></p> <ul> <li>the elevation</li> </ul>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_1","title":"Defined in","text":"<p>src/render/terrain.ts:129</p>"},{"location":"API/classes/maplibregl.Terrain/#getelevation","title":"getElevation","text":"<p>\u25b8 getElevation(<code>tileID</code>, <code>x</code>, <code>y</code>, <code>extent?</code>): <code>number</code></p> <p>get the Elevation for given coordinate in respect of exaggeration.</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters_1","title":"Parameters","text":"Name Type Default value Description <code>tileID</code> <code>OverscaledTileID</code> <code>undefined</code> the tile id <code>x</code> <code>number</code> <code>undefined</code> between 0 .. EXTENT <code>y</code> <code>number</code> <code>undefined</code> between 0 .. EXTENT <code>extent</code> <code>number</code> <code>EXTENT</code> optional, default 8192"},{"location":"API/classes/maplibregl.Terrain/#returns_2","title":"Returns","text":"<p><code>number</code></p> <ul> <li>the elevation</li> </ul>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_2","title":"Defined in","text":"<p>src/render/terrain.ts:154</p>"},{"location":"API/classes/maplibregl.Terrain/#getframebuffer","title":"getFramebuffer","text":"<p>\u25b8 getFramebuffer(<code>texture</code>): <code>Framebuffer</code></p> <p>get a framebuffer as big as the map-div, which will be used to render depth &amp; coords into a texture</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters_2","title":"Parameters","text":"Name Type Description <code>texture</code> <code>string</code> the texture"},{"location":"API/classes/maplibregl.Terrain/#returns_3","title":"Returns","text":"<p><code>Framebuffer</code></p> <p>the frame buffer</p>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_3","title":"Defined in","text":"<p>src/render/terrain.ts:219</p>"},{"location":"API/classes/maplibregl.Terrain/#getmeshframedelta","title":"getMeshFrameDelta","text":"<p>\u25b8 getMeshFrameDelta(<code>zoom</code>): <code>number</code></p> <p>Calculates a height of the frame around the terrain-mesh to avoid stiching between tile boundaries in different zoomlevels.</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters_3","title":"Parameters","text":"Name Type Description <code>zoom</code> <code>number</code> current zoomlevel"},{"location":"API/classes/maplibregl.Terrain/#returns_4","title":"Returns","text":"<p><code>number</code></p> <p>the elevation delta in meters</p>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_4","title":"Defined in","text":"<p>src/render/terrain.ts:353</p>"},{"location":"API/classes/maplibregl.Terrain/#getminmaxelevation","title":"getMinMaxElevation","text":"<p>\u25b8 getMinMaxElevation(<code>tileID</code>): <code>Object</code></p> <p>Get the minimum and maximum elevation contained in a tile. This includes any exaggeration included in the terrain.</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters_4","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> Id of the tile to be used as a source for the min/max elevation"},{"location":"API/classes/maplibregl.Terrain/#returns_5","title":"Returns","text":"<p><code>Object</code></p> <p>Minimum and maximum elevation found in the tile, including the terrain's exaggeration</p> Name Type <code>maxElevation</code> <code>number</code> <code>minElevation</code> <code>number</code>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_5","title":"Defined in","text":"<p>src/render/terrain.ts:366</p>"},{"location":"API/classes/maplibregl.Terrain/#getterraindata","title":"getTerrainData","text":"<p>\u25b8 getTerrainData(<code>tileID</code>): <code>TerrainData</code></p> <p>returns a Terrain Object for a tile. Unless the tile corresponds to data (e.g. tile is loading), return a flat dem object</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters_5","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the tile to get the terrain for"},{"location":"API/classes/maplibregl.Terrain/#returns_6","title":"Returns","text":"<p><code>TerrainData</code></p> <p>the terrain data to use in the program</p>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_6","title":"Defined in","text":"<p>src/render/terrain.ts:163</p>"},{"location":"API/classes/maplibregl.Terrain/#getterrainmesh","title":"getTerrainMesh","text":"<p>\u25b8 getTerrainMesh(): <code>TerrainMesh</code></p> <p>create a regular mesh which will be used by all terrain-tiles</p>"},{"location":"API/classes/maplibregl.Terrain/#returns_7","title":"Returns","text":"<p><code>TerrainMesh</code></p> <ul> <li>the created regular mesh</li> </ul>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_7","title":"Defined in","text":"<p>src/render/terrain.ts:305</p>"},{"location":"API/classes/maplibregl.Terrain/#pointcoordinate","title":"pointCoordinate","text":"<p>\u25b8 pointCoordinate(<code>p</code>): <code>MercatorCoordinate</code></p> <p>Reads a pixel from the coords-framebuffer and translate this to mercator.</p>"},{"location":"API/classes/maplibregl.Terrain/#parameters_6","title":"Parameters","text":"Name Type Description <code>p</code> <code>Point</code> Screen-Coordinate"},{"location":"API/classes/maplibregl.Terrain/#returns_8","title":"Returns","text":"<p><code>MercatorCoordinate</code></p> <p>mercator coordinate for a screen pixel</p>"},{"location":"API/classes/maplibregl.Terrain/#defined-in_8","title":"Defined in","text":"<p>src/render/terrain.ts:279</p>"},{"location":"API/classes/maplibregl.TerrainControl/","title":"Class: TerrainControl","text":"<p>maplibregl.TerrainControl</p> <p>A <code>TerrainControl</code> control contains a button for turning the terrain on and off.</p> <p><code>Implements</code></p> <p><code>Param</code></p> <p><code>Param</code></p> <p>The ID of the raster-dem source to use.</p> <p><code>Param</code></p> <p><code>Example</code></p> <pre><code>var map = new maplibregl.Map({TerrainControl: false})\n.addControl(new maplibregl.TerrainControl({\nsource: \"terrain\"\n}));\n</code></pre>"},{"location":"API/classes/maplibregl.TerrainControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.TerrainSourceCache/","title":"Class: TerrainSourceCache","text":"<p>maplibregl.TerrainSourceCache</p> <p>This class is a helper for the Terrain-class, it:   - loads raster-dem tiles   - manages all renderToTexture tiles.   - caches previous rendered tiles.   - finds all necessary renderToTexture tiles for a OverscaledTileID area   - finds the corresponding raster-dem tile for OverscaledTileID</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>TerrainSourceCache</code></p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TerrainSourceCache/#freertt","title":"freeRtt","text":"<p>\u25b8 freeRtt(<code>tileID?</code>): <code>void</code></p> <p>Free render to texture cache</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters","title":"Parameters","text":"Name Type Description <code>tileID?</code> <code>OverscaledTileID</code> optional, free only corresponding to tileID."},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:92</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#getrenderabletiles","title":"getRenderableTiles","text":"<p>\u25b8 getRenderableTiles(): <code>Tile</code>[]</p> <p>get a list of tiles, which are loaded and should be rendered in the current scene</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_1","title":"Returns","text":"<p><code>Tile</code>[]</p> <p>the renderable tiles</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_1","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:104</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#getsourcetile","title":"getSourceTile","text":"<p>\u25b8 getSourceTile(<code>tileID</code>, <code>searchForDEM?</code>): <code>Tile</code></p> <p>find the covering raster-dem tile</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_1","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the tile to look for <code>searchForDEM?</code> <code>boolean</code> Optinal parameter to search for (parent) souretiles with loaded dem."},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_2","title":"Returns","text":"<p><code>Tile</code></p> <ul> <li>the tile</li> </ul>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_2","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:163</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#getterraincoords","title":"getTerrainCoords","text":"<p>\u25b8 getTerrainCoords(<code>tileID</code>): <code>Record</code>&lt;<code>string</code>, <code>OverscaledTileID</code>&gt;</p> <p>Searches for the corresponding current renderable terrain-tiles</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_2","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the tile to look for"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_3","title":"Returns","text":"<p><code>Record</code>&lt;<code>string</code>, <code>OverscaledTileID</code>&gt;</p> <ul> <li>the tiles that were found</li> </ul>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_3","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:122</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#gettilebyid","title":"getTileByID","text":"<p>\u25b8 getTileByID(<code>id</code>): <code>Tile</code></p> <p>get terrain tile by the TileID key</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_3","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> the tile id"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_4","title":"Returns","text":"<p><code>Tile</code></p> <ul> <li>the tile</li> </ul>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_4","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:113</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_5","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>TerrainSourceCache</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_6","title":"Returns","text":"<p><code>TerrainSourceCache</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>TerrainSourceCache</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_7","title":"Returns","text":"<p><code>TerrainSourceCache</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_7","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>TerrainSourceCache</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_8","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>TerrainSourceCache</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_8","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>TerrainSourceCache</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_8","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_9","title":"Returns","text":"<p><code>TerrainSourceCache</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_9","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#tilesaftertime","title":"tilesAfterTime","text":"<p>\u25b8 tilesAfterTime(<code>time?</code>): <code>Tile</code>[]</p> <p>get a list of tiles, loaded after a spezific time. This is used to update depth &amp; coords framebuffers.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_9","title":"Parameters","text":"Name Type Description <code>time</code> <code>number</code> the time"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_10","title":"Returns","text":"<p><code>Tile</code>[]</p> <ul> <li>the relevant tiles</li> </ul>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_10","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:184</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#update","title":"update","text":"<p>\u25b8 update(<code>transform</code>, <code>terrain</code>): <code>void</code></p> <p>Load Terrain Tiles, create internal render-to-texture tiles, free GPU memory.</p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#parameters_10","title":"Parameters","text":"Name Type Description <code>transform</code> <code>Transform</code> the operation to do <code>terrain</code> <code>Terrain</code> the terrain"},{"location":"API/classes/maplibregl.TerrainSourceCache/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TerrainSourceCache/#defined-in_11","title":"Defined in","text":"<p>src/source/terrain_source_cache.ts:61</p>"},{"location":"API/classes/maplibregl.ThrottledInvoker/","title":"Class: ThrottledInvoker","text":"<p>maplibregl.ThrottledInvoker</p> <p>Invokes the wrapped function in a non-blocking way when trigger() is called. Invocation requests are ignored until the function was actually invoked.</p>"},{"location":"API/classes/maplibregl.Tile/","title":"Class: Tile","text":"<p>maplibregl.Tile</p> <p>A tile object is the combination of a Coordinate, which defines its place, as well as a unique ID and data tracking for its content</p>"},{"location":"API/classes/maplibregl.Tile/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.Tile/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new Tile(<code>tileID</code>, <code>size</code>)</p>"},{"location":"API/classes/maplibregl.Tile/#parameters","title":"Parameters","text":"Name Type <code>tileID</code> <code>OverscaledTileID</code> <code>size</code> <code>number</code>"},{"location":"API/classes/maplibregl.Tile/#defined-in","title":"Defined in","text":"<p>src/source/tile.ts:103</p>"},{"location":"API/classes/maplibregl.Tile/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Tile/#loadvectordata","title":"loadVectorData","text":"<p>\u25b8 <code>Private</code> loadVectorData(<code>data</code>, <code>painter</code>, <code>justReloaded?</code>): <code>void</code></p> <p>Given a data object with a 'buffers' property, load it into this tile's elementGroups and buffers properties and set loaded to true. If the data is null, like in the case of an empty GeoJSON tile, no-op but still set loaded to true.</p>"},{"location":"API/classes/maplibregl.Tile/#parameters_1","title":"Parameters","text":"Name Type <code>data</code> <code>WorkerTileResult</code> <code>painter</code> <code>any</code> <code>justReloaded?</code> <code>boolean</code>"},{"location":"API/classes/maplibregl.Tile/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Tile/#defined-in_1","title":"Defined in","text":"<p>src/source/tile.ts:156</p>"},{"location":"API/classes/maplibregl.Tile/#unloadvectordata","title":"unloadVectorData","text":"<p>\u25b8 <code>Private</code> unloadVectorData(): <code>void</code></p> <p>Release any data or WebGL resources referenced by this tile.</p>"},{"location":"API/classes/maplibregl.Tile/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Tile/#defined-in_2","title":"Defined in","text":"<p>src/source/tile.ts:231</p>"},{"location":"API/classes/maplibregl.TileCache/","title":"Class: TileCache","text":"<p>maplibregl.TileCache</p> <p>A least-recently-used cache with hash lookup made possible by keeping a list of keys in parallel to an array of dictionary of values</p>"},{"location":"API/classes/maplibregl.TileCache/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.TileCache/#constructor","title":"constructor","text":"<p>\u2022 new TileCache(<code>max</code>, <code>onRemove</code>)</p>"},{"location":"API/classes/maplibregl.TileCache/#parameters","title":"Parameters","text":"Name Type Description <code>max</code> <code>number</code> number of permitted values <code>onRemove</code> (<code>element</code>: <code>Tile</code>) =&gt; <code>void</code> callback called with items when they expire"},{"location":"API/classes/maplibregl.TileCache/#defined-in","title":"Defined in","text":"<p>src/source/tile_cache.ts:25</p>"},{"location":"API/classes/maplibregl.TileCache/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TileCache/#add","title":"add","text":"<p>\u25b8 <code>Private</code> add(<code>tileID</code>, <code>data</code>, <code>expiryTimeout</code>): <code>TileCache</code></p> <p>Add a key, value combination to the cache, trimming its size if this pushes it over max length.</p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_1","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> lookup key for the item <code>data</code> <code>Tile</code> any value <code>expiryTimeout</code> <code>number</code> | <code>void</code> -"},{"location":"API/classes/maplibregl.TileCache/#returns","title":"Returns","text":"<p><code>TileCache</code></p> <p>this cache</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_1","title":"Defined in","text":"<p>src/source/tile_cache.ts:61</p>"},{"location":"API/classes/maplibregl.TileCache/#filter","title":"filter","text":"<p>\u25b8 filter(<code>filterFn</code>): <code>void</code></p> <p>Remove entries that do not pass a filter function. Used for removing stale tiles from the cache.</p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_2","title":"Parameters","text":"Name Type Description <code>filterFn</code> (<code>tile</code>: <code>Tile</code>) =&gt; <code>boolean</code> Determines whether the tile is filtered. If the supplied function returns false, the tile will be filtered out."},{"location":"API/classes/maplibregl.TileCache/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_2","title":"Defined in","text":"<p>src/source/tile_cache.ts:203</p>"},{"location":"API/classes/maplibregl.TileCache/#get","title":"get","text":"<p>\u25b8 <code>Private</code> get(<code>tileID</code>): <code>Tile</code></p> <p>Get the value attached to a specific key without removing data from the cache. If the key is not found, returns <code>null</code></p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_3","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the key to look up"},{"location":"API/classes/maplibregl.TileCache/#returns_2","title":"Returns","text":"<p><code>Tile</code></p> <p>the data, or null if it isn't found</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_3","title":"Defined in","text":"<p>src/source/tile_cache.ts:144</p>"},{"location":"API/classes/maplibregl.TileCache/#getandremove","title":"getAndRemove","text":"<p>\u25b8 <code>Private</code> getAndRemove(<code>tileID</code>): <code>Tile</code></p> <p>Get the value attached to a specific key and remove data from cache. If the key is not found, returns <code>null</code></p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_4","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the key to look up"},{"location":"API/classes/maplibregl.TileCache/#returns_3","title":"Returns","text":"<p><code>Tile</code></p> <p>the data, or null if it isn't found</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_4","title":"Defined in","text":"<p>src/source/tile_cache.ts:108</p>"},{"location":"API/classes/maplibregl.TileCache/#has","title":"has","text":"<p>\u25b8 <code>Private</code> has(<code>tileID</code>): <code>boolean</code></p> <p>Determine whether the value attached to <code>key</code> is present</p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_5","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the key to be looked-up"},{"location":"API/classes/maplibregl.TileCache/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p>whether the cache has this value</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_5","title":"Defined in","text":"<p>src/source/tile_cache.ts:96</p>"},{"location":"API/classes/maplibregl.TileCache/#remove","title":"remove","text":"<p>\u25b8 <code>Private</code> remove(<code>tileID</code>, <code>value?</code>): <code>TileCache</code></p> <p>Remove a key/value combination from the cache.</p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_6","title":"Parameters","text":"Name Type Description <code>tileID</code> <code>OverscaledTileID</code> the key for the pair to delete <code>value?</code> <code>Object</code> If a value is provided, remove that exact version of the value. <code>value.timeout</code> <code>Timeout</code> - <code>value.value</code> <code>Tile</code> -"},{"location":"API/classes/maplibregl.TileCache/#returns_5","title":"Returns","text":"<p><code>TileCache</code></p> <p>this cache</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_6","title":"Defined in","text":"<p>src/source/tile_cache.ts:159</p>"},{"location":"API/classes/maplibregl.TileCache/#reset","title":"reset","text":"<p>\u25b8 <code>Private</code> reset(): <code>TileCache</code></p> <p>Clear the cache</p>"},{"location":"API/classes/maplibregl.TileCache/#returns_6","title":"Returns","text":"<p><code>TileCache</code></p> <p>this cache</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_7","title":"Defined in","text":"<p>src/source/tile_cache.ts:37</p>"},{"location":"API/classes/maplibregl.TileCache/#setmaxsize","title":"setMaxSize","text":"<p>\u25b8 <code>Private</code> setMaxSize(<code>max</code>): <code>TileCache</code></p> <p>Change the max size of the cache.</p>"},{"location":"API/classes/maplibregl.TileCache/#parameters_7","title":"Parameters","text":"Name Type Description <code>max</code> <code>number</code> the max size of the cache"},{"location":"API/classes/maplibregl.TileCache/#returns_7","title":"Returns","text":"<p><code>TileCache</code></p> <p>this cache</p>"},{"location":"API/classes/maplibregl.TileCache/#defined-in_8","title":"Defined in","text":"<p>src/source/tile_cache.ts:186</p>"},{"location":"API/classes/maplibregl.Transform/","title":"Class: Transform","text":"<p>maplibregl.Transform</p> <p>A single transform, generally used for a single tile to be scaled, rotated, and zoomed.</p>"},{"location":"API/classes/maplibregl.Transform/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.Transform/#centerpoint","title":"centerPoint","text":"<p>\u2022 <code>get</code> centerPoint(): <code>Point</code></p> <p>The center of the screen in pixels with the top-left corner being (0,0) and +y axis pointing downwards. This accounts for padding.</p> <p><code>Memberof</code></p> <p>Transform</p>"},{"location":"API/classes/maplibregl.Transform/#returns","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in","title":"Defined in","text":"<p>src/geo/transform.ts:246</p>"},{"location":"API/classes/maplibregl.Transform/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Transform/#calculateposmatrix","title":"calculatePosMatrix","text":"<p>\u25b8 <code>Private</code> calculatePosMatrix(<code>unwrappedTileID</code>, <code>aligned?</code>): <code>mat4</code></p> <p>Calculate the posMatrix that, given a tile coordinate, would be used to display the tile on a map.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters","title":"Parameters","text":"Name Type Default value <code>unwrappedTileID</code> <code>UnwrappedTileID</code> <code>undefined</code> <code>aligned</code> <code>boolean</code> <code>false</code>"},{"location":"API/classes/maplibregl.Transform/#returns_1","title":"Returns","text":"<p><code>mat4</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_1","title":"Defined in","text":"<p>src/geo/transform.ts:722</p>"},{"location":"API/classes/maplibregl.Transform/#coordinatelocation","title":"coordinateLocation","text":"<p>\u25b8 <code>Private</code> coordinateLocation(<code>coord</code>): <code>LngLat</code></p> <p>Given a Coordinate, return its geographical position.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_1","title":"Parameters","text":"Name Type <code>coord</code> <code>MercatorCoordinate</code>"},{"location":"API/classes/maplibregl.Transform/#returns_2","title":"Returns","text":"<p><code>LngLat</code></p> <p>lnglat</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_2","title":"Defined in","text":"<p>src/geo/transform.ts:605</p>"},{"location":"API/classes/maplibregl.Transform/#coordinatepoint","title":"coordinatePoint","text":"<p>\u25b8 <code>Private</code> coordinatePoint(<code>coord</code>, <code>elevation?</code>, <code>pixelMatrix?</code>): <code>Point</code></p> <p>Given a coordinate, return the screen point that corresponds to it</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_2","title":"Parameters","text":"Name Type Default value Description <code>coord</code> <code>MercatorCoordinate</code> <code>undefined</code> <code>elevation</code> <code>number</code> <code>0</code> default = 0 <code>pixelMatrix</code> <code>mat4</code> <code>undefined</code> -"},{"location":"API/classes/maplibregl.Transform/#returns_3","title":"Returns","text":"<p><code>Point</code></p> <p>screen point</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_3","title":"Defined in","text":"<p>src/geo/transform.ts:661</p>"},{"location":"API/classes/maplibregl.Transform/#coveringtiles","title":"coveringTiles","text":"<p>\u25b8 <code>Private</code> coveringTiles(<code>options</code>): <code>OverscaledTileID</code>[]</p> <p>Return all coordinates that could cover this transform for a covering zoom level.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_3","title":"Parameters","text":"Name Type <code>options</code> <code>Object</code> <code>options.maxzoom?</code> <code>number</code> <code>options.minzoom?</code> <code>number</code> <code>options.renderWorldCopies?</code> <code>boolean</code> <code>options.reparseOverscaled?</code> <code>boolean</code> <code>options.roundZoom?</code> <code>boolean</code> <code>options.terrain?</code> <code>Terrain</code> <code>options.tileSize</code> <code>number</code>"},{"location":"API/classes/maplibregl.Transform/#returns_4","title":"Returns","text":"<p><code>OverscaledTileID</code>[]</p> <p>OverscaledTileIDs</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_4","title":"Defined in","text":"<p>src/geo/transform.ts:336</p>"},{"location":"API/classes/maplibregl.Transform/#coveringzoomlevel","title":"coveringZoomLevel","text":"<p>\u25b8 coveringZoomLevel(<code>options</code>): <code>number</code></p> <p>Return a zoom level that will cover all tiles the transform</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_4","title":"Parameters","text":"Name Type Description <code>options</code> <code>Object</code> options <code>options.roundZoom?</code> <code>boolean</code> Target zoom level. If true, the value will be rounded to the closest integer. Otherwise the value will be floored. <code>options.tileSize</code> <code>number</code> Tile size, expressed in screen pixels."},{"location":"API/classes/maplibregl.Transform/#returns_5","title":"Returns","text":"<p><code>number</code></p> <p>zoom level An integer zoom level at which all tiles will be visible.</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_5","title":"Defined in","text":"<p>src/geo/transform.ts:283</p>"},{"location":"API/classes/maplibregl.Transform/#getbounds","title":"getBounds","text":"<p>\u25b8 getBounds(): <code>LngLatBounds</code></p> <p>Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.</p>"},{"location":"API/classes/maplibregl.Transform/#returns_6","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>Returns a LngLatBounds object describing the map's geographical bounds.</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_6","title":"Defined in","text":"<p>src/geo/transform.ts:672</p>"},{"location":"API/classes/maplibregl.Transform/#getcameraposition","title":"getCameraPosition","text":"<p>\u25b8 getCameraPosition(): <code>Object</code></p> <p>get the camera position in LngLat and altitudes in meter</p>"},{"location":"API/classes/maplibregl.Transform/#returns_7","title":"Returns","text":"<p><code>Object</code></p> <p>An object with lngLat &amp; altitude.</p> Name Type <code>altitude</code> <code>number</code> <code>lngLat</code> <code>LngLat</code>"},{"location":"API/classes/maplibregl.Transform/#defined-in_7","title":"Defined in","text":"<p>src/geo/transform.ts:513</p>"},{"location":"API/classes/maplibregl.Transform/#getelevation","title":"getElevation","text":"<p>\u25b8 getElevation(<code>lnglat</code>, <code>terrain</code>): <code>number</code></p> <p>get the elevation from terrain for the current zoomlevel.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_5","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLat</code> the location <code>terrain</code> <code>Terrain</code> the terrain"},{"location":"API/classes/maplibregl.Transform/#returns_8","title":"Returns","text":"<p><code>number</code></p> <p>elevation in meters</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_8","title":"Defined in","text":"<p>src/geo/transform.ts:500</p>"},{"location":"API/classes/maplibregl.Transform/#gethorizon","title":"getHorizon","text":"<p>\u25b8 getHorizon(): <code>number</code></p> <p>Calculate pixel height of the visible horizon in relation to map-center (e.g. height/2), multiplied by a static factor to simulate the earth-radius. The calculated value is the horizontal line from the camera-height to sea-level.</p>"},{"location":"API/classes/maplibregl.Transform/#returns_9","title":"Returns","text":"<p><code>number</code></p> <p>Horizon above center in pixels.</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_9","title":"Defined in","text":"<p>src/geo/transform.ts:698</p>"},{"location":"API/classes/maplibregl.Transform/#getmaxbounds","title":"getMaxBounds","text":"<p>\u25b8 getMaxBounds(): <code>LngLatBounds</code></p> <p>Returns the maximum geographical bounds the map is constrained to, or <code>null</code> if none set.</p>"},{"location":"API/classes/maplibregl.Transform/#returns_10","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>LngLatBounds</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_10","title":"Defined in","text":"<p>src/geo/transform.ts:685</p>"},{"location":"API/classes/maplibregl.Transform/#getvisibleunwrappedcoordinates","title":"getVisibleUnwrappedCoordinates","text":"<p>\u25b8 <code>Private</code> getVisibleUnwrappedCoordinates(<code>tileID</code>): <code>UnwrappedTileID</code>[]</p> <p>Return any \"wrapped\" copies of a given tile coordinate that are visible in the current view.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_6","title":"Parameters","text":"Name Type <code>tileID</code> <code>CanonicalTileID</code>"},{"location":"API/classes/maplibregl.Transform/#returns_11","title":"Returns","text":"<p><code>UnwrappedTileID</code>[]</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_11","title":"Defined in","text":"<p>src/geo/transform.ts:300</p>"},{"location":"API/classes/maplibregl.Transform/#interpolatepadding","title":"interpolatePadding","text":"<p>\u25b8 interpolatePadding(<code>start</code>, <code>target</code>, <code>t</code>): <code>void</code></p> <p>Helper method to update edge-insets in place</p> <p><code>Memberof</code></p> <p>Transform</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_7","title":"Parameters","text":"Name Type Description <code>start</code> <code>PaddingOptions</code> the starting padding <code>target</code> <code>PaddingOptions</code> the target padding <code>t</code> <code>number</code> the step/weight"},{"location":"API/classes/maplibregl.Transform/#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_12","title":"Defined in","text":"<p>src/geo/transform.ts:269</p>"},{"location":"API/classes/maplibregl.Transform/#ispaddingequal","title":"isPaddingEqual","text":"<p>\u25b8 isPaddingEqual(<code>padding</code>): <code>boolean</code></p> <p>Returns if the padding params match</p> <p><code>Memberof</code></p> <p>Transform</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_8","title":"Parameters","text":"Name Type Description <code>padding</code> <code>PaddingOptions</code> the padding to check against"},{"location":"API/classes/maplibregl.Transform/#returns_13","title":"Returns","text":"<p><code>boolean</code></p> <p>true if they are equal, false otherwise</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_13","title":"Defined in","text":"<p>src/geo/transform.ts:257</p>"},{"location":"API/classes/maplibregl.Transform/#locationcoordinate","title":"locationCoordinate","text":"<p>\u25b8 <code>Private</code> locationCoordinate(<code>lnglat</code>): <code>MercatorCoordinate</code></p> <p>Given a geographical lnglat, return an unrounded coordinate that represents it at this transform's zoom level.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_9","title":"Parameters","text":"Name Type <code>lnglat</code> <code>LngLat</code>"},{"location":"API/classes/maplibregl.Transform/#returns_14","title":"Returns","text":"<p><code>MercatorCoordinate</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_14","title":"Defined in","text":"<p>src/geo/transform.ts:595</p>"},{"location":"API/classes/maplibregl.Transform/#locationpoint","title":"locationPoint","text":"<p>\u25b8 <code>Private</code> locationPoint(<code>lnglat</code>, <code>terrain?</code>): <code>Point</code></p> <p>Given a location, return the screen point that corresponds to it</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_10","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLat</code> location <code>terrain?</code> <code>Terrain</code> optional terrain"},{"location":"API/classes/maplibregl.Transform/#returns_15","title":"Returns","text":"<p><code>Point</code></p> <p>screen point</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_15","title":"Defined in","text":"<p>src/geo/transform.ts:571</p>"},{"location":"API/classes/maplibregl.Transform/#pointcoordinate","title":"pointCoordinate","text":"<p>\u25b8 <code>Private</code> pointCoordinate(<code>p</code>, <code>terrain?</code>): <code>MercatorCoordinate</code></p> <p>Given a Point, return its mercator coordinate.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_11","title":"Parameters","text":"Name Type Description <code>p</code> <code>Point</code> the point <code>terrain?</code> <code>Terrain</code> optional terrain"},{"location":"API/classes/maplibregl.Transform/#returns_16","title":"Returns","text":"<p><code>MercatorCoordinate</code></p> <p>lnglat</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_16","title":"Defined in","text":"<p>src/geo/transform.ts:616</p>"},{"location":"API/classes/maplibregl.Transform/#pointlocation","title":"pointLocation","text":"<p>\u25b8 <code>Private</code> pointLocation(<code>p</code>, <code>terrain?</code>): <code>LngLat</code></p> <p>Given a point on screen, return its lnglat</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_12","title":"Parameters","text":"Name Type Description <code>p</code> <code>Point</code> screen point <code>terrain?</code> <code>Terrain</code> optional terrain"},{"location":"API/classes/maplibregl.Transform/#returns_17","title":"Returns","text":"<p><code>LngLat</code></p> <p>lnglat location</p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_17","title":"Defined in","text":"<p>src/geo/transform.ts:584</p>"},{"location":"API/classes/maplibregl.Transform/#recalculatezoom","title":"recalculateZoom","text":"<p>\u25b8 recalculateZoom(<code>terrain</code>): <code>void</code></p> <p>This method works in combination with freezeElevation activated. freezeElevtion is enabled during map-panning because during this the camera should sit in constant height. After panning finished, call this method to recalculate the zoomlevel for the current camera-height in current terrain.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_13","title":"Parameters","text":"Name Type Description <code>terrain</code> <code>Terrain</code> the terrain"},{"location":"API/classes/maplibregl.Transform/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_18","title":"Defined in","text":"<p>src/geo/transform.ts:528</p>"},{"location":"API/classes/maplibregl.Transform/#setmaxbounds","title":"setMaxBounds","text":"<p>\u25b8 setMaxBounds(<code>bounds?</code>): <code>void</code></p> <p>Sets or clears the map's geographical constraints.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_14","title":"Parameters","text":"Name Type Description <code>bounds?</code> <code>LngLatBounds</code> A LngLatBounds object describing the new geographic boundaries of the map."},{"location":"API/classes/maplibregl.Transform/#returns_19","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_19","title":"Defined in","text":"<p>src/geo/transform.ts:706</p>"},{"location":"API/classes/maplibregl.Transform/#updateelevation","title":"updateElevation","text":"<p>\u25b8 updateElevation(<code>terrain?</code>): <code>void</code></p> <p>Updates the center-elevation value unless freezeElevation is activated.</p>"},{"location":"API/classes/maplibregl.Transform/#parameters_15","title":"Parameters","text":"Name Type Description <code>terrain?</code> <code>Terrain</code> the terrain"},{"location":"API/classes/maplibregl.Transform/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Transform/#defined-in_20","title":"Defined in","text":"<p>src/geo/transform.ts:489</p>"},{"location":"API/classes/maplibregl.TransformProvider/","title":"Class: TransformProvider","text":"<p>maplibregl.TransformProvider</p> <p>Shared utilities for the Handler classes to access the correct camera state. If Camera.transformCameraUpdate is specified, the \"desired state\" of camera may differ from the state used for rendering. The handlers need the \"desired state\" to track accumulated changes.</p>"},{"location":"API/classes/maplibregl.Transitionable/","title":"Class: Transitionable&lt;Props&gt;","text":"<p>maplibregl.Transitionable</p> <p><code>Transitionable</code> stores a map of all (property name, <code>TransitionablePropertyValue</code>) pairs for paint properties of a given layer type. It can calculate the <code>TransitioningPropertyValue</code>s for all of them at once, producing a <code>Transitioning</code> instance for the same set of properties.</p>"},{"location":"API/classes/maplibregl.Transitionable/#type-parameters","title":"Type parameters","text":"Name <code>Props</code>"},{"location":"API/classes/maplibregl.TransitionablePropertyValue/","title":"Class: TransitionablePropertyValue&lt;T, R&gt;","text":"<p>maplibregl.TransitionablePropertyValue</p> <p>Paint properties are transitionable: they can change in a fluid manner, interpolating or cross-fading between old and new value. The duration of the transition, and the delay before it begins, is configurable.</p> <p><code>TransitionablePropertyValue</code> is a compositional class that stores both the property value and that transition configuration.</p> <p>A <code>TransitionablePropertyValue</code> can calculate the next step in the evaluation chain for paint property values: <code>TransitioningPropertyValue</code>.</p>"},{"location":"API/classes/maplibregl.TransitionablePropertyValue/#type-parameters","title":"Type parameters","text":"Name <code>T</code> <code>R</code>"},{"location":"API/classes/maplibregl.Transitioning/","title":"Class: Transitioning&lt;Props&gt;","text":"<p>maplibregl.Transitioning</p> <p><code>Transitioning</code> stores a map of all (property name, <code>TransitioningPropertyValue</code>) pairs for paint properties of a given layer type. It can calculate the possibly-evaluated values for all of them at once, producing a <code>PossiblyEvaluated</code> instance for the same set of properties.</p>"},{"location":"API/classes/maplibregl.Transitioning/#type-parameters","title":"Type parameters","text":"Name <code>Props</code>"},{"location":"API/classes/maplibregl.TransitioningPropertyValue/","title":"Class: TransitioningPropertyValue&lt;T, R&gt;","text":"<p>maplibregl.TransitioningPropertyValue</p> <p><code>TransitioningPropertyValue</code> implements the first of two intermediate steps in the evaluation chain of a paint property value. In this step, transitions between old and new values are handled: as long as the transition is in progress, <code>TransitioningPropertyValue</code> maintains a reference to the prior value, and interpolates between it and the new value based on the current time and the configured transition duration and delay. The product is the next step in the evaluation chain: the \"possibly evaluated\" result type <code>R</code>. See below for more on this concept.</p>"},{"location":"API/classes/maplibregl.TransitioningPropertyValue/#type-parameters","title":"Type parameters","text":"Name <code>T</code> <code>R</code>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/","title":"Class: TwoFingersTouchPitchHandler","text":"<p>maplibregl.TwoFingersTouchPitchHandler</p> <p>The <code>TwoFingersTouchPitchHandler</code> allows the user to pitch the map by dragging up and down with two fingers.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul> <p>\u21b3 <code>TwoFingersTouchPitchHandler</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/","title":"Class: TwoFingersTouchZoomRotateHandler","text":"<p>maplibregl.TwoFingersTouchZoomRotateHandler</p> <p>The <code>TwoFingersTouchZoomRotateHandler</code> allows the user to zoom and rotate the map by pinching on a touchscreen.</p> <p>They can zoom with one finger by double tapping and dragging. On the second tap, hold the finger down and drag up or down to zoom in or out.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new TwoFingersTouchZoomRotateHandler(<code>el</code>, <code>touchZoom</code>, <code>touchRotate</code>, <code>tapDragZoom</code>)</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#parameters","title":"Parameters","text":"Name Type <code>el</code> <code>HTMLElement</code> <code>touchZoom</code> <code>TwoFingersTouchZoomHandler</code> <code>touchRotate</code> <code>TwoFingersTouchRotateHandler</code> <code>tapDragZoom</code> <code>TapDragZoomHandler</code>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:23</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"pinch to rotate and zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:56</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#disablerotation","title":"disableRotation","text":"<p>\u25b8 disableRotation(): <code>void</code></p> <p>Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\" interaction enabled.</p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.disableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:90</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"pinch to rotate and zoom\" interaction.</p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.enable();\n</code></pre> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.enable({ around: 'center' });\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#parameters_1","title":"Parameters","text":"Name Type Description <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code> Options object."},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:43</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#enablerotation","title":"enableRotation","text":"<p>\u25b8 enableRotation(): <code>void</code></p> <p>Enables the \"pinch to rotate\" interaction.</p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.enable();\nmap.touchZoomRotate.enableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:102</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p>//eslint-disable-line</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_5","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:79</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"pinch to rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_6","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:68</p>"},{"location":"API/classes/maplibregl.VectorTileSource/","title":"Class: VectorTileSource","text":"<p>maplibregl.VectorTileSource</p> <p>A source containing vector tiles in Mapbox Vector Tile format. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\ntype: 'vector',\nurl: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\ntype: 'vector',\ntiles: ['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt'],\nminzoom: 6,\nmaxzoom: 14\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.getSource('some id').setUrl(\"https://demotiles.maplibre.org/tiles/tiles.json\");\n</code></pre> <p><code>Example</code></p> <pre><code>map.getSource('some id').setTiles(['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt']);\n</code></pre> <p><code>See</code></p> <ul> <li>Add a vector tile source</li> <li>Add a third party vector tile source</li> </ul>"},{"location":"API/classes/maplibregl.VectorTileSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>VectorTileSource</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.VectorTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.VectorTileSource/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.VectorTileSource/#returns","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>VectorTileSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_1","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>VectorTileSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_2","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>VectorTileSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>VectorTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>VectorTileSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.VectorTileSource/#returns_4","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#settiles","title":"setTiles","text":"<p>\u25b8 setTiles(<code>tiles</code>): <code>VectorTileSource</code></p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the TileJSON spec."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_5","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_5","title":"Defined in","text":"<p>src/source/vector_tile_source.ts:146</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#seturl","title":"setUrl","text":"<p>\u25b8 setUrl(<code>url</code>): <code>VectorTileSource</code></p> <p>Sets the source <code>url</code> property and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>url</code> <code>string</code> A URL to a TileJSON resource. Supported protocols are <code>http:</code> and <code>https:</code>."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_6","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_6","title":"Defined in","text":"<p>src/source/vector_tile_source.ts:160</p>"},{"location":"API/classes/maplibregl.VertexBuffer/","title":"Class: VertexBuffer","text":"<p>maplibregl.VertexBuffer</p> <p>The <code>VertexBuffer</code> class turns a <code>StructArray</code> into a WebGL buffer. Each member of the StructArray's Struct type is converted to a WebGL attribute.</p>"},{"location":"API/classes/maplibregl.VertexBuffer/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.VertexBuffer/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new VertexBuffer(<code>context</code>, <code>array</code>, <code>attributes</code>, <code>dynamicDraw?</code>)</p>"},{"location":"API/classes/maplibregl.VertexBuffer/#parameters","title":"Parameters","text":"Name Type Description <code>context</code> <code>Context</code> - <code>array</code> <code>StructArray</code> - <code>attributes</code> readonly <code>StructArrayMember</code>[] - <code>dynamicDraw?</code> <code>boolean</code> Whether this buffer will be repeatedly updated."},{"location":"API/classes/maplibregl.VertexBuffer/#defined-in","title":"Defined in","text":"<p>src/gl/vertex_buffer.ts:42</p>"},{"location":"API/classes/maplibregl.VertexBuffer/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.VertexBuffer/#destroy","title":"destroy","text":"<p>\u25b8 destroy(): <code>void</code></p> <p>Destroy the GL buffer bound to the given WebGL context</p>"},{"location":"API/classes/maplibregl.VertexBuffer/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VertexBuffer/#defined-in_1","title":"Defined in","text":"<p>src/gl/vertex_buffer.ts:107</p>"},{"location":"API/classes/maplibregl.VertexBuffer/#setvertexattribpointers","title":"setVertexAttribPointers","text":"<p>\u25b8 setVertexAttribPointers(<code>gl</code>, <code>program</code>, <code>vertexOffset?</code>): <code>void</code></p> <p>Set the attribute pointers in a WebGL context</p>"},{"location":"API/classes/maplibregl.VertexBuffer/#parameters_1","title":"Parameters","text":"Name Type Description <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The WebGL context <code>program</code> <code>Program</code>&lt;<code>any</code>&gt; The active WebGL program <code>vertexOffset?</code> <code>number</code> Index of the starting vertex of the segment"},{"location":"API/classes/maplibregl.VertexBuffer/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VertexBuffer/#defined-in_2","title":"Defined in","text":"<p>src/gl/vertex_buffer.ts:86</p>"},{"location":"API/classes/maplibregl.VideoSource/","title":"Class: VideoSource","text":"<p>maplibregl.VideoSource</p> <p>A data source containing video. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>// add to map\nmap.addSource('some id', {\ntype: 'video',\nurl: [\n'https://www.mapbox.com/blog/assets/baltimore-smoke.mp4',\n'https://www.mapbox.com/blog/assets/baltimore-smoke.webm'\n],\ncoordinates: [\n[-76.54, 39.18],\n[-76.52, 39.18],\n[-76.52, 39.17],\n[-76.54, 39.17]\n]\n});\n// update\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n[-76.54335737228394, 39.18579907229748],\n[-76.52803659439087, 39.1838364847587],\n[-76.5295386314392, 39.17683392507606],\n[-76.54520273208618, 39.17876344106642]\n]);\nmap.removeSource('some id');  // remove\n</code></pre> <p><code>See</code></p> <p>Add a video</p>"},{"location":"API/classes/maplibregl.VideoSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ImageSource</code></li> </ul> <p>\u21b3 <code>VideoSource</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.VideoSource/#constructor","title":"constructor","text":"<p>\u2022 <code>Private</code> new VideoSource(<code>id</code>, <code>options</code>, <code>dispatcher</code>, <code>eventedParent</code>)</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters","title":"Parameters","text":"Name Type <code>id</code> <code>string</code> <code>options</code> <code>VideoSourceSpecification</code> <code>dispatcher</code> <code>Dispatcher</code> <code>eventedParent</code> <code>Evented</code>"},{"location":"API/classes/maplibregl.VideoSource/#overrides","title":"Overrides","text":"<p>ImageSource.constructor</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in","title":"Defined in","text":"<p>src/source/video_source.ts:57</p>"},{"location":"API/classes/maplibregl.VideoSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.VideoSource/#getvideo","title":"getVideo","text":"<p>\u25b8 getVideo(): <code>HTMLVideoElement</code></p> <p>Returns the HTML <code>video</code> element.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns","title":"Returns","text":"<p><code>HTMLVideoElement</code></p> <p>The HTML <code>video</code> element.</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_1","title":"Defined in","text":"<p>src/source/video_source.ts:132</p>"},{"location":"API/classes/maplibregl.VideoSource/#listens","title":"listens","text":"<p>\u25b8 <code>Private</code> listens(<code>type</code>): <code>any</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.VideoSource/#returns_1","title":"Returns","text":"<p><code>any</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from","title":"Inherited from","text":"<p>ImageSource.listens</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:155</p>"},{"location":"API/classes/maplibregl.VideoSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>VideoSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.VideoSource/#returns_2","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_1","title":"Inherited from","text":"<p>ImageSource.off</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:79</p>"},{"location":"API/classes/maplibregl.VideoSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>VideoSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.VideoSource/#returns_3","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_2","title":"Inherited from","text":"<p>ImageSource.on</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:65</p>"},{"location":"API/classes/maplibregl.VideoSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>VideoSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.VideoSource/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>VideoSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_3","title":"Inherited from","text":"<p>ImageSource.once</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:95</p>"},{"location":"API/classes/maplibregl.VideoSource/#pause","title":"pause","text":"<p>\u25b8 pause(): <code>void</code></p> <p>Pauses the video.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_6","title":"Defined in","text":"<p>src/source/video_source.ts:99</p>"},{"location":"API/classes/maplibregl.VideoSource/#play","title":"play","text":"<p>\u25b8 play(): <code>void</code></p> <p>Plays the video.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_7","title":"Defined in","text":"<p>src/source/video_source.ts:108</p>"},{"location":"API/classes/maplibregl.VideoSource/#prepare","title":"prepare","text":"<p>\u25b8 prepare(): <code>void</code></p> <p>Sets the video's coordinates and re-renders the map.</p> <p><code>Method</code></p> <p>setCoordinates</p> <p><code>Instance</code></p> <p><code>Memberof</code></p> <p>VideoSource</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns_7","title":"Returns","text":"<p><code>void</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.VideoSource/#overrides_1","title":"Overrides","text":"<p>ImageSource.prepare</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_8","title":"Defined in","text":"<p>src/source/video_source.ts:156</p>"},{"location":"API/classes/maplibregl.VideoSource/#seek","title":"seek","text":"<p>\u25b8 <code>Private</code> seek(<code>seconds</code>): <code>void</code></p> <p>Sets playback to a timestamp, in seconds.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_5","title":"Parameters","text":"Name Type <code>seconds</code> <code>number</code>"},{"location":"API/classes/maplibregl.VideoSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_9","title":"Defined in","text":"<p>src/source/video_source.ts:118</p>"},{"location":"API/classes/maplibregl.VideoSource/#setcoordinates","title":"setCoordinates","text":"<p>\u25b8 setCoordinates(<code>coordinates</code>): <code>VideoSource</code></p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/maplibregl.VideoSource/#returns_9","title":"Returns","text":"<p><code>VideoSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_4","title":"Inherited from","text":"<p>ImageSource.setCoordinates</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_10","title":"Defined in","text":"<p>src/source/image_source.ts:196</p>"},{"location":"API/classes/maplibregl.VideoSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 <code>Private</code> setEventedParent(<code>parent?</code>, <code>data?</code>): <code>VideoSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_7","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.VideoSource/#returns_10","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_5","title":"Inherited from","text":"<p>ImageSource.setEventedParent</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_11","title":"Defined in","text":"<p>src/util/evented.ts:170</p>"},{"location":"API/classes/maplibregl.VideoSource/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>options</code>): <code>VideoSource</code></p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_8","title":"Parameters","text":"Name Type Description <code>options</code> <code>Object</code> Options object. <code>options.coordinates?</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle. <code>options.url</code> <code>string</code> Required image URL."},{"location":"API/classes/maplibregl.VideoSource/#returns_11","title":"Returns","text":"<p><code>VideoSource</code></p> <p>this</p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_6","title":"Inherited from","text":"<p>ImageSource.updateImage</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_12","title":"Defined in","text":"<p>src/source/image_source.ts:150</p>"},{"location":"API/classes/maplibregl.WorkerPool/","title":"Class: WorkerPool","text":"<p>maplibregl.WorkerPool</p> <p>Constructs a worker pool.</p>"},{"location":"API/enums/maplibregl.ResourceType/","title":"Enumeration: ResourceType","text":"<p>maplibregl.ResourceType</p> <p>A type of MapLibre resource.</p>"},{"location":"API/enums/maplibregl.ResourceType/#enumeration-members","title":"Enumeration Members","text":""},{"location":"API/enums/maplibregl.ResourceType/#glyphs","title":"Glyphs","text":"<p>\u2022 Glyphs = <code>\"Glyphs\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in","title":"Defined in","text":"<p>src/util/request_manager.ts:7</p>"},{"location":"API/enums/maplibregl.ResourceType/#image","title":"Image","text":"<p>\u2022 Image = <code>\"Image\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_1","title":"Defined in","text":"<p>src/util/request_manager.ts:8</p>"},{"location":"API/enums/maplibregl.ResourceType/#source","title":"Source","text":"<p>\u2022 Source = <code>\"Source\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_2","title":"Defined in","text":"<p>src/util/request_manager.ts:9</p>"},{"location":"API/enums/maplibregl.ResourceType/#spriteimage","title":"SpriteImage","text":"<p>\u2022 SpriteImage = <code>\"SpriteImage\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_3","title":"Defined in","text":"<p>src/util/request_manager.ts:10</p>"},{"location":"API/enums/maplibregl.ResourceType/#spritejson","title":"SpriteJSON","text":"<p>\u2022 SpriteJSON = <code>\"SpriteJSON\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_4","title":"Defined in","text":"<p>src/util/request_manager.ts:11</p>"},{"location":"API/enums/maplibregl.ResourceType/#style","title":"Style","text":"<p>\u2022 Style = <code>\"Style\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_5","title":"Defined in","text":"<p>src/util/request_manager.ts:12</p>"},{"location":"API/enums/maplibregl.ResourceType/#tile","title":"Tile","text":"<p>\u2022 Tile = <code>\"Tile\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_6","title":"Defined in","text":"<p>src/util/request_manager.ts:13</p>"},{"location":"API/enums/maplibregl.ResourceType/#unknown","title":"Unknown","text":"<p>\u2022 Unknown = <code>\"Unknown\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_7","title":"Defined in","text":"<p>src/util/request_manager.ts:14</p>"},{"location":"API/interfaces/maplibregl.AttributeBinder/","title":"Interface: AttributeBinder","text":"<p>maplibregl.AttributeBinder</p> <p><code>Binder</code> is the interface definition for the strategies for constructing,  uploading, and binding paint property data as GLSL attributes. Most style-  spec properties have a 1:1 relationship to shader attribute/uniforms, but  some require multiple values per feature to be passed to the GPU, and in  those cases we bind multiple attributes/uniforms.</p> <p>It has three implementations, one for each of the three strategies we use:</p> <ul> <li>For constant properties -- those whose value is a constant, or the constant    result of evaluating a camera expression at a particular camera position -- we    don't need a vertex attribute buffer, and instead use a uniform.</li> <li>For data expressions, we use a vertex buffer with a single attribute value,    the evaluated result of the source function for the given feature.</li> <li>For composite expressions, we use a vertex buffer with two attributes: min and    max values covering the range of zooms at which we expect the tile to be    displayed. These values are calculated by evaluating the composite expression for    the given feature at strategically chosen zoom levels. In addition to this    attribute data, we also use a uniform value which the shader uses to interpolate    between the min and max value at the final displayed zoom level. The use of a    uniform allows us to cheaply update the value on every frame.</li> </ul> <p>Note that the shader source varies depending on whether we're using a uniform or  attribute. We dynamically compile shaders at runtime to accommodate this.</p>"},{"location":"API/interfaces/maplibregl.Bucket/","title":"Interface: Bucket","text":"<p>maplibregl.Bucket</p> <p>The <code>Bucket</code> interface is the single point of knowledge about turning vector tiles into WebGL buffers.</p> <p><code>Bucket</code> is an abstract interface. An implementation exists for each style layer type. Create a bucket via the <code>StyleLayer#createBucket</code> method.</p> <p>The concrete bucket types, using layout options from the style layer, transform feature geometries into vertex and index data for use by the vertex shader.  They also (via <code>ProgramConfiguration</code>) use feature properties and the zoom level to populate the attributes needed for data-driven styling.</p> <p>Buckets are designed to be built on a worker thread and then serialized and transferred back to the main thread for rendering.  On the worker side, a bucket's vertex, index, and attribute data is stored in <code>bucket.arrays: ArrayGroup</code>.  When a bucket's data is serialized and sent back to the main thread, is gets deserialized (using <code>new Bucket(serializedBucketData)</code>, with the array data now stored in <code>bucket.buffers: BufferGroup</code>.  BufferGroups hold the same data as ArrayGroups, but are tuned for consumption by WebGL.</p>"},{"location":"API/interfaces/maplibregl.Bucket/#implemented-by","title":"Implemented by","text":"<ul> <li><code>CircleBucket</code></li> <li><code>LineBucket</code></li> <li><code>SymbolBucket</code></li> </ul>"},{"location":"API/interfaces/maplibregl.Bucket/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.Bucket/#destroy","title":"destroy","text":"<p>\u25b8 <code>Private</code> destroy(): <code>void</code></p> <p>Release the WebGL resources associated with the buffers. Note that because buckets are shared between layers having the same layout properties, they must be destroyed in groups (all buckets for a tile, or all symbol buckets).</p>"},{"location":"API/interfaces/maplibregl.Bucket/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.Bucket/#defined-in","title":"Defined in","text":"<p>src/data/bucket.ts:96</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/","title":"Interface: CustomLayerInterface","text":"<p>maplibregl.CustomLayerInterface</p> <p>Interface for custom style layers. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Custom layers allow a user to render directly into the map's GL context using the map's camera. These layers can be added between any regular layers using addLayer.</p> <p>Custom layers must have a unique <code>id</code> and must have the <code>type</code> of <code>\"custom\"</code>. They must implement <code>render</code> and may implement <code>prerender</code>, <code>onAdd</code> and <code>onRemove</code>. They can trigger rendering using triggerRepaint and they should appropriately handle Map.event:webglcontextlost and Map.event:webglcontextrestored.</p> <p>The <code>renderingMode</code> property controls whether the layer is treated as a <code>\"2d\"</code> or <code>\"3d\"</code> map layer. Use: - <code>\"renderingMode\": \"3d\"</code> to use the depth buffer and share it with other layers - <code>\"renderingMode\": \"2d\"</code> to add a layer with no depth. If you need to use the depth buffer for a <code>\"2d\"</code> layer you must use an offscreen   framebuffer and prerender</p> <p>CustomLayerInterface</p> <p><code>Example</code></p> <pre><code>// Custom layer implemented as ES6 class\nclass NullIslandLayer {\nconstructor() {\nthis.id = 'null-island';\nthis.type = 'custom';\nthis.renderingMode = '2d';\n}\nonAdd(map, gl) {\nconst vertexSource = `\n        uniform mat4 u_matrix;\n        void main() {\n            gl_Position = u_matrix * vec4(0.5, 0.5, 0.0, 1.0);\n            gl_PointSize = 20.0;\n        }`;\nconst fragmentSource = `\n        void main() {\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`;\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vertexShader, vertexSource);\ngl.compileShader(vertexShader);\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fragmentShader, fragmentSource);\ngl.compileShader(fragmentShader);\nthis.program = gl.createProgram();\ngl.attachShader(this.program, vertexShader);\ngl.attachShader(this.program, fragmentShader);\ngl.linkProgram(this.program);\n}\nrender(gl, matrix) {\ngl.useProgram(this.program);\ngl.uniformMatrix4fv(gl.getUniformLocation(this.program, \"u_matrix\"), false, matrix);\ngl.drawArrays(gl.POINTS, 0, 1);\n}\n}\nmap.on('load', function() {\nmap.addLayer(new NullIslandLayer());\n});\n</code></pre>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#onadd","title":"onAdd","text":"<p>\u25b8 <code>Optional</code> onAdd(<code>map</code>, <code>gl</code>): <code>void</code></p> <p>Optional method called when the layer has been added to the Map with addLayer. This gives the layer a chance to initialize gl resources and register event listeners.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>CustomLayerInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>onAdd</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The gl context for the map."},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:144</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#onremove","title":"onRemove","text":"<p>\u25b8 <code>Optional</code> onRemove(<code>map</code>, <code>gl</code>): <code>void</code></p> <p>Optional method called when the layer has been removed from the Map with removeLayer. This gives the layer a chance to clean up gl resources and event listeners.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>CustomLayerInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>onRemove</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The gl context for the map."},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_1","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:156</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#id","title":"id","text":"<p>\u2022 id: <code>string</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_2","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:77</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#prerender","title":"prerender","text":"<p>\u2022 <code>Optional</code> prerender: <code>CustomRenderMethod</code></p> <p>Optional method called during a render frame to allow a layer to prepare resources or render into a texture.</p> <p>The layer cannot make any assumptions about the current GL state and must bind a framebuffer before rendering.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>CustomLayerInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>prerender</p> <p><code>Param</code></p> <p>The map's gl context.</p> <p><code>Param</code></p> <p>The map's camera matrix. It projects spherical mercator coordinates to gl coordinates. The mercator coordinate <code>[0, 0]</code> represents the top left corner of the mercator world and <code>[1, 1]</code> represents the bottom right corner. When the <code>renderingMode</code> is <code>\"3d\"</code>, the z coordinate is conformal. A box with identical x, y, and z lengths in mercator units would be rendered as a cube. MercatorCoordinate.fromLngLat can be used to project a <code>LngLat</code> to a mercator coordinate.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_3","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:132</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#render","title":"render","text":"<p>\u2022 render: <code>CustomRenderMethod</code></p> <p>Called during a render frame allowing the layer to draw into the GL context.</p> <p>The layer can assume blending and depth state is set to allow the layer to properly blend and clip other layers. The layer cannot make any other assumptions about the current GL state.</p> <p>If the layer needs to render to a texture, it should implement the <code>prerender</code> method to do this and only use the <code>render</code> method for drawing directly into the main framebuffer.</p> <p>The blend function is set to <code>gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code>. This expects colors to be provided in premultiplied alpha form where the <code>r</code>, <code>g</code> and <code>b</code> values are already multiplied by the <code>a</code> value. If you are unable to provide colors in premultiplied form you may want to change the blend function to <code>gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code>.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>CustomLayerInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>render</p> <p><code>Param</code></p> <p>The map's gl context.</p> <p><code>Param</code></p> <p>The map's camera matrix. It projects spherical mercator coordinates to gl coordinates. The spherical mercator coordinate <code>[0, 0]</code> represents the top left corner of the mercator world and <code>[1, 1]</code> represents the bottom right corner. When the <code>renderingMode</code> is <code>\"3d\"</code>, the z coordinate is conformal. A box with identical x, y, and z lengths in mercator units would be rendered as a cube. MercatorCoordinate.fromLngLat can be used to project a <code>LngLat</code> to a mercator coordinate.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_4","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:114</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#renderingmode","title":"renderingMode","text":"<p>\u2022 <code>Optional</code> renderingMode: <code>\"2d\"</code> | <code>\"3d\"</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_5","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:85</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#type","title":"type","text":"<p>\u2022 type: <code>\"custom\"</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_6","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:81</p>"},{"location":"API/interfaces/maplibregl.IControl/","title":"Interface: IControl","text":"<p>maplibregl.IControl</p> <p>Interface for interactive controls added to the map. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Controls must implement <code>onAdd</code> and <code>onRemove</code>, and must own an element, which is often a <code>div</code> element. To use MapLibre GL JS's default control styling, add the <code>maplibregl-ctrl</code> class to your control's node.</p> <p>IControl</p> <p><code>Example</code></p> <pre><code>// Control implemented as ES6 class\nclass HelloWorldControl {\nonAdd(map) {\nthis._map = map;\nthis._container = document.createElement('div');\nthis._container.className = 'maplibregl-ctrl';\nthis._container.textContent = 'Hello, world';\nreturn this._container;\n}\nonRemove() {\nthis._container.parentNode.removeChild(this._container);\nthis._map = undefined;\n}\n}\n// Control implemented as ES5 prototypical class\nfunction HelloWorldControl() { }\nHelloWorldControl.prototype.onAdd = function(map) {\nthis._map = map;\nthis._container = document.createElement('div');\nthis._container.className = 'maplibregl-ctrl';\nthis._container.textContent = 'Hello, world';\nreturn this._container;\n};\nHelloWorldControl.prototype.onRemove = function () {\nthis._container.parentNode.removeChild(this._container);\nthis._map = undefined;\n};\n</code></pre>"},{"location":"API/interfaces/maplibregl.IControl/#implemented-by","title":"Implemented by","text":"<ul> <li><code>AttributionControl</code></li> <li><code>FullscreenControl</code></li> <li><code>GeolocateControl</code></li> <li><code>LogoControl</code></li> <li><code>NavigationControl</code></li> <li><code>ScaleControl</code></li> <li><code>TerrainControl</code></li> </ul>"},{"location":"API/interfaces/maplibregl.IControl/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.IControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by addControl internally.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>IControl</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>onAdd</p>"},{"location":"API/interfaces/maplibregl.IControl/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/interfaces/maplibregl.IControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/interfaces/maplibregl.IControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/control.ts:63</p>"},{"location":"API/interfaces/maplibregl.IControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(<code>map</code>): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by removeControl internally.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>IControl</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>onRemove</p>"},{"location":"API/interfaces/maplibregl.IControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be removed from"},{"location":"API/interfaces/maplibregl.IControl/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p>there is no required return value for this method</p>"},{"location":"API/interfaces/maplibregl.IControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/control.ts:76</p>"},{"location":"API/interfaces/maplibregl.IControl/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.IControl/#getdefaultposition","title":"getDefaultPosition","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> getDefaultPosition: () =&gt; <code>ControlPosition</code></p>"},{"location":"API/interfaces/maplibregl.IControl/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (): <code>ControlPosition</code></p> <p>Optionally provide a default position for this control. If this method is implemented and addControl is called without the <code>position</code> parameter, the value returned by getDefaultPosition will be used as the control's position.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>IControl</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>getDefaultPosition</p>"},{"location":"API/interfaces/maplibregl.IControl/#returns_2","title":"Returns","text":"<p><code>ControlPosition</code></p> <p>a control position, one of the values valid in addControl.</p>"},{"location":"API/interfaces/maplibregl.IControl/#defined-in_2","title":"Defined in","text":"<p>src/ui/control/control.ts:89</p>"},{"location":"API/interfaces/maplibregl.Property/","title":"Interface: Property&lt;T, R&gt;","text":"<p>maplibregl.Property</p> <p>Implementations of the <code>Property</code> interface:</p> <ul> <li>Hold metadata about a property that's independent of any specific value: stuff like the type of the value,    the default value, etc. This comes from the style specification JSON.</li> <li>Define behavior that needs to be polymorphic across different properties: \"possibly evaluating\"    an input value (see below), and interpolating between two possibly-evaluted values.</li> </ul> <p>The type <code>T</code> is the fully-evaluated value type (e.g. <code>number</code>, <code>string</code>, <code>Color</code>).  The type <code>R</code> is the intermediate \"possibly evaluated\" value type. See below.</p> <p>There are two main implementations of the interface -- one for properties that allow data-driven values,  and one for properties that don't. There are a few \"special case\" implementations as well: one for properties  which cross-fade between two values rather than interpolating, one for <code>heatmap-color</code> and <code>line-gradient</code>,  and one for <code>light-position</code>.</p>"},{"location":"API/interfaces/maplibregl.Property/#type-parameters","title":"Type parameters","text":"Name <code>T</code> <code>R</code>"},{"location":"API/interfaces/maplibregl.Property/#implemented-by","title":"Implemented by","text":"<ul> <li><code>ColorRampProperty</code></li> <li><code>CrossFadedProperty</code></li> <li><code>DataConstantProperty</code></li> <li><code>DataDrivenProperty</code></li> </ul>"},{"location":"API/interfaces/maplibregl.Source/","title":"Interface: Source","text":"<p>maplibregl.Source</p> <p>The <code>Source</code> interface must be implemented by each source type, including \"core\" types (<code>vector</code>, <code>raster</code>, <code>video</code>, etc.) and all custom, third-party types.</p> <p><code>Param</code></p> <p>The id for the source. Must not be used by any existing source.</p> <p><code>Param</code></p> <p>Source options, specific to the source type (except for <code>options.type</code>, which is always required).</p> <p><code>Param</code></p> <p>The source type, matching the value of <code>name</code> used in Style#addSourceType.</p> <p><code>Param</code></p> <p>A Dispatcher instance, which can be used to send messages to the workers.</p> <p><code>Fires</code></p> <p>data with <code>{dataType: 'source', sourceDataType: 'metadata'}</code> to indicate that any necessary metadata has been loaded so that it's okay to call <code>loadTile</code>; and with <code>{dataType: 'source', sourceDataType: 'content'}</code> to indicate that the source data has changed, so that any current caches should be flushed.</p>"},{"location":"API/interfaces/maplibregl.Source/#implemented-by","title":"Implemented by","text":"<ul> <li><code>GeoJSONSource</code></li> <li><code>ImageSource</code></li> <li><code>VectorTileSource</code></li> </ul>"},{"location":"API/interfaces/maplibregl.Source/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.Source/#serialize","title":"serialize","text":"<p>\u25b8 <code>Private</code> serialize(): <code>any</code></p>"},{"location":"API/interfaces/maplibregl.Source/#returns","title":"Returns","text":"<p><code>any</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/interfaces/maplibregl.Source/#defined-in","title":"Defined in","text":"<p>src/source/source.ts:71</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/","title":"Interface: StyleImageInterface","text":"<p>maplibregl.StyleImageInterface</p> <p>Interface for dynamically generated style images. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Images implementing this interface can be redrawn for every frame. They can be used to animate icons and patterns or make them respond to user input. Style images can implement a render method. The method is called every frame and can be used to update the image.</p> <p>StyleImageInterface</p> <p><code>See</code></p> <p>Add an animated icon to the map.</p> <p><code>Example</code></p> <pre><code>var flashingSquare = {\nwidth: 64,\nheight: 64,\ndata: new Uint8Array(64 * 64 * 4),\nonAdd: function(map) {\nthis.map = map;\n},\nrender: function() {\n// keep repainting while the icon is on the map\nthis.map.triggerRepaint();\n// alternate between black and white based on the time\nvar value = Math.round(Date.now() / 1000) % 2 === 0  ? 255 : 0;\n// check if image needs to be changed\nif (value !== this.previousValue) {\nthis.previousValue = value;\nvar bytesPerPixel = 4;\nfor (var x = 0; x &lt; this.width; x++) {\nfor (var y = 0; y &lt; this.height; y++) {\nvar offset = (y * this.width + x) * bytesPerPixel;\nthis.data[offset + 0] = value;\nthis.data[offset + 1] = value;\nthis.data[offset + 2] = value;\nthis.data[offset + 3] = 255;\n}\n}\n// return true to indicate that the image changed\nreturn true;\n}\n}\n}\nmap.addImage('flashing_square', flashingSquare);\n</code></pre>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.StyleImageInterface/#data","title":"data","text":"<p>\u2022 data: <code>Uint8Array</code> | <code>Uint8ClampedArray</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in","title":"Defined in","text":"<p>src/style/style_image.ts:96</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#height","title":"height","text":"<p>\u2022 height: <code>number</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_1","title":"Defined in","text":"<p>src/style/style_image.ts:92</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#onadd","title":"onAdd","text":"<p>\u2022 <code>Optional</code> onAdd: (<code>map</code>: <code>Map</code>, <code>id</code>: <code>string</code>) =&gt; <code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>map</code>, <code>id</code>): <code>void</code></p> <p>Optional method called when the layer has been added to the Map with addImage.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>StyleImageInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>onAdd</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>id</code> <code>string</code> -"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_2","title":"Defined in","text":"<p>src/style/style_image.ts:123</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#onremove","title":"onRemove","text":"<p>\u2022 <code>Optional</code> onRemove: () =&gt; <code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code></p> <p>Optional method called when the icon is removed from the map with removeImage. This gives the image a chance to clean up resources and event listeners.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>StyleImageInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>onRemove</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_3","title":"Defined in","text":"<p>src/style/style_image.ts:133</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#render","title":"render","text":"<p>\u2022 <code>Optional</code> render: () =&gt; <code>boolean</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#type-declaration_2","title":"Type declaration","text":"<p>\u25b8 (): <code>boolean</code></p> <p>This method is called once before every frame where the icon will be used. The method can optionally update the image's <code>data</code> member with a new image.</p> <p>If the method updates the image it must return <code>true</code> to commit the change. If the method returns <code>false</code> or nothing the image is assumed to not have changed.</p> <p>If updates are infrequent it maybe easier to use updateImage to update the image instead of implementing this method.</p> <p><code>Function</code></p> <p><code>Memberof</code></p> <p>StyleImageInterface</p> <p><code>Instance</code></p> <p><code>Name</code></p> <p>render</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if this method updated the image. <code>false</code> if the image was not changed.</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_4","title":"Defined in","text":"<p>src/style/style_image.ts:113</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#width","title":"width","text":"<p>\u2022 width: <code>number</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_5","title":"Defined in","text":"<p>src/style/style_image.ts:88</p>"},{"location":"API/modules/maplibregl/","title":"Module: maplibregl","text":""},{"location":"API/modules/maplibregl/#map","title":"Map","text":"<ul> <li>Map</li> </ul>"},{"location":"API/modules/maplibregl/#controls","title":"Controls","text":"<ul> <li>FullscreenControl</li> </ul>"},{"location":"API/modules/maplibregl/#classes","title":"Classes","text":"<ul> <li>AJAXError</li> <li>Actor</li> <li>AttributionControl</li> <li>BoxZoomHandler</li> <li>CanvasSource</li> <li>CircleBucket</li> <li>CollisionBoxArray</li> <li>CollisionIndex</li> <li>ColorRampProperty</li> <li>CrossFadedDataDrivenProperty</li> <li>CrossFadedProperty</li> <li>DataConstantProperty</li> <li>DataDrivenProperty</li> <li>Dispatcher</li> <li>DoubleClickZoomHandler</li> <li>DragPanHandler</li> <li>DragRotateHandler</li> <li>EdgeInsets</li> <li>Evented</li> <li>FeatureIndexArray</li> <li>GeoJSONSource</li> <li>GeolocateControl</li> <li>GlyphOffsetArray</li> <li>GridIndex</li> <li>ImageSource</li> <li>KeyboardHandler</li> <li>Layout</li> <li>LineAtlas</li> <li>LineBucket</li> <li>LngLat</li> <li>LngLatBounds</li> <li>LogoControl</li> <li>MapMouseEvent</li> <li>MapTouchEvent</li> <li>MapWheelEvent</li> <li>Marker</li> <li>MercatorCoordinate</li> <li>NavigationControl</li> <li>Painter</li> <li>PlacedSymbolArray</li> <li>Popup</li> <li>PossiblyEvaluated</li> <li>PossiblyEvaluatedPropertyValue</li> <li>ProgramConfiguration</li> <li>Properties</li> <li>PropertyValue</li> <li>RenderPool</li> <li>RenderToTexture</li> <li>ScaleControl</li> <li>ScrollZoomHandler</li> <li>SourceCache</li> <li>SourceFeatureState</li> <li>Struct</li> <li>StructArray</li> <li>StructArrayLayout1f4</li> <li>StructArrayLayout1ui2</li> <li>StructArrayLayout1ul2ui8</li> <li>StructArrayLayout1ul4</li> <li>StructArrayLayout2f8</li> <li>StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48</li> <li>StructArrayLayout2i4</li> <li>StructArrayLayout2i4i12</li> <li>StructArrayLayout2i4ub8</li> <li>StructArrayLayout2ub2f12</li> <li>StructArrayLayout2ui4</li> <li>StructArrayLayout3f12</li> <li>StructArrayLayout3i6</li> <li>StructArrayLayout3ui6</li> <li>StructArrayLayout4i4ui4i24</li> <li>StructArrayLayout4i8</li> <li>StructArrayLayout6i1ul2ui20</li> <li>StructArrayLayout8i15ui1ul4f68</li> <li>Style</li> <li>SymbolBucket</li> <li>SymbolInstanceArray</li> <li>SymbolLineVertexArray</li> <li>Terrain</li> <li>TerrainControl</li> <li>TerrainSourceCache</li> <li>ThrottledInvoker</li> <li>Tile</li> <li>TileCache</li> <li>Transform</li> <li>TransformProvider</li> <li>Transitionable</li> <li>TransitionablePropertyValue</li> <li>Transitioning</li> <li>TransitioningPropertyValue</li> <li>TwoFingersTouchPitchHandler</li> <li>TwoFingersTouchZoomRotateHandler</li> <li>VectorTileSource</li> <li>VertexBuffer</li> <li>VideoSource</li> <li>WorkerPool</li> </ul>"},{"location":"API/modules/maplibregl/#enumerations","title":"Enumerations","text":"<ul> <li>ResourceType</li> </ul>"},{"location":"API/modules/maplibregl/#events","title":"Events","text":"<ul> <li>FullscreenControl</li> </ul>"},{"location":"API/modules/maplibregl/#interfaces","title":"Interfaces","text":"<ul> <li>AttributeBinder</li> <li>Bucket</li> <li>CustomLayerInterface</li> <li>IControl</li> <li>Property</li> <li>Source</li> <li>StyleImageInterface</li> </ul>"},{"location":"API/modules/maplibregl/#type-aliases","title":"Type Aliases","text":""},{"location":"API/modules/maplibregl/#animationoptions","title":"AnimationOptions","text":"<p>\u01ac AnimationOptions: <code>Object</code></p> <p>Options common to map movement methods that involve animation, such as panBy and easeTo, controlling the duration and easing function of the animation. All properties are optional.</p>"},{"location":"API/modules/maplibregl/#type-declaration","title":"Type declaration","text":"Name Type <code>animate?</code> <code>boolean</code> <code>duration?</code> <code>number</code> <code>easing?</code> (<code>_</code>: <code>number</code>) =&gt; <code>number</code> <code>essential?</code> <code>boolean</code> <code>freezeElevation?</code> <code>boolean</code> <code>offset?</code> <code>PointLike</code>"},{"location":"API/modules/maplibregl/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:121</p>"},{"location":"API/modules/maplibregl/#cameraoptions","title":"CameraOptions","text":"<p>\u01ac CameraOptions: <code>CenterZoomBearing</code> &amp; { <code>around?</code>: <code>LngLatLike</code> ; <code>pitch?</code>: <code>number</code>  }</p> <p>Options common to jumpTo, easeTo, and flyTo, controlling the desired location, zoom, bearing, and pitch of the camera. All properties are optional, and when a property is omitted, the current camera value for that property will remain unchanged.</p> <p><code>Example</code></p> <pre><code>// set the map's initial perspective with CameraOptions\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://demotiles.maplibre.org/style.json',\ncenter: [-73.5804, 45.53483],\npitch: 60,\nbearing: -60,\nzoom: 10\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Set pitch and bearing</li> <li>Jump to a series of locations</li> <li>Fly to a location</li> <li>Display buildings in 3D</li> </ul>"},{"location":"API/modules/maplibregl/#defined-in_1","title":"Defined in","text":"<p>src/ui/camera.ts:61</p>"},{"location":"API/modules/maplibregl/#gestureoptions","title":"GestureOptions","text":"<p>\u01ac GestureOptions: <code>Object</code></p> <p>An options object for the gesture settings</p> <p><code>Example</code></p> <pre><code>let options = {\nwindowsHelpText: \"Use Ctrl + scroll to zoom the map\",\nmacHelpText: \"Use \u2318 + scroll to zoom the map\",\nmobileHelpText: \"Use two fingers to move the map\",\n}\n</code></pre>"},{"location":"API/modules/maplibregl/#type-declaration_1","title":"Type declaration","text":"Name Type <code>macHelpText?</code> <code>string</code> <code>mobileHelpText?</code> <code>string</code> <code>windowsHelpText?</code> <code>string</code>"},{"location":"API/modules/maplibregl/#defined-in_2","title":"Defined in","text":"<p>src/ui/map.ts:131</p>"},{"location":"API/modules/maplibregl/#lnglatboundslike","title":"LngLatBoundsLike","text":"<p>\u01ac LngLatBoundsLike: <code>LngLatBounds</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>] | [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>]</p> <p>A LngLatBounds object, an array of LngLatLike objects in [sw, ne] order, or an array of numbers in [west, south, east, north] order.</p> <p><code>Example</code></p> <pre><code>var v1 = new maplibregl.LngLatBounds(\nnew maplibregl.LngLat(-73.9876, 40.7661),\nnew maplibregl.LngLat(-73.9397, 40.8002)\n);\nvar v2 = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\nvar v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n</code></pre>"},{"location":"API/modules/maplibregl/#defined-in_3","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:311</p>"},{"location":"API/modules/maplibregl/#lnglatlike","title":"LngLatLike","text":"<p>\u01ac LngLatLike: <code>LngLat</code> | { <code>lat</code>: <code>number</code> ; <code>lng</code>: <code>number</code>  } | { <code>lat</code>: <code>number</code> ; <code>lon</code>: <code>number</code>  } | [<code>number</code>, <code>number</code>]</p> <p>A LngLat object, an array of two numbers representing longitude and latitude, or an object with <code>lng</code> and <code>lat</code> or <code>lon</code> and <code>lat</code> properties.</p> <p><code>Example</code></p> <pre><code>var v1 = new maplibregl.LngLat(-122.420679, 37.772537);\nvar v2 = [-122.420679, 37.772537];\nvar v3 = {lon: -122.420679, lat: 37.772537};\n</code></pre>"},{"location":"API/modules/maplibregl/#defined-in_4","title":"Defined in","text":"<p>src/geo/lng_lat.ts:144</p>"},{"location":"API/modules/maplibregl/#mapdataevent","title":"MapDataEvent","text":"<p>\u01ac MapDataEvent: <code>Object</code></p> <p>A <code>MapDataEvent</code> object is emitted with the Map.event:data and Map.event:dataloading events. Possible values for <code>dataType</code>s are:</p> <ul> <li><code>'source'</code>: The non-tile data associated with any source</li> <li><code>'style'</code>: The style used by the map</li> </ul> <p>Possible values for <code>sourceDataType</code>s are:</p> <ul> <li><code>'metadata'</code>: indicates that any necessary source metadata has been loaded (such as TileJSON) and it is ok to start loading tiles</li> <li><code>'content'</code>: indicates the source data has changed (such as when source.setData() has been called on GeoJSONSource)</li> <li><code>'visibility'</code>: send when the source becomes used when at least one of its layers becomes visible in style sense (inside the layer's zoom range and with layout.visibility set to 'visible')</li> <li><code>'idle'</code>: indicates that no new source data has been fetched (but the source has done loading)</li> </ul> <p><code>Example</code></p> <pre><code>// The sourcedata event is an example of MapDataEvent.\n// Set up an event listener on the map.\nmap.on('sourcedata', function(e) {\nif (e.isSourceLoaded) {\n// Do something when the source has finished loading\n}\n});\n</code></pre>"},{"location":"API/modules/maplibregl/#type-declaration_2","title":"Type declaration","text":"Name Type <code>dataType</code> <code>string</code> <code>sourceDataType</code> <code>MapSourceDataType</code> <code>type</code> <code>string</code>"},{"location":"API/modules/maplibregl/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:316</p>"},{"location":"API/modules/maplibregl/#mapeventtype","title":"MapEventType","text":"<p>\u01ac MapEventType: <code>Object</code></p> <p>MapEventType - a mapping between the event name and the event value</p>"},{"location":"API/modules/maplibregl/#type-declaration_3","title":"Type declaration","text":"Name Type <code>boxzoomcancel</code> <code>MapLibreZoomEvent</code> <code>boxzoomend</code> <code>MapLibreZoomEvent</code> <code>boxzoomstart</code> <code>MapLibreZoomEvent</code> <code>click</code> <code>MapMouseEvent</code> <code>contextmenu</code> <code>MapMouseEvent</code> <code>data</code> <code>MapDataEvent</code> <code>dataabort</code> <code>MapDataEvent</code> <code>dataloading</code> <code>MapDataEvent</code> <code>dblclick</code> <code>MapMouseEvent</code> <code>drag</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>dragend</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>dragstart</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>error</code> <code>ErrorEvent</code> <code>idle</code> <code>MapLibreEvent</code> <code>load</code> <code>MapLibreEvent</code> <code>mousedown</code> <code>MapMouseEvent</code> <code>mousemove</code> <code>MapMouseEvent</code> <code>mouseout</code> <code>MapMouseEvent</code> <code>mouseover</code> <code>MapMouseEvent</code> <code>mouseup</code> <code>MapMouseEvent</code> <code>move</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; <code>moveend</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; <code>movestart</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; <code>pitch</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>pitchend</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>pitchstart</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>remove</code> <code>MapLibreEvent</code> <code>render</code> <code>MapLibreEvent</code> <code>resize</code> <code>MapLibreEvent</code> <code>rotate</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>rotateend</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>rotatestart</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; <code>sourcedata</code> <code>MapSourceDataEvent</code> <code>sourcedataabort</code> <code>MapSourceDataEvent</code> <code>sourcedataloading</code> <code>MapSourceDataEvent</code> <code>styledata</code> <code>MapStyleDataEvent</code> <code>styledataloading</code> <code>MapStyleDataEvent</code> <code>styleimagemissing</code> <code>MapStyleImageMissingEvent</code> <code>terrain</code> <code>MapTerrainEvent</code> <code>tiledataloading</code> <code>MapDataEvent</code> <code>touchcancel</code> <code>MapTouchEvent</code> <code>touchend</code> <code>MapTouchEvent</code> <code>touchmove</code> <code>MapTouchEvent</code> <code>touchstart</code> <code>MapTouchEvent</code> <code>webglcontextlost</code> <code>MapContextEvent</code> <code>webglcontextrestored</code> <code>MapContextEvent</code> <code>wheel</code> <code>MapWheelEvent</code> <code>zoom</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; <code>zoomend</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; <code>zoomstart</code> <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt;"},{"location":"API/modules/maplibregl/#defined-in_6","title":"Defined in","text":"<p>src/ui/events.ts:339</p>"},{"location":"API/modules/maplibregl/#maplibrezoomevent","title":"MapLibreZoomEvent","text":"<p>\u01ac MapLibreZoomEvent: <code>Object</code></p> <p>A <code>MapLibreZoomEvent</code> is the event type for the boxzoom-related map events emitted by the BoxZoomHandler.</p>"},{"location":"API/modules/maplibregl/#type-declaration_4","title":"Type declaration","text":"Name Type <code>originalEvent</code> <code>MouseEvent</code> <code>target</code> <code>Map</code> <code>type</code> <code>\"boxzoomstart\"</code> | <code>\"boxzoomend\"</code> | <code>\"boxzoomcancel\"</code>"},{"location":"API/modules/maplibregl/#defined-in_7","title":"Defined in","text":"<p>src/ui/events.ts:275</p>"},{"location":"API/modules/maplibregl/#paddingoptions","title":"PaddingOptions","text":"<p>\u01ac PaddingOptions: <code>Object</code></p> <p>Options for setting padding on calls to methods such as fitBounds, fitScreenCoordinates, and setPadding. Adjust these options to set the amount of padding in pixels added to the edges of the canvas. Set a uniform padding on all edges or individual values for each edge. All properties of this object must be non-negative integers.</p> <p><code>Example</code></p> <pre><code>var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\npadding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <p><code>Example</code></p> <pre><code>var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\npadding: 20\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Fit to the bounds of a LineString</li> <li>Fit a map to a bounding box</li> </ul>"},{"location":"API/modules/maplibregl/#type-declaration_5","title":"Type declaration","text":"Name Type <code>bottom</code> <code>number</code> <code>left</code> <code>number</code> <code>right</code> <code>number</code> <code>top</code> <code>number</code>"},{"location":"API/modules/maplibregl/#defined-in_8","title":"Defined in","text":"<p>src/geo/edge_insets.ts:117</p>"},{"location":"API/modules/maplibregl/#pointlike","title":"PointLike","text":"<p>\u01ac PointLike: <code>Point</code> | [<code>number</code>, <code>number</code>]</p> <p>A Point or an array of two numbers representing <code>x</code> and <code>y</code> screen coordinates in pixels.</p> <p><code>Example</code></p> <pre><code>var p1 = new Point(-77, 38); // a PointLike which is a Point\nvar p2 = [-77, 38]; // a PointLike which is an array of two numbers\n</code></pre>"},{"location":"API/modules/maplibregl/#defined-in_9","title":"Defined in","text":"<p>src/ui/camera.ts:26</p>"},{"location":"API/modules/maplibregl/#possiblyevaluatedvalue","title":"PossiblyEvaluatedValue","text":"<p>\u01ac <code>Private</code> PossiblyEvaluatedValue&lt;<code>T</code>&gt;: { <code>kind</code>: <code>\"constant\"</code> ; <code>value</code>: <code>T</code>  } | <code>SourceExpression</code> | <code>CompositeExpression</code></p> <p>\"Possibly evaluated value\" is an intermediate stage in the evaluation chain for both paint and layout property values. The purpose of this stage is to optimize away unnecessary recalculations for data-driven properties. Code which uses data-driven property values must assume that the value is dependent on feature data, and request that it be evaluated for each feature. But when that property value is in fact a constant or camera function, the calculation will not actually depend on the feature, and we can benefit from returning the prior result of having done the evaluation once, ahead of time, in an intermediate step whose inputs are just the value and \"global\" parameters such as current zoom level.</p> <p><code>PossiblyEvaluatedValue</code> represents the three possible outcomes of this step: if the input value was a constant or camera expression, then the \"possibly evaluated\" result is a constant value. Otherwise, the input value was either a source or composite expression, and we must defer final evaluation until supplied a feature. We separate the source and composite cases because they are handled differently when generating GL attributes, buffers, and uniforms.</p> <p>Note that <code>PossiblyEvaluatedValue</code> (and <code>PossiblyEvaluatedPropertyValue</code>, below) are not used for properties that do not allow data-driven values. For such properties, we know that the \"possibly evaluated\" result is always a constant scalar value. See below.</p>"},{"location":"API/modules/maplibregl/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/modules/maplibregl/#defined-in_10","title":"Defined in","text":"<p>src/style/properties.ts:401</p>"},{"location":"API/modules/maplibregl/#requestparameters","title":"RequestParameters","text":"<p>\u01ac RequestParameters: <code>Object</code></p> <p>A <code>RequestParameters</code> object to be returned from Map.options.transformRequest callbacks.</p> <p><code>Example</code></p> <pre><code>// use transformRequest to modify requests that begin with `http://myHost`\ntransformRequest: function(url, resourceType) {\nif (resourceType === 'Source' &amp;&amp; url.indexOf('http://myHost') &gt; -1) {\nreturn {\nurl: url.replace('http', 'https'),\nheaders: { 'my-custom-header': true },\ncredentials: 'include'  // Include cookies for cross-origin requests\n}\n}\n}\n</code></pre>"},{"location":"API/modules/maplibregl/#type-declaration_6","title":"Type declaration","text":"Name Type <code>body?</code> <code>string</code> <code>collectResourceTiming?</code> <code>boolean</code> <code>credentials?</code> <code>\"same-origin\"</code> | <code>\"include\"</code> <code>headers?</code> <code>any</code> <code>method?</code> <code>\"GET\"</code> | <code>\"POST\"</code> | <code>\"PUT\"</code> <code>type?</code> <code>\"string\"</code> | <code>\"json\"</code> | <code>\"arrayBuffer\"</code> | <code>\"image\"</code> <code>url</code> <code>string</code>"},{"location":"API/modules/maplibregl/#defined-in_11","title":"Defined in","text":"<p>src/util/ajax.ts:30</p>"},{"location":"API/modules/maplibregl/#symbolquad","title":"SymbolQuad","text":"<p>\u01ac <code>Private</code> SymbolQuad: <code>Object</code></p> <p>A textured quad for rendering a single icon or glyph.</p> <p>The zoom range the glyph can be shown is defined by minScale and maxScale.</p> <p><code>Param</code></p> <p>The offset of the top left corner from the anchor.</p> <p><code>Param</code></p> <p>The offset of the top right corner from the anchor.</p> <p><code>Param</code></p> <p>The offset of the bottom left corner from the anchor.</p> <p><code>Param</code></p> <p>The offset of the bottom right corner from the anchor.</p> <p><code>Param</code></p> <p>The texture coordinates.</p>"},{"location":"API/modules/maplibregl/#type-declaration_7","title":"Type declaration","text":"Name Type <code>bl</code> <code>Point</code> <code>br</code> <code>Point</code> <code>glyphOffset</code> [<code>number</code>, <code>number</code>] <code>isSDF</code> <code>boolean</code> <code>minFontScaleX</code> <code>number</code> <code>minFontScaleY</code> <code>number</code> <code>pixelOffsetBR</code> <code>Point</code> <code>pixelOffsetTL</code> <code>Point</code> <code>sectionIndex</code> <code>number</code> <code>tex</code> { <code>h</code>: <code>number</code> ; <code>w</code>: <code>number</code> ; <code>x</code>: <code>number</code> ; <code>y</code>: <code>number</code>  } <code>tex.h</code> <code>number</code> <code>tex.w</code> <code>number</code> <code>tex.x</code> <code>number</code> <code>tex.y</code> <code>number</code> <code>tl</code> <code>Point</code> <code>tr</code> <code>Point</code> <code>writingMode</code> <code>any</code> | <code>void</code>"},{"location":"API/modules/maplibregl/#defined-in_12","title":"Defined in","text":"<p>src/symbol/quads.ts:28</p>"},{"location":"API/modules/maplibregl/#transformstylefunction","title":"TransformStyleFunction","text":"<p>\u01ac TransformStyleFunction: (<code>previous</code>: <code>StyleSpecification</code> | <code>undefined</code>, <code>next</code>: <code>StyleSpecification</code>) =&gt; <code>StyleSpecification</code></p>"},{"location":"API/modules/maplibregl/#type-declaration_8","title":"Type declaration","text":"<p>\u25b8 (<code>previous</code>, <code>next</code>): <code>StyleSpecification</code></p> <p>Part of setStyle options, transformStyle is a convenience function that allows to modify a style after it is fetched but before it is committed to the map state this function exposes previous and next styles, it can be commonly used to support a range of functionalities like:      when previous style carries certain 'state' that needs to be carried over to a new style gracefully      when a desired style is a certain combination of previous and incoming style      when an incoming style requires modification based on external state</p> <p><code>Example</code></p> <pre><code>map.setStyle('https://demotiles.maplibre.org/style.json', {\ntransformStyle: (previousStyle, nextStyle) =&gt; ({\n...nextStyle,\nsources: {\n...nextStyle.sources,\n// copy a source from previous style\n'osm': previousStyle.sources.osm\n},\nlayers: [\n// background layer\nnextStyle.layers[0],\n// copy a layer from previous style\npreviousStyle.layers[0],\n// other layers from the next style\n...nextStyle.layers.slice(1).map(layer =&gt; {\n// hide the layers we don't need from demotiles style\nif (layer.id.startsWith('geolines')) {\nlayer.layout = {...layer.layout || {}, visibility: 'none'};\n// filter out US polygons\n} else if (layer.id.startsWith('coastline') || layer.id.startsWith('countries')) {\nlayer.filter = ['!=', ['get', 'ADM0_A3'], 'USA'];\n}\nreturn layer;\n})\n]\n})\n});\n</code></pre>"},{"location":"API/modules/maplibregl/#parameters","title":"Parameters","text":"Name Type <code>previous</code> <code>StyleSpecification</code> | <code>undefined</code> <code>next</code> <code>StyleSpecification</code>"},{"location":"API/modules/maplibregl/#returns","title":"Returns","text":"<p><code>StyleSpecification</code></p> <p>resulting style that will to be applied to the map</p>"},{"location":"API/modules/maplibregl/#defined-in_13","title":"Defined in","text":"<p>src/style/style.ts:145</p>"},{"location":"examples/","title":"Exmaples","text":""},{"location":"examples/#display-buildings-in-3d","title":"Display buildings in 3D","text":"<p>Use extrusions to display buildings' height in 3D.</p>"},{"location":"examples/#extrude-polygons-for-3d-indoor-mapping","title":"Extrude polygons for 3D indoor mapping","text":"<p>Create a 3D indoor map with the fill-extrude-height paint property.</p>"},{"location":"examples/#3d-terrain","title":"3D Terrain","text":"<p>Go beyond hillshade and show elevation in actual 3D.</p>"},{"location":"examples/#add-a-3d-model-with-babylonjs","title":"Add a 3D model with babylon.js","text":"<p>Use a custom style layer with babylon.js to add a 3D model to the map.</p>"},{"location":"examples/#add-a-3d-model-with-threejs","title":"Add a 3D model with three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to the map.</p>"},{"location":"examples/#add-a-default-marker","title":"Add a default marker","text":"<p>Add a default marker to the map.</p>"},{"location":"examples/#add-an-animated-icon-to-the-map","title":"Add an animated icon to the map","text":"<p>Add an animated icon to the map that was generated at runtime with the Canvas API.</p>"},{"location":"examples/#add-a-generated-icon-to-the-map","title":"Add a generated icon to the map","text":"<p>Add an icon to the map that was generated at runtime.</p>"},{"location":"examples/#generate-and-add-a-missing-icon-to-the-map","title":"Generate and add a missing icon to the map","text":"<p>Dynamically generate a missing icon at runtime and add it to the map.</p>"},{"location":"examples/#add-a-stretchable-image-to-the-map","title":"Add a stretchable image to the map","text":"<p>Use a stretchable image as a background for text.</p>"},{"location":"examples/#add-an-icon-to-the-map","title":"Add an icon to the map","text":"<p>Add an icon to the map from an external URL and use it in a symbol layer.</p>"},{"location":"examples/#animate-a-line","title":"Animate a line","text":"<p>Animate a line by updating a GeoJSON source on each frame.</p>"},{"location":"examples/#animate-map-camera-around-a-point","title":"Animate map camera around a point","text":"<p>Animate the map camera around a point.</p>"},{"location":"examples/#animate-a-series-of-images","title":"Animate a series of images","text":"<p>Use a series of image sources to create an animation.</p>"},{"location":"examples/#animate-a-marker","title":"Animate a marker","text":"<p>Animate the position of a marker by updating its location on each frame.</p>"},{"location":"examples/#animate-a-point","title":"Animate a point","text":"<p>Animate the position of a point by updating a GeoJSON source on each frame.</p>"},{"location":"examples/#animate-a-point-along-a-route","title":"Animate a point along a route","text":"<p>Use Turf to smoothly animate a point along the distance of a line.</p>"},{"location":"examples/#change-the-default-position-for-attribution","title":"Change the default position for attribution","text":"<p>Place attribution in the top-left position when initializing a map.</p>"},{"location":"examples/#customize-camera-animations","title":"Customize camera animations","text":"<p>Customize camera animations using AnimationOptions.</p>"},{"location":"examples/#add-a-canvas-source","title":"Add a canvas source","text":"<p>Add a canvas source to the map.</p>"},{"location":"examples/#center-the-map-on-a-clicked-symbol","title":"Center the map on a clicked symbol","text":"<p>Use events and flyTo to center the map on a symbol.</p>"},{"location":"examples/#change-building-color-based-on-zoom-level","title":"Change building color based on zoom level","text":"<p>Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.</p>"},{"location":"examples/#change-the-case-of-labels","title":"Change the case of labels","text":"<p>Use the upcase and downcase expressions to change the case of labels.</p>"},{"location":"examples/#check-if-maplibre-gl-js-is-supported","title":"Check if MapLibre GL JS is supported","text":"<p>Check for MapLibre GL browser support.</p>"},{"location":"examples/#display-html-clusters-with-custom-properties","title":"Display HTML clusters with custom properties","text":"<p>Extend clustering with HTML markers and custom property expressions. </p>"},{"location":"examples/#create-and-style-clusters","title":"Create and style clusters","text":"<p>Use MapLibre GL JS' built-in functions to visualize points as clusters.</p>"},{"location":"examples/#change-a-layers-color-with-buttons","title":"Change a layer's color with buttons","text":"<p>Use setPaintProperty to change a layer's fill color.</p>"},{"location":"examples/#add-contour-lines","title":"Add Contour Lines","text":"<p>Add contour lines to your map from a raster-dem source.</p>"},{"location":"examples/#add-custom-icons-with-markers","title":"Add custom icons with Markers","text":"<p>Add custom marker icons to your map.</p>"},{"location":"examples/#add-a-custom-style-layer","title":"Add a custom style layer","text":"<p>Use a custom style layer to render custom WebGL content.</p>"},{"location":"examples/#style-lines-with-a-data-driven-property","title":"Style lines with a data-driven property","text":"<p>Create a visualization with a data expression for line-color.</p>"},{"location":"examples/#disable-map-rotation","title":"Disable map rotation","text":"<p>Prevent users from rotating a map.</p>"},{"location":"examples/#disable-scroll-zoom","title":"Disable scroll zoom","text":"<p>Prevent scroll from zooming a map.</p>"},{"location":"examples/#display-and-style-rich-text-labels","title":"Display and style rich text labels","text":"<p>Use the format expression to display country labels in both English and in the local language.</p>"},{"location":"examples/#create-a-draggable-marker","title":"Create a draggable Marker","text":"<p>Drag the marker to a new location on a map and populate its coordinates in a display.</p>"},{"location":"examples/#create-a-draggable-point","title":"Create a draggable point","text":"<p>Drag the point to a new location on a map and populate its coordinates in a display.</p>"},{"location":"examples/#use-a-fallback-image","title":"Use a fallback image","text":"<p>Use a coalesce expression to display another image when a requested image is not available.</p>"},{"location":"examples/#add-a-pattern-to-a-polygon","title":"Add a pattern to a polygon","text":"<p>Use fill-pattern to draw a polygon from a repeating image pattern.</p>"},{"location":"examples/#filter-symbols-by-text-input","title":"Filter symbols by text input","text":"<p>Filter symbols by icon name by typing in a text input.</p>"},{"location":"examples/#filter-symbols-by-toggling-a-list","title":"Filter symbols by toggling a list","text":"<p>Filter a set of symbols based on a property value in the data.</p>"},{"location":"examples/#fit-a-map-to-a-bounding-box","title":"Fit a map to a bounding box","text":"<p>Fit the map to a specific area, regardless of the pixel size of the map.</p>"},{"location":"examples/#slowly-fly-to-a-location","title":"Slowly fly to a location","text":"<p>Use flyTo with flyOptions to slowly zoom to a location.</p>"},{"location":"examples/#fly-to-a-location","title":"Fly to a location","text":"<p>Use flyTo to smoothly interpolate between locations.</p>"},{"location":"examples/#view-a-fullscreen-map","title":"View a fullscreen map","text":"<p>Toggle between current view and fullscreen mode.</p>"},{"location":"examples/#navigate-the-map-with-game-like-controls","title":"Navigate the map with game-like controls","text":"<p>Use the keyboard's arrow keys to move around the map with game-like controls.</p>"},{"location":"examples/#geocode-with-nominatim","title":"Geocode with Nominatim","text":"<p>Geocode with Nominatim and the maplibre-gl-geocoder plugin.</p>"},{"location":"examples/#add-a-new-layer-below-labels","title":"Add a new layer below labels","text":"<p>Use the second argument of addLayer to add a layer below labels.</p>"},{"location":"examples/#add-a-geojson-line","title":"Add a GeoJSON line","text":"<p>Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.</p>"},{"location":"examples/#draw-geojson-points","title":"Draw GeoJSON points","text":"<p>Draw points from a GeoJSON collection to a map.</p>"},{"location":"examples/#add-a-geojson-polygon","title":"Add a GeoJSON polygon","text":"<p>Style a polygon with the fill layer type.</p>"},{"location":"examples/#create-a-heatmap-layer","title":"Create a heatmap layer","text":"<p>Visualize earthquake frequency by location using a heatmap layer.</p>"},{"location":"examples/#create-a-hover-effect","title":"Create a hover effect","text":"<p>Use events and feature states to create a per feature hover effect.</p>"},{"location":"examples/#display-a-non-interactive-map","title":"Display a non-interactive map","text":"<p>Disable interactivity to create a static map.</p>"},{"location":"examples/#jump-to-a-series-of-locations","title":"Jump to a series of locations","text":"<p>Use the jumpTo function to showcase multiple locations.</p>"},{"location":"examples/#change-a-maps-language","title":"Change a map's language","text":"<p>Use setLayoutProperty to switch languages dynamically.</p>"},{"location":"examples/#display-line-that-crosses-180th-meridian","title":"Display line that crosses 180th meridian","text":"<p>Draw a line across the 180th meridian using a GeoJSON source.</p>"},{"location":"examples/#create-a-gradient-line-using-an-expression","title":"Create a gradient line using an expression","text":"<p>Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.</p>"},{"location":"examples/#add-live-realtime-data","title":"Add live realtime data","text":"<p>Use realtime GeoJSON data streams to move a symbol on your map.</p>"},{"location":"examples/#update-a-feature-in-realtime","title":"Update a feature in realtime","text":"<p>Change an existing feature on your map in real-time by updating its data.</p>"},{"location":"examples/#view-local-geojson-experimental","title":"View local GeoJSON (experimental)","text":"<p>View local GeoJSON with experimental File System Access API.</p>"},{"location":"examples/#view-local-geojson","title":"View local GeoJSON","text":"<p>View local GeoJSON without server upload.</p>"},{"location":"examples/#use-locally-generated-ideographs","title":"Use locally generated ideographs","text":"<p>Use the localIdeographFontFamily setting to speed up map load times by using locally available fonts instead of font data fetched from the server.</p>"},{"location":"examples/#locate-the-user","title":"Locate the user","text":"<p>Geolocate the user and then track their current location on the map using the GeolocateControl.</p>"},{"location":"examples/#add-a-raster-tile-source","title":"Add a raster tile source","text":"<p>Add a third-party raster source to the map.</p>"},{"location":"examples/#show-drawn-polygon-area","title":"Show drawn polygon area","text":"<p>Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.</p>"},{"location":"examples/#add-support-for-right-to-left-scripts","title":"Add support for right-to-left scripts","text":"<p>Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.</p>"},{"location":"examples/#measure-distances","title":"Measure distances","text":"<p>Click points on a map to create lines that measure distanced using turf.length.</p>"},{"location":"examples/#get-coordinates-of-the-mouse-pointer","title":"Get coordinates of the mouse pointer","text":"<p>Show mouse position on hover with pixel and latitude and longitude coordinates.</p>"},{"location":"examples/#add-multiple-geometries-from-one-geojson-source","title":"Add multiple geometries from one GeoJSON source","text":"<p>Add a polygon and circle layer from the same GeoJSON source.</p>"},{"location":"examples/#display-map-navigation-controls","title":"Display map navigation controls","text":"<p>Add zoom and rotation controls to the map.</p>"},{"location":"examples/#offset-the-vanishing-point-using-padding","title":"Offset the vanishing point using padding","text":"<p>Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.</p>"},{"location":"examples/#show-polygon-information-on-click","title":"Show polygon information on click","text":"<p>When a user clicks a polygon, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup-on-click","title":"Display a popup on click","text":"<p>When a user clicks a symbol, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup-on-hover","title":"Display a popup on hover","text":"<p>When a user hovers over a custom marker, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup","title":"Display a popup","text":"<p>Add a popup to the map.</p>"},{"location":"examples/#get-features-under-the-mouse-pointer","title":"Get features under the mouse pointer","text":"<p>Use queryRenderedFeatures to show properties of hovered-over map elements.</p>"},{"location":"examples/#render-world-copies","title":"Render world copies","text":"<p>Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.</p>"},{"location":"examples/#restrict-map-panning-to-an-area","title":"Restrict map panning to an area","text":"<p>Prevent a map from being panned to a different place by setting maxBounds.</p>"},{"location":"examples/#display-a-satellite-map","title":"Display a satellite map","text":"<p>Display a satellite raster baselayer.</p>"},{"location":"examples/#fly-to-a-location-based-on-scroll-position","title":"Fly to a location based on scroll position","text":"<p>Scroll down through the story and the map will fly to the chapter's location.</p>"},{"location":"examples/#set-pitch-and-bearing","title":"Set pitch and bearing","text":"<p>Initialize a map with pitch and bearing camera options.</p>"},{"location":"examples/#attach-a-popup-to-a-marker-instance","title":"Attach a popup to a marker instance","text":"<p>Attach a popup to a marker and display it on click.</p>"},{"location":"examples/#display-a-map","title":"Display a map","text":"<p>Initialize a map in an HTML element with MapLibre GL JS.</p>"},{"location":"examples/#add-a-third-party-vector-tile-source","title":"Add a third party vector tile source","text":"<p>Render vector data provided by Mapillary.</p>"},{"location":"examples/#create-a-time-slider","title":"Create a time slider","text":"<p>Visualize earthquakes with a range slider.</p>"},{"location":"examples/#toggle-interactions","title":"Toggle interactions","text":"<p>Enable or disable UI handlers on a map.</p>"},{"location":"examples/#variable-label-placement","title":"Variable label placement","text":"<p>Use text-variable-anchor to allow high priority labels to shift position to stay on the map.</p>"},{"location":"examples/#add-a-vector-tile-source","title":"Add a vector tile source","text":"<p>Add a vector source to a map.</p>"},{"location":"examples/#add-a-video","title":"Add a video","text":"<p>Display a video on top of a satellite raster baselayer.</p>"},{"location":"examples/#visualize-population-density","title":"Visualize population density","text":"<p>Use a variable binding expression to calculate and display population density.</p>"},{"location":"examples/#add-a-wms-source","title":"Add a WMS source","text":"<p>Add an external Web Map Service raster layer to the map using addSource's tiles option.</p>"},{"location":"examples/#fit-to-the-bounds-of-a-linestring","title":"Fit to the bounds of a LineString","text":"<p>Get the bounds of a LineString.</p>"},{"location":"examples/3d-buildings/","title":"Display buildings in 3D","text":"<p>Use extrusions to display buildings' height in 3D.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display buildings in 3D&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use extrusions to display buildings' height in 3D.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.0066, 40.7135],\nzoom: 15.5,\npitch: 45,\nbearing: -17.6,\ncontainer: 'map',\nantialias: true\n});\n// The 'building' layer in the streets vector source contains building-height\n// data from OpenStreetMap.\nmap.on('load', function () {\n// Insert the layer beneath any symbol layer.\nvar layers = map.getStyle().layers;\nvar labelLayerId;\nfor (var i = 0; i &lt; layers.length; i++) {\nif (layers[i].type === 'symbol' &amp;&amp; layers[i].layout['text-field']) {\nlabelLayerId = layers[i].id;\nbreak;\n}\n}\nmap.addLayer(\n{\n'id': '3d-buildings',\n'source': 'openmaptiles',\n'source-layer': 'building',\n'filter': ['==', 'extrude', 'true'],\n'type': 'fill-extrusion',\n'minzoom': 15,\n'paint': {\n'fill-extrusion-color': '#aaa',\n// use an 'interpolate' expression to add a smooth transition effect to the\n// buildings as the user zooms in\n'fill-extrusion-height': [\n'interpolate',\n['linear'],\n['zoom'],\n15,\n0,\n15.05,\n['get', 'height']\n],\n'fill-extrusion-base': [\n'interpolate',\n['linear'],\n['zoom'],\n15,\n0,\n15.05,\n['get', 'min_height']\n],\n'fill-extrusion-opacity': 0.6\n}\n},\nlabelLayerId\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/3d-extrusion-floorplan/","title":"Extrude polygons for 3D indoor mapping","text":"<p>Create a 3D indoor map with the fill-extrude-height paint property.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Extrude polygons for 3D indoor mapping&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Create a 3D indoor map with the fill-extrude-height paint property.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: {\n'id': 'raster',\n'version': 8,\n'name': 'Raster tiles',\n'center': [0, 0],\n'zoom': 0,\n'sources': {\n'raster-tiles': {\n'type': 'raster',\n'tiles': ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n'tileSize': 256,\n'minzoom': 0,\n'maxzoom': 19\n}\n},\n'layers': [\n{\n'id': 'background',\n'type': 'background',\n'paint': {\n'background-color': '#e0dfdf'\n}\n},\n{\n'id': 'simple-tiles',\n'type': 'raster',\n'source': 'raster-tiles'\n}\n]\n},\ncenter: [-87.61694, 41.86625],\nzoom: 15.99,\npitch: 40,\nbearing: 20,\nantialias: true\n});\nmap.on('load', function () {\nmap.addSource('floorplan', {\n// GeoJSON Data source used in vector tiles, documented at\n// https://gist.github.com/ryanbaumann/a7d970386ce59d11c16278b90dde094d\n'type': 'geojson',\n'data': 'https://maplibre.org/maplibre-gl-js-docs/assets/indoor-3d-map.geojson'\n});\nmap.addLayer({\n'id': 'room-extrusion',\n'type': 'fill-extrusion',\n'source': 'floorplan',\n'paint': {\n// See the MapLibre Style Specification for details on data expressions.\n// https://maplibre.org/maplibre-style-spec/expressions/\n// Get the fill-extrusion-color from the source 'color' property.\n'fill-extrusion-color': ['get', 'color'],\n// Get fill-extrusion-height from the source 'height' property.\n'fill-extrusion-height': ['get', 'height'],\n// Get fill-extrusion-base from the source 'base_height' property.\n'fill-extrusion-base': ['get', 'base_height'],\n// Make extrusions slightly opaque for see through indoor walls.\n'fill-extrusion-opacity': 0.5\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/3d-terrain/","title":"3D Terrain","text":"<p>Go beyond hillshade and show elevation in actual 3D.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;3D Terrain&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Go beyond hillshade and show elevation in actual 3D.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = (window.map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 12,\ncenter: [11.39085, 47.27574],\npitch: 52,\nhash: true,\nstyle: {\nversion: 8,\nsources: {\nosm: {\ntype: 'raster',\ntiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\ntileSize: 256,\nattribution: '&amp;copy; OpenStreetMap Contributors',\nmaxzoom: 19\n},\n// Use a different source for terrain and hillshade layers, to improve render quality\nterrainSource: {\ntype: 'raster-dem',\nurl: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\ntileSize: 256\n},\nhillshadeSource: {\ntype: 'raster-dem',\nurl: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\ntileSize: 256\n}\n},\nlayers: [\n{\nid: 'osm',\ntype: 'raster',\nsource: 'osm'\n},\n{\nid: 'hills',\ntype: 'hillshade',\nsource: 'hillshadeSource',\nlayout: { visibility: 'visible' },\npaint: { 'hillshade-shadow-color': '#473B24' }\n}\n],\nterrain: {\nsource: 'terrainSource',\nexaggeration: 1\n}\n},\nmaxZoom: 18,\nmaxPitch: 85\n}));\nmap.addControl(\nnew maplibregl.NavigationControl({\nvisualizePitch: true,\nshowZoom: true,\nshowCompass: true\n})\n);\nmap.addControl(\nnew maplibregl.TerrainControl({\nsource: 'terrainSource',\nexaggeration: 1\n})\n);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-3d-model-babylon/","title":"Add a 3D model with babylon.js","text":"<p>Use a custom style layer with babylon.js to add a 3D model to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a 3D model with babylon.js&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a custom style layer with babylon.js to add a 3D model to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"https://unpkg.com/babylonjs@5.42.2/babylon.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/babylonjs-loaders@5.42.2/babylonjs.loaders.min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar BABYLON = window.BABYLON;\nvar map = (window.map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 18,\ncenter: [148.9819, -35.3981],\npitch: 60,\nantialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n}));\n// World matrix parameters\nvar worldOrigin = [148.9819, -35.39847];\nvar worldAltitude = 0;\n// Maplibre.js default coordinate system (no rotations)\n// +x east, -y north, +z up\n//var worldRotate = [0, 0, 0];\n// Babylon.js default coordinate system\n// +x east, +y up, +z north\nvar worldRotate = [Math.PI / 2, 0, 0];\n// Calculate mercator coordinates and scale\nvar worldOriginMercator = maplibregl.MercatorCoordinate.fromLngLat(\nworldOrigin,\nworldAltitude\n);\nconst worldScale = worldOriginMercator.meterInMercatorCoordinateUnits();\n// Calculate world matrix\nvar worldMatrix = BABYLON.Matrix.Compose(\nnew BABYLON.Vector3(worldScale, worldScale, worldScale),\nBABYLON.Quaternion.FromEulerAngles(\nworldRotate[0],\nworldRotate[1],\nworldRotate[2]\n),\nnew BABYLON.Vector3(\nworldOriginMercator.x,\nworldOriginMercator.y,\nworldOriginMercator.z\n)\n);\n// configuration of the custom layer for a 3D model per the CustomLayerInterface\nvar customLayer = {\nid: '3d-model',\ntype: 'custom',\nrenderingMode: '3d',\nonAdd: function (map, gl) {\nthis.engine = new BABYLON.Engine(\ngl,\ntrue,\n{\nuseHighPrecisionMatrix: true // Important to prevent jitter at mercator scale\n},\ntrue\n);\nthis.scene = new BABYLON.Scene(this.engine);\nthis.scene.autoClear = false;\nthis.scene.detachControl();\nthis.scene.beforeRender = () =&gt; {\nthis.engine.wipeCaches(true);\n};\n// create simple camera (will have its project matrix manually calculated)\nthis.camera = new BABYLON.Camera(\n'Camera',\nnew BABYLON.Vector3(0, 0, 0),\nthis.scene\n);\n// create simple light\nconst light = new BABYLON.HemisphericLight(\n'light1',\nnew BABYLON.Vector3(0, 0, 100),\nthis.scene\n);\nlight.intensity = 0.7;\n// Add debug axes viewer, positioned at origin, 10 meter axis lengths\nnew BABYLON.AxesViewer(this.scene, 10);\n// load GLTF model in to the scene\nBABYLON.SceneLoader.LoadAssetContainerAsync(\n'https://maplibre.org/maplibre-gl-js-docs/assets/34M_17/34M_17.gltf',\n'',\nthis.scene\n).then((modelContainer) =&gt; {\nmodelContainer.addAllToScene();\nconst rootMesh = modelContainer.createRootMesh();\n// If using maplibre.js coordinate system (+z up)\n//rootMesh.rotation.x = Math.PI/2\n// Create a second mesh\nconst rootMesh2 = rootMesh.clone();\n// Position in babylon.js coordinate system\nrootMesh2.position.x = 25; // +east, meters\nrootMesh2.position.z = 25; // +north, meters\n});\nthis.map = map;\n},\nrender: function (gl, matrix) {\nconst cameraMatrix = BABYLON.Matrix.FromArray(matrix);\n// world-view-projection matrix\nconst wvpMatrix = worldMatrix.multiply(cameraMatrix);\nthis.camera.freezeProjectionMatrix(wvpMatrix);\nthis.scene.render(false);\nthis.map.triggerRepaint();\n}\n};\nmap.on('style.load', function () {\nmap.addLayer(customLayer);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-3d-model/","title":"Add a 3D model with three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a 3D model with three.js&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a custom style layer with three.js to add a 3D model to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"https://unpkg.com/three@0.147.0/build/three.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/three@0.147.0/examples/js/loaders/GLTFLoader.js\"&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = (window.map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 18,\ncenter: [148.9819, -35.3981],\npitch: 60,\nantialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n}));\n// parameters to ensure the model is georeferenced correctly on the map\nvar modelOrigin = [148.9819, -35.39847];\nvar modelAltitude = 0;\nvar modelRotate = [Math.PI / 2, 0, 0];\nvar modelAsMercatorCoordinate = maplibregl.MercatorCoordinate.fromLngLat(\nmodelOrigin,\nmodelAltitude\n);\n// transformation parameters to position, rotate and scale the 3D model onto the map\nvar modelTransform = {\ntranslateX: modelAsMercatorCoordinate.x,\ntranslateY: modelAsMercatorCoordinate.y,\ntranslateZ: modelAsMercatorCoordinate.z,\nrotateX: modelRotate[0],\nrotateY: modelRotate[1],\nrotateZ: modelRotate[2],\n/* Since our 3D model is in real world meters, a scale transform needs to be\n         * applied since the CustomLayerInterface expects units in MercatorCoordinates.\n         */\nscale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n};\nvar THREE = window.THREE;\n// configuration of the custom layer for a 3D model per the CustomLayerInterface\nvar customLayer = {\nid: '3d-model',\ntype: 'custom',\nrenderingMode: '3d',\nonAdd: function (map, gl) {\nthis.camera = new THREE.Camera();\nthis.scene = new THREE.Scene();\n// create two three.js lights to illuminate the model\nvar directionalLight = new THREE.DirectionalLight(0xffffff);\ndirectionalLight.position.set(0, -70, 100).normalize();\nthis.scene.add(directionalLight);\nvar directionalLight2 = new THREE.DirectionalLight(0xffffff);\ndirectionalLight2.position.set(0, 70, 100).normalize();\nthis.scene.add(directionalLight2);\n// use the three.js GLTF loader to add the 3D model to the three.js scene\nvar loader = new THREE.GLTFLoader();\nloader.load(\n'https://maplibre.org/maplibre-gl-js-docs/assets/34M_17/34M_17.gltf',\nfunction (gltf) {\nthis.scene.add(gltf.scene);\n}.bind(this)\n);\nthis.map = map;\n// use the MapLibre GL JS map canvas for three.js\nthis.renderer = new THREE.WebGLRenderer({\ncanvas: map.getCanvas(),\ncontext: gl,\nantialias: true\n});\nthis.renderer.autoClear = false;\n},\nrender: function (gl, matrix) {\nvar rotationX = new THREE.Matrix4().makeRotationAxis(\nnew THREE.Vector3(1, 0, 0),\nmodelTransform.rotateX\n);\nvar rotationY = new THREE.Matrix4().makeRotationAxis(\nnew THREE.Vector3(0, 1, 0),\nmodelTransform.rotateY\n);\nvar rotationZ = new THREE.Matrix4().makeRotationAxis(\nnew THREE.Vector3(0, 0, 1),\nmodelTransform.rotateZ\n);\nvar m = new THREE.Matrix4().fromArray(matrix);\nvar l = new THREE.Matrix4()\n.makeTranslation(\nmodelTransform.translateX,\nmodelTransform.translateY,\nmodelTransform.translateZ\n)\n.scale(\nnew THREE.Vector3(\nmodelTransform.scale,\n-modelTransform.scale,\nmodelTransform.scale\n)\n)\n.multiply(rotationX)\n.multiply(rotationY)\n.multiply(rotationZ);\nthis.camera.projectionMatrix = m.multiply(l);\nthis.renderer.resetState();\nthis.renderer.render(this.scene, this.camera);\nthis.map.triggerRepaint();\n}\n};\nmap.on('style.load', function () {\nmap.addLayer(customLayer);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-marker/","title":"Add a default marker","text":"<p>Add a default marker to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a default marker&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a default marker to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [12.550343, 55.665957],\nzoom: 8\n});\nvar marker = new maplibregl.Marker()\n.setLngLat([12.550343, 55.665957])\n.addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-animated/","title":"Add an animated icon to the map","text":"<p>Add an animated icon to the map that was generated at runtime with the Canvas API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add an animated icon to the map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add an animated icon to the map that was generated at runtime with the Canvas API.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nvar size = 200;\n// implementation of StyleImageInterface to draw a pulsing dot icon on the map\n// see https://maplibre.org/maplibre-gl-js-docs/api/properties/#styleimageinterface for more info\nvar pulsingDot = {\nwidth: size,\nheight: size,\ndata: new Uint8Array(size * size * 4),\n// get rendering context for the map canvas when layer is added to the map\nonAdd: function () {\nvar canvas = document.createElement('canvas');\ncanvas.width = this.width;\ncanvas.height = this.height;\nthis.context = canvas.getContext('2d');\n},\n// called once before every frame where the icon will be used\nrender: function () {\nvar duration = 1000;\nvar t = (performance.now() % duration) / duration;\nvar radius = (size / 2) * 0.3;\nvar outerRadius = (size / 2) * 0.7 * t + radius;\nvar context = this.context;\n// draw outer circle\ncontext.clearRect(0, 0, this.width, this.height);\ncontext.beginPath();\ncontext.arc(\nthis.width / 2,\nthis.height / 2,\nouterRadius,\n0,\nMath.PI * 2\n);\ncontext.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\ncontext.fill();\n// draw inner circle\ncontext.beginPath();\ncontext.arc(\nthis.width / 2,\nthis.height / 2,\nradius,\n0,\nMath.PI * 2\n);\ncontext.fillStyle = 'rgba(255, 100, 100, 1)';\ncontext.strokeStyle = 'white';\ncontext.lineWidth = 2 + 4 * (1 - t);\ncontext.fill();\ncontext.stroke();\n// update this image's data with data from the canvas\nthis.data = context.getImageData(\n0,\n0,\nthis.width,\nthis.height\n).data;\n// continuously repaint the map, resulting in the smooth animation of the dot\nmap.triggerRepaint();\n// return `true` to let the map know that the image was updated\nreturn true;\n}\n};\nmap.on('load', function () {\nmap.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\nmap.addSource('points', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [0, 0]\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'points',\n'type': 'symbol',\n'source': 'points',\n'layout': {\n'icon-image': 'pulsing-dot'\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-generated/","title":"Add a generated icon to the map","text":"<p>Add an icon to the map that was generated at runtime.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a generated icon to the map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add an icon to the map that was generated at runtime.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nmap.on('load', function () {\nvar width = 64; // The image will be 64 pixels square\nvar bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\nvar data = new Uint8Array(width * width * bytesPerPixel);\nfor (var x = 0; x &lt; width; x++) {\nfor (var y = 0; y &lt; width; y++) {\nvar offset = (y * width + x) * bytesPerPixel;\ndata[offset + 0] = (y / width) * 255; // red\ndata[offset + 1] = (x / width) * 255; // green\ndata[offset + 2] = 128; // blue\ndata[offset + 3] = 255; // alpha\n}\n}\nmap.addImage('gradient', { width: width, height: width, data: data });\nmap.addSource('point', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [0, 0]\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'points',\n'type': 'symbol',\n'source': 'point',\n'layout': {\n'icon-image': 'gradient'\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-missing-generated/","title":"Generate and add a missing icon to the map","text":"<p>Dynamically generate a missing icon at runtime and add it to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Generate and add a missing icon to the map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Dynamically generate a missing icon at runtime and add it to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nmap.on('styleimagemissing', function (e) {\nvar id = e.id; // id of the missing image\n// check if this missing icon is one this function can generate\nvar prefix = 'square-rgb-';\nif (id.indexOf(prefix) !== 0) return;\n// extract the color from the id\nvar rgb = id.replace(prefix, '').split(',').map(Number);\nvar width = 64; // The image will be 64 pixels square\nvar bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\nvar data = new Uint8Array(width * width * bytesPerPixel);\nfor (var x = 0; x &lt; width; x++) {\nfor (var y = 0; y &lt; width; y++) {\nvar offset = (y * width + x) * bytesPerPixel;\ndata[offset + 0] = rgb[0]; // red\ndata[offset + 1] = rgb[1]; // green\ndata[offset + 2] = rgb[2]; // blue\ndata[offset + 3] = 255; // alpha\n}\n}\nmap.addImage(id, { width: width, height: width, data: data });\n});\nmap.on('load', function () {\nmap.addSource('points', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [0, 0]\n},\n'properties': {\n'color': '255,0,0'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [50, 0]\n},\n'properties': {\n'color': '255,209,28'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-50, 0]\n},\n'properties': {\n'color': '242,127,32'\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'points',\n'type': 'symbol',\n'source': 'points',\n'layout': {\n'icon-image': ['concat', 'square-rgb-', ['get', 'color']]\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-stretchable/","title":"Add a stretchable image to the map","text":"<p>Use a stretchable image as a background for text.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a stretchable image to the map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a stretchable image as a background for text.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 0.1\n});\nvar images = {\n'popup': 'https://maplibre.org/maplibre-gl-js-docs/assets/popup.png',\n'popup-debug':\n'https://maplibre.org/maplibre-gl-js-docs/assets/popup_debug.png'\n};\nloadImages(images, function (loadedImages) {\nmap.on('load', function () {\nmap.addImage('popup-debug', loadedImages['popup-debug'], {\n// The two (blue) columns of pixels that can be stretched horizontally:\n//   - the pixels between x: 25 and x: 55 can be stretched\n//   - the pixels between x: 85 and x: 115 can be stretched.\nstretchX: [\n[25, 55],\n[85, 115]\n],\n// The one (red) row of pixels that can be stretched vertically:\n//   - the pixels between y: 25 and y: 100 can be stretched\nstretchY: [[25, 100]],\n// This part of the image that can contain text ([x1, y1, x2, y2]):\ncontent: [25, 25, 115, 100],\n// This is a high-dpi image:\npixelRatio: 2\n});\nmap.addImage('popup', loadedImages['popup'], {\nstretchX: [\n[25, 55],\n[85, 115]\n],\nstretchY: [[25, 100]],\ncontent: [25, 25, 115, 100],\npixelRatio: 2\n});\nmap.addSource('points', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [40, -30]\n},\n'properties': {\n'image-name': 'popup-debug',\n'name': 'Line 1\\nLine 2\\nLine 3'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [40, 30]\n},\n'properties': {\n'image-name': 'popup',\n'name': 'Line 1\\nLine 2\\nLine 3'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-40, -30]\n},\n'properties': {\n'image-name': 'popup-debug',\n'name': 'One longer line'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-40, 30]\n},\n'properties': {\n'image-name': 'popup',\n'name': 'One longer line'\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'points',\n'type': 'symbol',\n'source': 'points',\n'layout': {\n'text-field': ['get', 'name'],\n'icon-text-fit': 'both',\n'icon-image': ['get', 'image-name'],\n'icon-overlap': 'always',\n'text-overlap': 'always'\n}\n});\n// the original, unstretched image for comparison\nmap.addSource('original', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [0, -70]\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'original',\n'type': 'symbol',\n'source': 'original',\n'layout': {\n'text-field': 'unstretched image',\n'icon-image': 'popup-debug',\n'icon-overlap': 'always',\n'text-overlap': 'always'\n}\n});\n});\n});\nfunction loadImages(urls, callback) {\nvar results = {};\nfor (var name in urls) {\nmap.loadImage(urls[name], makeCallback(name));\n}\nfunction makeCallback(name) {\nreturn function (err, image) {\nresults[name] = err ? null : image;\n// if all images are loaded, call the callback\nif (Object.keys(results).length === Object.keys(urls).length) {\ncallback(results);\n}\n};\n}\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image/","title":"Add an icon to the map","text":"<p>Add an icon to the map from an external URL and use it in a symbol layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add an icon to the map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add an icon to the map from an external URL and use it in a symbol layer.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nmap.on('load', function () {\nmap.loadImage(\n'https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png',\nfunction (error, image) {\nif (error) throw error;\nmap.addImage('cat', image);\nmap.addSource('point', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [0, 0]\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'points',\n'type': 'symbol',\n'source': 'point',\n'layout': {\n'icon-image': 'cat',\n'icon-size': 0.25\n}\n});\n}\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-line/","title":"Animate a line","text":"<p>Animate a line by updating a GeoJSON source on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Animate a line&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Animate a line by updating a GeoJSON source on each frame.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\nbutton {\nposition: absolute;\nmargin: 20px;\n}\n#pause::after {\ncontent: 'Pause';\n}\n#pause.pause::after {\ncontent: 'Play';\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"pause\"&gt;&lt;/button&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [0, 0],\nzoom: 0.5\n});\n// Create a GeoJSON source with an empty lineString.\nvar geojson = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'LineString',\n'coordinates': [[0, 0]]\n}\n}\n]\n};\nvar speedFactor = 30; // number of frames per longitude degree\nvar animation; // to store and cancel the animation\nvar startTime = 0;\nvar progress = 0; // progress = timestamp - startTime\nvar resetTime = false; // indicator of whether time reset is needed for the animation\nvar pauseButton = document.getElementById('pause');\nmap.on('load', function () {\nmap.addSource('line', {\n'type': 'geojson',\n'data': geojson\n});\n// add the line which will be modified in the animation\nmap.addLayer({\n'id': 'line-animation',\n'type': 'line',\n'source': 'line',\n'layout': {\n'line-cap': 'round',\n'line-join': 'round'\n},\n'paint': {\n'line-color': '#ed6498',\n'line-width': 5,\n'line-opacity': 0.8\n}\n});\nstartTime = performance.now();\nanimateLine();\n// click the button to pause or play\npauseButton.addEventListener('click', function () {\npauseButton.classList.toggle('pause');\nif (pauseButton.classList.contains('pause')) {\ncancelAnimationFrame(animation);\n} else {\nresetTime = true;\nanimateLine();\n}\n});\n// reset startTime and progress once the tab loses or gains focus\n// requestAnimationFrame also pauses on hidden tabs by default\ndocument.addEventListener('visibilitychange', function () {\nresetTime = true;\n});\n// animated in a circle as a sine wave along the map.\nfunction animateLine(timestamp) {\nif (resetTime) {\n// resume previous progress\nstartTime = performance.now() - progress;\nresetTime = false;\n} else {\nprogress = timestamp - startTime;\n}\n// restart if it finishes a loop\nif (progress &gt; speedFactor * 360) {\nstartTime = timestamp;\ngeojson.features[0].geometry.coordinates = [];\n} else {\nvar x = progress / speedFactor;\n// draw a sine wave with some math.\nvar y = Math.sin((x * Math.PI) / 90) * 40;\n// append new coordinates to the lineString\ngeojson.features[0].geometry.coordinates.push([x, y]);\n// then update the map\nmap.getSource('line').setData(geojson);\n}\n// Request the next frame of the animation.\nanimation = requestAnimationFrame(animateLine);\n}\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-camera-around-point/","title":"Animate map camera around a point","text":"<p>Animate the map camera around a point.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Animate map camera around a point&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Animate the map camera around a point.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-87.62712, 41.89033],\nzoom: 15.5,\npitch: 45\n});\nfunction rotateCamera(timestamp) {\n// clamp the rotation between 0 -360 degrees\n// Divide timestamp by 100 to slow rotation to ~10 degrees / sec\nmap.rotateTo((timestamp / 100) % 360, { duration: 0 });\n// Request the next frame of the animation.\nrequestAnimationFrame(rotateCamera);\n}\nmap.on('load', function () {\n// Start the animation.\nrotateCamera(0);\n// Add 3d buildings and remove label layers to enhance the map\nvar layers = map.getStyle().layers;\nfor (var i = 0; i &lt; layers.length; i++) {\nif (layers[i].type === 'symbol' &amp;&amp; layers[i].layout['text-field']) {\n// remove text labels\nmap.removeLayer(layers[i].id);\n}\n}\nmap.addLayer({\n'id': '3d-buildings',\n'source': 'composite',\n'source-layer': 'building',\n'filter': ['==', 'extrude', 'true'],\n'type': 'fill-extrusion',\n'minzoom': 15,\n'paint': {\n'fill-extrusion-color': '#aaa',\n// use an 'interpolate' expression to add a smooth transition effect to the\n// buildings as the user zooms in\n'fill-extrusion-height': [\n'interpolate',\n['linear'],\n['zoom'],\n15,\n0,\n15.05,\n['get', 'height']\n],\n'fill-extrusion-base': [\n'interpolate',\n['linear'],\n['zoom'],\n15,\n0,\n15.05,\n['get', 'min_height']\n],\n'fill-extrusion-opacity': 0.6\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-images/","title":"Animate a series of images","text":"<p>Use a series of image sources to create an animation.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Animate a series of images&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a series of image sources to create an animation.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nmaxZoom: 5.99,\nminZoom: 4,\nzoom: 5,\ncenter: [-75.789, 41.874]\n});\nvar frameCount = 5;\nvar currentImage = 0;\nfunction getPath() {\nreturn (\n'https://maplibre.org/maplibre-gl-js-docs/assets/radar' +\ncurrentImage +\n'.gif'\n);\n}\nmap.on('load', function () {\nmap.addSource('radar', {\ntype: 'image',\nurl: getPath(),\ncoordinates: [\n[-80.425, 46.437],\n[-71.516, 46.437],\n[-71.516, 37.936],\n[-80.425, 37.936]\n]\n});\nmap.addLayer({\nid: 'radar-layer',\n'type': 'raster',\n'source': 'radar',\n'paint': {\n'raster-fade-duration': 0\n}\n});\nsetInterval(function () {\ncurrentImage = (currentImage + 1) % frameCount;\nmap.getSource('radar').updateImage({ url: getPath() });\n}, 200);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-marker/","title":"Animate a marker","text":"<p>Animate the position of a marker by updating its location on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Animate a marker&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Animate the position of a marker by updating its location on each frame.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [0, 0],\nzoom: 2\n});\nvar marker = new maplibregl.Marker();\nfunction animateMarker(timestamp) {\nvar radius = 20;\n// Update the data to a new position based on the animation timestamp. The\n// divisor in the expression `timestamp / 1000` controls the animation speed.\nmarker.setLngLat([\nMath.cos(timestamp / 1000) * radius,\nMath.sin(timestamp / 1000) * radius\n]);\n// Ensure it's added to the map. This is safe to call if it's already added.\nmarker.addTo(map);\n// Request the next frame of the animation.\nrequestAnimationFrame(animateMarker);\n}\n// Start the animation.\nrequestAnimationFrame(animateMarker);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-point-along-line/","title":"Animate a point","text":"<p>Animate the position of a point by updating a GeoJSON source on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Animate a point&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Animate the position of a point by updating a GeoJSON source on each frame.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [0, 0],\nzoom: 2\n});\nvar radius = 20;\nfunction pointOnCircle(angle) {\nreturn {\n'type': 'Point',\n'coordinates': [Math.cos(angle) * radius, Math.sin(angle) * radius]\n};\n}\nmap.on('load', function () {\n// Add a source and layer displaying a point which will be animated in a circle.\nmap.addSource('point', {\n'type': 'geojson',\n'data': pointOnCircle(0)\n});\nmap.addLayer({\n'id': 'point',\n'source': 'point',\n'type': 'circle',\n'paint': {\n'circle-radius': 10,\n'circle-color': '#007cbf'\n}\n});\nfunction animateMarker(timestamp) {\n// Update the data to a new position based on the animation timestamp. The\n// divisor in the expression `timestamp / 1000` controls the animation speed.\nmap.getSource('point').setData(pointOnCircle(timestamp / 1000));\n// Request the next frame of the animation.\nrequestAnimationFrame(animateMarker);\n}\n// Start the animation.\nanimateMarker(0);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-point-along-route/","title":"Animate a point along a route","text":"<p>Use Turf to smoothly animate a point along the distance of a line.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Animate a point along a route&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use Turf to smoothly animate a point along the distance of a line.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.overlay {\nposition: absolute;\ntop: 10px;\nleft: 10px;\n}\n.overlay button {\nfont: 600 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nbackground-color: #3386c0;\ncolor: #fff;\ndisplay: inline-block;\nmargin: 0;\npadding: 10px 20px;\nborder: none;\ncursor: pointer;\nborder-radius: 3px;\n}\n.overlay button:hover {\nbackground-color: #4ea0da;\n}\n&lt;/style&gt;\n&lt;script\nsrc=\"https://www.unpkg.com/turf@2.0.0/turf.min.js\"\ncharset=\"utf-8\"\n&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"overlay\"&gt;\n&lt;button id=\"replay\"&gt;Replay&lt;/button&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-96, 37.8],\nzoom: 3\n});\n// San Francisco\nvar origin = [-122.414, 37.776];\n// Washington DC\nvar destination = [-77.032, 38.913];\n// A simple line from origin to destination.\nvar route = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'LineString',\n'coordinates': [origin, destination]\n}\n}\n]\n};\n// A single point that animates along the route.\n// Coordinates are initially set to origin.\nvar point = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': origin\n}\n}\n]\n};\n// Calculate the distance in kilometers between route start/end point.\nvar lineDistance = turf.lineDistance(route.features[0], 'kilometers');\nvar arc = [];\n// Number of steps to use in the arc and animation, more steps means\n// a smoother arc and animation, but too many steps will result in a\n// low frame rate\nvar steps = 500;\n// Draw an arc between the `origin` &amp; `destination` of the two points\nfor (var i = 0; i &lt; lineDistance; i += lineDistance / steps) {\nvar segment = turf.along(route.features[0], i, 'kilometers');\narc.push(segment.geometry.coordinates);\n}\n// Update the route with calculated arc coordinates\nroute.features[0].geometry.coordinates = arc;\n// Used to increment the value of the point measurement against the route.\nvar counter = 0;\nmap.on('load', function () {\n// Add a source and layer displaying a point which will be animated in a circle.\nmap.addSource('route', {\n'type': 'geojson',\n'data': route\n});\nmap.addSource('point', {\n'type': 'geojson',\n'data': point\n});\nmap.addLayer({\n'id': 'route',\n'source': 'route',\n'type': 'line',\n'paint': {\n'line-width': 2,\n'line-color': '#007cbf'\n}\n});\nmap.addLayer({\n'id': 'point',\n'source': 'point',\n'type': 'symbol',\n'layout': {\n'icon-image': 'airport_15',\n'icon-rotate': ['get', 'bearing'],\n'icon-rotation-alignment': 'map',\n'icon-overlap': 'always',\n'icon-ignore-placement': true\n}\n});\nfunction animate() {\n// Update point geometry to a new position based on counter denoting\n// the index to access the arc.\npoint.features[0].geometry.coordinates =\nroute.features[0].geometry.coordinates[counter];\n// Calculate the bearing to ensure the icon is rotated to match the route arc\n// The bearing is calculate between the current point and the next point, except\n// at the end of the arc use the previous point and the current point\npoint.features[0].properties.bearing = turf.bearing(\nturf.point(\nroute.features[0].geometry.coordinates[\ncounter &gt;= steps ? counter - 1 : counter\n]\n),\nturf.point(\nroute.features[0].geometry.coordinates[\ncounter &gt;= steps ? counter : counter + 1\n]\n)\n);\n// Update the source with this new data.\nmap.getSource('point').setData(point);\n// Request the next frame of animation so long the end has not been reached.\nif (counter &lt; steps) {\nrequestAnimationFrame(animate);\n}\ncounter = counter + 1;\n}\ndocument\n.getElementById('replay')\n.addEventListener('click', function () {\n// Set the coordinates of the original point back to origin\npoint.features[0].geometry.coordinates = origin;\n// Update the source layer\nmap.getSource('point').setData(point);\n// Reset the counter\ncounter = 0;\n// Restart the animation.\nanimate(counter);\n});\n// Start the animation.\nanimate(counter);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/attribution-position/","title":"Change the default position for attribution","text":"<p>Place attribution in the top-left position when initializing a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Change the default position for attribution&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Place attribution in the top-left position when initializing a map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15,\nattributionControl: false\n});\nmap.addControl(new maplibregl.AttributionControl(), 'top-left');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/camera-animation/","title":"Customize camera animations","text":"<p>Customize camera animations using AnimationOptions.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Customize camera animations&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Customize camera animations using AnimationOptions.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.map-overlay {\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nposition: absolute;\nwidth: 200px;\ntop: 0;\nleft: 0;\npadding: 10px;\n}\n.map-overlay .map-overlay-inner {\nbackground-color: #fff;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\nborder-radius: 3px;\npadding: 10px;\nmargin-bottom: 10px;\n}\n.map-overlay-inner fieldset {\nborder: none;\npadding: 0;\nmargin: 0 0 10px;\n}\n.map-overlay-inner fieldset:last-child {\nmargin: 0;\n}\n.map-overlay-inner select {\nwidth: 100%;\n}\n.map-overlay-inner p {\nmargin: 0;\n}\n.map-overlay-inner label {\ndisplay: block;\nfont-weight: bold;\n}\n.map-overlay-inner button {\nbackground-color: cornflowerblue;\ncolor: white;\nborder-radius: 5px;\ndisplay: inline-block;\nheight: 20px;\nborder: none;\ncursor: pointer;\n}\n.map-overlay-inner button:focus {\noutline: none;\n}\n.map-overlay-inner button:hover {\nbackground-color: blue;\nbox-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);\n-webkit-transition: background-color 500ms linear;\n-ms-transition: background-color 500ms linear;\ntransition: background-color 500ms linear;\n}\n.offset &gt; label,\n.offset &gt; input {\ndisplay: inline;\n}\n#animateLabel {\ndisplay: inline-block;\nmin-width: 20px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n&lt;div class=\"map-overlay-inner\"&gt;\n&lt;fieldset&gt;\n&lt;label&gt;Select easing function&lt;/label&gt;\n&lt;select id=\"easing\" name=\"easing\"&gt;\n&lt;option value=\"easeInCubic\"&gt;Ease In Cubic&lt;/option&gt;\n&lt;option value=\"easeOutQuint\"&gt;Ease Out Quint&lt;/option&gt;\n&lt;option value=\"easeInOutCirc\"&gt;Ease In/Out Circ&lt;/option&gt;\n&lt;option value=\"easeOutBounce\"&gt;Ease Out Bounce&lt;/option&gt;\n&lt;/select&gt;\n&lt;/fieldset&gt;\n&lt;fieldset&gt;\n&lt;label for=\"duration\"&gt;Set animation duration&lt;/label&gt;\n&lt;p id=\"durationValue\"&gt;&lt;/p&gt;\n&lt;input\ntype=\"range\"\nid=\"duration\"\nname=\"duration\"\nmin=\"0\"\nmax=\"10000\"\nstep=\"500\"\nvalue=\"1000\"\n/&gt;\n&lt;/fieldset&gt;\n&lt;fieldset&gt;\n&lt;label&gt;Animate camera motion&lt;/label&gt;\n&lt;label for=\"animate\" id=\"animateLabel\"&gt;Yes&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"animate\" name=\"animate\" checked /&gt;\n&lt;/fieldset&gt;\n&lt;fieldset class=\"offset\"&gt;\n&lt;label for=\"offset-x\"&gt;Offset-X&lt;/label&gt;\n&lt;input\ntype=\"number\"\nid=\"offset-x\"\nname=\"offset-x\"\nmin=\"-200\"\nmax=\"200\"\nstep=\"50\"\nvalue=\"0\"\n/&gt;\n&lt;/fieldset&gt;\n&lt;fieldset class=\"offset\"&gt;\n&lt;label for=\"offset-y\"&gt;Offset-Y&lt;/label&gt;\n&lt;input\ntype=\"number\"\nid=\"offset-y\"\nname=\"offset-y\"\nmin=\"-200\"\nmax=\"200\"\nstep=\"50\"\nvalue=\"0\"\n/&gt;\n&lt;p&gt;Offsets can be negative&lt;/p&gt;\n&lt;/fieldset&gt;\n&lt;button type=\"button\" id=\"animateButton\" name=\"test-animation\"&gt;\n            Test Animation\n        &lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n// declare various easing functions.\n// easing functions mathematically describe\n// how fast a value changes during an animation.\n// each function takes a parameter t that represents\n// the progress of the animation.\n// t is in a range of 0 to 1 where 0 is the initial\n// state and 1 is the completed state.\nvar easingFunctions = {\n// start slow and gradually increase speed\neaseInCubic: function (t) {\nreturn t * t * t;\n},\n// start fast with a long, slow wind-down\neaseOutQuint: function (t) {\nreturn 1 - Math.pow(1 - t, 5);\n},\n// slow start and finish with fast middle\neaseInOutCirc: function (t) {\nreturn t &lt; 0.5\n? (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2\n: (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2;\n},\n// fast start with a \"bounce\" at the end\neaseOutBounce: function (t) {\nvar n1 = 7.5625;\nvar d1 = 2.75;\nif (t &lt; 1 / d1) {\nreturn n1 * t * t;\n} else if (t &lt; 2 / d1) {\nreturn n1 * (t -= 1.5 / d1) * t + 0.75;\n} else if (t &lt; 2.5 / d1) {\nreturn n1 * (t -= 2.25 / d1) * t + 0.9375;\n} else {\nreturn n1 * (t -= 2.625 / d1) * t + 0.984375;\n}\n}\n};\n// set up some helpful UX on the form\nvar durationValueSpan = document.getElementById('durationValue');\nvar durationInput = document.getElementById('duration');\ndurationValueSpan.innerHTML = durationInput.value / 1000 + ' seconds';\ndurationInput.addEventListener('change', function (e) {\ndurationValueSpan.innerHTML = e.target.value / 1000 + ' seconds';\n});\nvar animateLabel = document.getElementById('animateLabel');\nvar animateValue = document.getElementById('animate');\nanimateValue.addEventListener('change', function (e) {\nanimateLabel.innerHTML = e.target.checked ? 'Yes' : 'No';\n});\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-95, 40],\nzoom: 3\n});\nmap.on('load', function () {\n// add a layer to display the map's center point\nmap.addSource('center', {\n'type': 'geojson',\n'data': {\n'type': 'Point',\n'coordinates': [-94, 40]\n}\n});\nmap.addLayer({\n'id': 'center',\n'type': 'symbol',\n'source': 'center',\n'layout': {\n'icon-image': 'marker_15',\n'text-field': 'Center: [-94, 40]',\n'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n'text-offset': [0, 0.6],\n'text-anchor': 'top'\n}\n});\nvar animateButton = document.getElementById('animateButton');\nanimateButton.addEventListener('click', function () {\nvar easingInput = document.getElementById('easing');\nvar easingFn =\neasingFunctions[\neasingInput.options[easingInput.selectedIndex].value\n];\nvar duration = parseInt(durationInput.value, 10);\nvar animate = animateValue.checked;\nvar offsetX = parseInt(\ndocument.getElementById('offset-x').value,\n10\n);\nvar offsetY = parseInt(\ndocument.getElementById('offset-y').value,\n10\n);\nvar animationOptions = {\nduration: duration,\neasing: easingFn,\noffset: [offsetX, offsetY],\nanimate: animate,\nessential: true // animation will happen even if user has `prefers-reduced-motion` setting on\n};\n// Create a random location to fly to by offsetting the map's\n// initial center point by up to 10 degrees.\nvar center = [\n-95 + (Math.random() - 0.5) * 20,\n40 + (Math.random() - 0.5) * 20\n];\n// merge animationOptions with other flyTo options\nanimationOptions.center = center;\nmap.flyTo(animationOptions);\n// update 'center' source and layer to show our new map center\n// compare this center point to where the camera ends up when an offset is applied\nmap.getSource('center').setData({\n'type': 'Point',\n'coordinates': center\n});\nmap.setLayoutProperty(\n'center',\n'text-field',\n'Center: [' +\ncenter[0].toFixed(1) +\n', ' +\ncenter[1].toFixed(1) +\n']'\n);\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/canvas-source/","title":"Add a canvas source","text":"<p>Add a canvas source to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a canvas source&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a canvas source to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;canvas id=\"canvasID\" width=\"400\" height=\"400\"&gt;Canvas not supported&lt;/canvas&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n//Animation from https://javascript.tutorials24x7.com/blog/how-to-draw-animated-circles-in-html5-canvas\nvar canvas = document.getElementById('canvasID');\nvar ctx = canvas.getContext('2d');\nvar circles = [];\nvar radius = 20;\nfunction Circle(x, y, dx, dy, radius, color) {\nthis.x = x;\nthis.y = y;\nthis.dx = dx;\nthis.dy = dy;\nthis.radius = radius;\nthis.draw = function () {\nctx.beginPath();\nctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\nctx.strokeStyle = color;\nctx.stroke();\n};\nthis.update = function () {\nif (this.x + this.radius &gt; 400 || this.x - this.radius &lt; 0) {\nthis.dx = -this.dx;\n}\nif (this.y + this.radius &gt; 400 || this.y - this.radius &lt; 0) {\nthis.dy = -this.dy;\n}\nthis.x += this.dx;\nthis.y += this.dy;\nthis.draw();\n};\n}\nfor (var i = 0; i &lt; 5; i++) {\nvar color =\n'#' +\n(0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\nvar x = Math.random() * (400 - radius * 2) + radius;\nvar y = Math.random() * (400 - radius * 2) + radius;\nvar dx = (Math.random() - 0.5) * 2;\nvar dy = (Math.random() - 0.5) * 2;\ncircles.push(new Circle(x, y, dx, dy, radius, color));\n}\nfunction animate() {\nrequestAnimationFrame(animate);\nctx.clearRect(0, 0, 400, 400);\nfor (var r = 0; r &lt; 5; r++) {\ncircles[r].update();\n}\n}\nanimate();\nvar map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 5,\nminZoom: 4,\ncenter: [95.899147, 18.088694],\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nmap.on('load', function () {\nmap.addSource('canvas-source', {\ntype: 'canvas',\ncanvas: 'canvasID',\ncoordinates: [\n[91.4461, 21.5006],\n[100.3541, 21.5006],\n[100.3541, 13.9706],\n[91.4461, 13.9706]\n],\n// Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\nanimate: true\n});\nmap.addLayer({\nid: 'canvas-layer',\ntype: 'raster',\nsource: 'canvas-source'\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/center-on-symbol/","title":"Center the map on a clicked symbol","text":"<p>Use events and flyTo to center the map on a symbol.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Center the map on a clicked symbol&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use events and flyTo to center the map on a symbol.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-90.96, -0.47],\nzoom: 7.5\n});\nmap.on('load', function () {\n// Add an image to use as a custom marker\nmap.loadImage(\n'https://maplibre.org/maplibre-gl-js-docs/assets/custom_marker.png',\nfunction (error, image) {\nif (error) throw error;\nmap.addImage('custom-marker', image);\n// Add a GeoJSON source with 3 points.\nmap.addSource('points', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [\n-91.395263671875,\n-0.9145729757782163\n]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [\n-90.32958984375,\n-0.6344474832838974\n]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [\n-91.34033203125,\n0.01647949196029245\n]\n}\n}\n]\n}\n});\n// Add a symbol layer\nmap.addLayer({\n'id': 'symbols',\n'type': 'symbol',\n'source': 'points',\n'layout': {\n'icon-image': 'custom-marker'\n}\n});\n}\n);\n// Center the map on the coordinates of any clicked symbol from the 'symbols' layer.\nmap.on('click', 'symbols', function (e) {\nmap.flyTo({\ncenter: e.features[0].geometry.coordinates\n});\n});\n// Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.\nmap.on('mouseenter', 'symbols', function () {\nmap.getCanvas().style.cursor = 'pointer';\n});\n// Change it back to a pointer when it leaves.\nmap.on('mouseleave', 'symbols', function () {\nmap.getCanvas().style.cursor = '';\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-building-color-based-on-zoom-level/","title":"Change building color based on zoom level","text":"<p>Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Change building color based on zoom level&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#zoom {\ndisplay: block;\nposition: relative;\nmargin: 20px auto;\nwidth: 50%;\nheight: 40px;\npadding: 10px;\nborder: none;\nborder-radius: 3px;\nfont-size: 12px;\ntext-align: center;\ncolor: #fff;\nbackground: #ee8a65;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"zoom\"&gt;Zoom to buildings&lt;/button&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-90.73414, 14.55524],\nzoom: 13\n});\nmap.on('load', function () {\nmap.setPaintProperty('building', 'fill-color', [\n'interpolate',\n['exponential', 0.5],\n['zoom'],\n15,\n'#e2714b',\n22,\n'#eee695'\n]);\nmap.setPaintProperty('building', 'fill-opacity', [\n'interpolate',\n['exponential', 0.5],\n['zoom'],\n15,\n0,\n22,\n1\n]);\n});\ndocument.getElementById('zoom').addEventListener('click', function () {\nmap.zoomTo(19, { duration: 9000 });\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-case-of-labels/","title":"Change the case of labels","text":"<p>Use the upcase and downcase expressions to change the case of labels.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Change the case of labels&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the upcase and downcase expressions to change the case of labels.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\ncenter: [-116.231, 43.604], // starting position [lng, lat]\nzoom: 11 // starting zoom\n});\nmap.on('load', function () {\n// data from opendata.cityofboise.org/\nmap.addSource('off-leash-areas', {\n'type': 'geojson',\n'data':\n'https://maplibre.org/maplibre-gl-js-docs/assets/boise.geojson'\n});\nmap.addLayer({\n'id': 'off-leash-areas',\n'type': 'symbol',\n'source': 'off-leash-areas',\n'layout': {\n'icon-image': 'dog-park-11',\n'text-field': [\n'format',\n['upcase', ['get', 'FacilityName']],\n{ 'font-scale': 0.8 },\n'\\n',\n{},\n['downcase', ['get', 'Comments']],\n{ 'font-scale': 0.6 }\n],\n'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n'text-offset': [0, 0.6],\n'text-anchor': 'top'\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/check-for-support/","title":"Check if MapLibre GL JS is supported","text":"<p>Check for MapLibre GL browser support.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Check if MapLibre GL JS is supported&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Check for MapLibre GL browser support.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nif (!maplibregl.supported()) {\nalert('Your browser does not support MapLibre GL');\n} else {\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.5, 40],\nzoom: 9\n});\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/cluster-html/","title":"Display HTML clusters with custom properties","text":"<p>Extend clustering with HTML markers and custom property expressions. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display HTML clusters with custom properties&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Extend clustering with HTML markers and custom property expressions. \" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 0.3,\ncenter: [0, 20],\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nmap.addControl(new maplibregl.NavigationControl());\n// filters for classifying earthquakes into five categories based on magnitude\nvar mag1 = ['&lt;', ['get', 'mag'], 2];\nvar mag2 = ['all', ['&gt;=', ['get', 'mag'], 2], ['&lt;', ['get', 'mag'], 3]];\nvar mag3 = ['all', ['&gt;=', ['get', 'mag'], 3], ['&lt;', ['get', 'mag'], 4]];\nvar mag4 = ['all', ['&gt;=', ['get', 'mag'], 4], ['&lt;', ['get', 'mag'], 5]];\nvar mag5 = ['&gt;=', ['get', 'mag'], 5];\n// colors to use for the categories\nvar colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];\nmap.on('load', function () {\n// add a clustered GeoJSON source for a sample set of earthquakes\nmap.addSource('earthquakes', {\n'type': 'geojson',\n'data':\n'https://maplibre.org/maplibre-gl-js-docs/assets/earthquakes.geojson',\n'cluster': true,\n'clusterRadius': 80,\n'clusterProperties': {\n// keep separate counts for each magnitude category in a cluster\n'mag1': ['+', ['case', mag1, 1, 0]],\n'mag2': ['+', ['case', mag2, 1, 0]],\n'mag3': ['+', ['case', mag3, 1, 0]],\n'mag4': ['+', ['case', mag4, 1, 0]],\n'mag5': ['+', ['case', mag5, 1, 0]]\n}\n});\n// circle and symbol layers for rendering individual earthquakes (unclustered points)\nmap.addLayer({\n'id': 'earthquake_circle',\n'type': 'circle',\n'source': 'earthquakes',\n'filter': ['!=', 'cluster', true],\n'paint': {\n'circle-color': [\n'case',\nmag1,\ncolors[0],\nmag2,\ncolors[1],\nmag3,\ncolors[2],\nmag4,\ncolors[3],\ncolors[4]\n],\n'circle-opacity': 0.6,\n'circle-radius': 12\n}\n});\nmap.addLayer({\n'id': 'earthquake_label',\n'type': 'symbol',\n'source': 'earthquakes',\n'filter': ['!=', 'cluster', true],\n'layout': {\n'text-field': [\n'number-format',\n['get', 'mag'],\n{ 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\n],\n'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n'text-size': 10\n},\n'paint': {\n'text-color': [\n'case',\n['&lt;', ['get', 'mag'], 3],\n'black',\n'white'\n]\n}\n});\n// objects for caching and keeping track of HTML marker objects (for performance)\nvar markers = {};\nvar markersOnScreen = {};\nfunction updateMarkers() {\nvar newMarkers = {};\nvar features = map.querySourceFeatures('earthquakes');\n// for every cluster on the screen, create an HTML marker for it (if we didn't yet),\n// and add it to the map if it's not there already\nfor (var i = 0; i &lt; features.length; i++) {\nvar coords = features[i].geometry.coordinates;\nvar props = features[i].properties;\nif (!props.cluster) continue;\nvar id = props.cluster_id;\nvar marker = markers[id];\nif (!marker) {\nvar el = createDonutChart(props);\nmarker = markers[id] = new maplibregl.Marker({\nelement: el\n}).setLngLat(coords);\n}\nnewMarkers[id] = marker;\nif (!markersOnScreen[id]) marker.addTo(map);\n}\n// for every marker we've added previously, remove those that are no longer visible\nfor (id in markersOnScreen) {\nif (!newMarkers[id]) markersOnScreen[id].remove();\n}\nmarkersOnScreen = newMarkers;\n}\n// after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\nmap.on('data', function (e) {\nif (e.sourceId !== 'earthquakes' || !e.isSourceLoaded) return;\nmap.on('move', updateMarkers);\nmap.on('moveend', updateMarkers);\nupdateMarkers();\n});\n});\n// code for creating an SVG donut chart from feature properties\nfunction createDonutChart(props) {\nvar offsets = [];\nvar counts = [\nprops.mag1,\nprops.mag2,\nprops.mag3,\nprops.mag4,\nprops.mag5\n];\nvar total = 0;\nfor (var i = 0; i &lt; counts.length; i++) {\noffsets.push(total);\ntotal += counts[i];\n}\nvar fontSize =\ntotal &gt;= 1000 ? 22 : total &gt;= 100 ? 20 : total &gt;= 10 ? 18 : 16;\nvar r = total &gt;= 1000 ? 50 : total &gt;= 100 ? 32 : total &gt;= 10 ? 24 : 18;\nvar r0 = Math.round(r * 0.6);\nvar w = r * 2;\nvar html =\n'&lt;div&gt;&lt;svg width=\"' +\nw +\n'\" height=\"' +\nw +\n'\" viewbox=\"0 0 ' +\nw +\n' ' +\nw +\n'\" text-anchor=\"middle\" style=\"font: ' +\nfontSize +\n'px sans-serif; display: block\"&gt;';\nfor (i = 0; i &lt; counts.length; i++) {\nhtml += donutSegment(\noffsets[i] / total,\n(offsets[i] + counts[i]) / total,\nr,\nr0,\ncolors[i]\n);\n}\nhtml +=\n'&lt;circle cx=\"' +\nr +\n'\" cy=\"' +\nr +\n'\" r=\"' +\nr0 +\n'\" fill=\"white\" /&gt;&lt;text dominant-baseline=\"central\" transform=\"translate(' +\nr +\n', ' +\nr +\n')\"&gt;' +\ntotal.toLocaleString() +\n'&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;';\nvar el = document.createElement('div');\nel.innerHTML = html;\nreturn el.firstChild;\n}\nfunction donutSegment(start, end, r, r0, color) {\nif (end - start === 1) end -= 0.00001;\nvar a0 = 2 * Math.PI * (start - 0.25);\nvar a1 = 2 * Math.PI * (end - 0.25);\nvar x0 = Math.cos(a0),\ny0 = Math.sin(a0);\nvar x1 = Math.cos(a1),\ny1 = Math.sin(a1);\nvar largeArc = end - start &gt; 0.5 ? 1 : 0;\nreturn [\n'&lt;path d=\"M',\nr + r0 * x0,\nr + r0 * y0,\n'L',\nr + r * x0,\nr + r * y0,\n'A',\nr,\nr,\n0,\nlargeArc,\n1,\nr + r * x1,\nr + r * y1,\n'L',\nr + r0 * x1,\nr + r0 * y1,\n'A',\nr0,\nr0,\n0,\nlargeArc,\n0,\nr + r0 * x0,\nr + r0 * y0,\n'\" fill=\"' + color + '\" /&gt;'\n].join(' ');\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/cluster/","title":"Create and style clusters","text":"<p>Use MapLibre GL JS' built-in functions to visualize points as clusters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create and style clusters&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use MapLibre GL JS' built-in functions to visualize points as clusters.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-103.59179687498357, 40.66995747013945],\nzoom: 3\n});\nmap.on('load', function () {\n// Add a new source from our GeoJSON data and\n// set the 'cluster' option to true. GL-JS will\n// add the point_count property to your source data.\nmap.addSource('earthquakes', {\ntype: 'geojson',\n// Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n// from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\ndata: 'https://maplibre.org/maplibre-gl-js-docs/assets/earthquakes.geojson',\ncluster: true,\nclusterMaxZoom: 14, // Max zoom to cluster points on\nclusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n});\nmap.addLayer({\nid: 'clusters',\ntype: 'circle',\nsource: 'earthquakes',\nfilter: ['has', 'point_count'],\npaint: {\n// Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)\n// with three steps to implement three types of circles:\n//   * Blue, 20px circles when point count is less than 100\n//   * Yellow, 30px circles when point count is between 100 and 750\n//   * Pink, 40px circles when point count is greater than or equal to 750\n'circle-color': [\n'step',\n['get', 'point_count'],\n'#51bbd6',\n100,\n'#f1f075',\n750,\n'#f28cb1'\n],\n'circle-radius': [\n'step',\n['get', 'point_count'],\n20,\n100,\n30,\n750,\n40\n]\n}\n});\nmap.addLayer({\nid: 'cluster-count',\ntype: 'symbol',\nsource: 'earthquakes',\nfilter: ['has', 'point_count'],\nlayout: {\n'text-field': '{point_count_abbreviated}',\n'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n'text-size': 12\n}\n});\nmap.addLayer({\nid: 'unclustered-point',\ntype: 'circle',\nsource: 'earthquakes',\nfilter: ['!', ['has', 'point_count']],\npaint: {\n'circle-color': '#11b4da',\n'circle-radius': 4,\n'circle-stroke-width': 1,\n'circle-stroke-color': '#fff'\n}\n});\n// inspect a cluster on click\nmap.on('click', 'clusters', function (e) {\nvar features = map.queryRenderedFeatures(e.point, {\nlayers: ['clusters']\n});\nvar clusterId = features[0].properties.cluster_id;\nmap.getSource('earthquakes').getClusterExpansionZoom(\nclusterId,\nfunction (err, zoom) {\nif (err) return;\nmap.easeTo({\ncenter: features[0].geometry.coordinates,\nzoom: zoom\n});\n}\n);\n});\n// When a click event occurs on a feature in\n// the unclustered-point layer, open a popup at\n// the location of the feature, with\n// description HTML from its properties.\nmap.on('click', 'unclustered-point', function (e) {\nvar coordinates = e.features[0].geometry.coordinates.slice();\nvar mag = e.features[0].properties.mag;\nvar tsunami;\nif (e.features[0].properties.tsunami === 1) {\ntsunami = 'yes';\n} else {\ntsunami = 'no';\n}\n// Ensure that if the map is zoomed out such that\n// multiple copies of the feature are visible, the\n// popup appears over the copy being pointed to.\nwhile (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\ncoordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n}\nnew maplibregl.Popup()\n.setLngLat(coordinates)\n.setHTML(\n'magnitude: ' + mag + '&lt;br&gt;Was there a tsunami?: ' + tsunami\n)\n.addTo(map);\n});\nmap.on('mouseenter', 'clusters', function () {\nmap.getCanvas().style.cursor = 'pointer';\n});\nmap.on('mouseleave', 'clusters', function () {\nmap.getCanvas().style.cursor = '';\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/color-switcher/","title":"Change a layer's color with buttons","text":"<p>Use setPaintProperty to change a layer's fill color.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Change a layer's color with buttons&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use setPaintProperty to change a layer's fill color.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.map-overlay {\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nposition: absolute;\nwidth: 200px;\ntop: 0;\nleft: 0;\npadding: 10px;\n}\n.map-overlay .map-overlay-inner {\nbackground-color: #fff;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\nborder-radius: 3px;\npadding: 10px;\nmargin-bottom: 10px;\n}\n.map-overlay-inner fieldset {\nborder: none;\npadding: 0;\nmargin: 0 0 10px;\n}\n.map-overlay-inner fieldset:last-child {\nmargin: 0;\n}\n.map-overlay-inner select {\nwidth: 100%;\n}\n.map-overlay-inner label {\ndisplay: block;\nfont-weight: bold;\nmargin: 0 0 5px;\n}\n.map-overlay-inner button {\ndisplay: inline-block;\nwidth: 36px;\nheight: 20px;\nborder: none;\ncursor: pointer;\n}\n.map-overlay-inner button:focus {\noutline: none;\n}\n.map-overlay-inner button:hover {\nbox-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n&lt;div class=\"map-overlay-inner\"&gt;\n&lt;fieldset&gt;\n&lt;label&gt;Select layer&lt;/label&gt;\n&lt;select id=\"layer\" name=\"layer\"&gt;\n&lt;option value=\"water\"&gt;Water&lt;/option&gt;\n&lt;option value=\"building-3d\"&gt;Buildings&lt;/option&gt;\n&lt;/select&gt;\n&lt;/fieldset&gt;\n&lt;fieldset&gt;\n&lt;label&gt;Choose a color&lt;/label&gt;\n&lt;div id=\"swatches\"&gt;&lt;/div&gt;\n&lt;/fieldset&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [12.338, 45.4385],\nzoom: 17.4\n});\nvar swatches = document.getElementById('swatches');\nvar layer = document.getElementById('layer');\nvar colors = [\n'#ffffcc',\n'#a1dab4',\n'#41b6c4',\n'#2c7fb8',\n'#253494',\n'#fed976',\n'#feb24c',\n'#fd8d3c',\n'#f03b20',\n'#bd0026'\n];\ncolors.forEach(function (color) {\nvar swatch = document.createElement('button');\nswatch.style.backgroundColor = color;\nswatch.addEventListener('click', function () {\nmap.setPaintProperty(\nlayer.value,\nlayer.value === 'water' ? 'fill-color' : 'fill-extrusion-color',\ncolor\n);\n});\nswatches.appendChild(swatch);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/contour-lines/","title":"Add Contour Lines","text":"<p>Add contour lines to your map from a raster-dem source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add Contour Lines&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add contour lines to your map from a raster-dem source.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script src=\"https://unpkg.com/maplibre-contour@0.0.2/dist/index.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar demSource = new mlcontour.DemSource({\nurl: 'https://demotiles.maplibre.org/terrain-tiles/{z}/{x}/{y}.png',\nencoding: 'mapbox',\nmaxzoom: 12,\n// offload contour line computation to a web worker\nworker: true\n});\n// calls maplibregl.addProtocol to register a dynamic vector tile provider that\n// downloads raster-dem tiles, computes contour lines, and encodes as a vector\n// tile for each tile request from maplibre\ndemSource.setupMaplibre(maplibregl);\nvar map = (window.map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 13,\ncenter: [11.3229, 47.2738],\nhash: true,\nstyle: {\nversion: 8,\nglyphs: 'https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf',\nsources: {\nhillshadeSource: {\ntype: 'raster-dem',\n// share cached raster-dem tiles with the contour source\ntiles: [demSource.sharedDemProtocolUrl],\ntileSize: 512,\nmaxzoom: 12\n},\ncontourSourceFeet: {\ntype: 'vector',\ntiles: [\ndemSource.contourProtocolUrl({\n// meters to feet\nmultiplier: 3.28084,\noverzoom: 1,\nthresholds: {\n// zoom: [minor, major]\n11: [200, 1000],\n12: [100, 500],\n13: [100, 500],\n14: [50, 200],\n15: [20, 100]\n},\nelevationKey: 'ele',\nlevelKey: 'level',\ncontourLayer: 'contours'\n})\n],\nmaxzoom: 15\n}\n},\nlayers: [\n{\nid: 'hills',\ntype: 'hillshade',\nsource: 'hillshadeSource',\nlayout: { visibility: 'visible' },\npaint: { 'hillshade-exaggeration': 0.25 }\n},\n{\nid: 'contours',\ntype: 'line',\nsource: 'contourSourceFeet',\n'source-layer': 'contours',\npaint: {\n'line-opacity': 0.5,\n// \"major\" contours have level=1, \"minor\" have level=0\n'line-width': ['match', ['get', 'level'], 1, 1, 0.5]\n}\n},\n{\nid: 'contour-text',\ntype: 'symbol',\nsource: 'contourSourceFeet',\n'source-layer': 'contours',\nfilter: ['&gt;', ['get', 'level'], 0],\npaint: {\n'text-halo-color': 'white',\n'text-halo-width': 1\n},\nlayout: {\n'symbol-placement': 'line',\n'text-size': 10,\n'text-field': [\n'concat',\n['number-format', ['get', 'ele'], {}],\n\"'\"\n],\n'text-font': ['Noto Sans Bold']\n}\n}\n]\n}\n}));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/custom-marker-icons/","title":"Add custom icons with Markers","text":"<p>Add custom marker icons to your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add custom icons with Markers&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add custom marker icons to your map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.marker {\ndisplay: block;\nborder: none;\nborder-radius: 50%;\ncursor: pointer;\npadding: 0;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar geojson = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'message': 'Foo',\n'iconSize': [60, 60]\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-66.324462890625, -16.024695711685304]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'message': 'Bar',\n'iconSize': [50, 50]\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-61.2158203125, -15.97189158092897]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'message': 'Baz',\n'iconSize': [40, 40]\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-63.29223632812499, -18.28151823530889]\n}\n}\n]\n};\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-65.017, -16.457],\nzoom: 5\n});\n// add markers to map\ngeojson.features.forEach(function (marker) {\n// create a DOM element for the marker\nvar el = document.createElement('div');\nel.className = 'marker';\nel.style.backgroundImage =\n'url(https://placekitten.com/g/' +\nmarker.properties.iconSize.join('/') +\n'/)';\nel.style.width = marker.properties.iconSize[0] + 'px';\nel.style.height = marker.properties.iconSize[1] + 'px';\nel.addEventListener('click', function () {\nwindow.alert(marker.properties.message);\n});\n// add marker to map\nnew maplibregl.Marker(el)\n.setLngLat(marker.geometry.coordinates)\n.addTo(map);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/custom-style-layer/","title":"Add a custom style layer","text":"<p>Use a custom style layer to render custom WebGL content.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a custom style layer&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a custom style layer to render custom WebGL content.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nconst map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 3,\ncenter: [7.5, 58],\nstyle: 'https://demotiles.maplibre.org/style.json',\nantialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n});\n// create a custom style layer to implement the WebGL content\nconst highlightLayer = {\nid: 'highlight',\ntype: 'custom',\n// method called when the layer is added to the map\n// https://maplibre.org/maplibre-gl-js-docs/api/properties/#styleimageinterface#onadd\nonAdd: function (map, gl) {\n// create GLSL source for vertex shader\nconst vertexSource = `#version 300 es\n                uniform mat4 u_matrix;\n                in vec2 a_pos;\n                void main() {\n                    gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n                }`;\n// create GLSL source for fragment shader\nconst fragmentSource = `#version 300 es\n                out highp vec4 fragColor;\n                void main() {\n                    fragColor = vec4(1.0, 0.0, 0.0, 0.5);\n                }`;\n// create a vertex shader\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vertexShader, vertexSource);\ngl.compileShader(vertexShader);\n// create a fragment shader\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fragmentShader, fragmentSource);\ngl.compileShader(fragmentShader);\n// link the two shaders into a WebGL program\nthis.program = gl.createProgram();\ngl.attachShader(this.program, vertexShader);\ngl.attachShader(this.program, fragmentShader);\ngl.linkProgram(this.program);\nthis.aPos = gl.getAttribLocation(this.program, 'a_pos');\n// define vertices of the triangle to be rendered in the custom style layer\nconst helsinki = maplibregl.MercatorCoordinate.fromLngLat({\nlng: 25.004,\nlat: 60.239\n});\nconst berlin = maplibregl.MercatorCoordinate.fromLngLat({\nlng: 13.403,\nlat: 52.562\n});\nconst kyiv = maplibregl.MercatorCoordinate.fromLngLat({\nlng: 30.498,\nlat: 50.541\n});\n// create and initialize a WebGLBuffer to store vertex and color data\nthis.buffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\ngl.bufferData(\ngl.ARRAY_BUFFER,\nnew Float32Array([\nhelsinki.x,\nhelsinki.y,\nberlin.x,\nberlin.y,\nkyiv.x,\nkyiv.y\n]),\ngl.STATIC_DRAW\n);\n},\n// method fired on each animation frame\n// https://maplibre.org/maplibre-gl-js-docs/api/map/#map.event:render\nrender: function (gl, matrix) {\ngl.useProgram(this.program);\ngl.uniformMatrix4fv(\ngl.getUniformLocation(this.program, 'u_matrix'),\nfalse,\nmatrix\n);\ngl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\ngl.enableVertexAttribArray(this.aPos);\ngl.vertexAttribPointer(this.aPos, 2, gl.FLOAT, false, 0, 0);\ngl.enable(gl.BLEND);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\ngl.drawArrays(gl.TRIANGLE_STRIP, 0, 3);\n}\n};\n// add the custom style layer to the map\nmap.on('load', function () {\nmap.addLayer(highlightLayer, 'crimea-fill');\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/data-driven-lines/","title":"Style lines with a data-driven property","text":"<p>Create a visualization with a data expression for line-color.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Style lines with a data-driven property&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Create a visualization with a data expression for line-color.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-122.48383155304096, 37.82882682974591],\nzoom: 16\n});\nmap.on('load', function () {\nmap.addSource('lines', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'color': '#F7455D' // red\n},\n'geometry': {\n'type': 'LineString',\n'coordinates': [\n[-122.4833858013153, 37.829607404976734],\n[-122.4830961227417, 37.82932776098012],\n[-122.4830746650696, 37.82932776098012],\n[-122.48218417167662, 37.82889558180985],\n[-122.48218417167662, 37.82890193740421],\n[-122.48221099376678, 37.82868372835086],\n[-122.4822163581848, 37.82868372835086],\n[-122.48205006122589, 37.82801003030873]\n]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'color': '#33C9EB' // blue\n},\n'geometry': {\n'type': 'LineString',\n'coordinates': [\n[-122.48393028974533, 37.829471820141016],\n[-122.48395174741744, 37.82940826466351],\n[-122.48395174741744, 37.829412501697064],\n[-122.48423874378203, 37.829357420242125],\n[-122.48422533273697, 37.829361657278575],\n[-122.48459815979002, 37.8293425906126],\n[-122.48458743095398, 37.8293447091313],\n[-122.4847564101219, 37.82932776098012],\n[-122.48474299907684, 37.829331998018276],\n[-122.4849334359169, 37.829298101706186],\n[-122.48492807149889, 37.82930022022615],\n[-122.48509705066681, 37.82920488676767],\n[-122.48509168624878, 37.82920912381288],\n[-122.48520433902739, 37.82905870855876],\n[-122.48519897460936, 37.82905870855876],\n[-122.4854403734207, 37.828594749716714],\n[-122.48543500900269, 37.82860534241688],\n[-122.48571664094925, 37.82808206121068],\n[-122.48570591211319, 37.82809689109353],\n[-122.4858346581459, 37.82797189627337],\n[-122.48582661151886, 37.82797825194729],\n[-122.4859634041786, 37.82788503534145],\n[-122.48595803976059, 37.82788927246246],\n[-122.48605459928514, 37.82786596829394]\n]\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'lines',\n'type': 'line',\n'source': 'lines',\n'paint': {\n'line-width': 3,\n// Use a get expression (https://maplibre.org/maplibre-style-spec/expressions/#get)\n// to set the line-color to a feature property value.\n'line-color': ['get', 'color']\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/disable-rotation/","title":"Disable map rotation","text":"<p>Prevent users from rotating a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Disable map rotation&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Prevent users from rotating a map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //stylesheet location\ncenter: [-122.65, 45.52], // starting position\nzoom: 9 // starting zoom\n});\n// disable map rotation using right click + drag\nmap.dragRotate.disable();\n// disable map rotation using touch rotation gesture\nmap.touchZoomRotate.disableRotation();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/disable-scroll-zoom/","title":"Disable scroll zoom","text":"<p>Prevent scroll from zooming a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Disable scroll zoom&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Prevent scroll from zooming a map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //stylesheet location\ncenter: [-122.65, 45.52], // starting position\nzoom: 9 // starting zoom\n});\n// disable map zoom when using scroll\nmap.scrollZoom.disable();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-and-style-rich-text-labels/","title":"Display and style rich text labels","text":"<p>Use the format expression to display country labels in both English and in the local language.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display and style rich text labels&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the format expression to display country labels in both English and in the local language.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nmaplibregl.setRTLTextPlugin(\n'https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'\n);\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\ncenter: [9.49, 49.01], // starting position [lng, lat]\nzoom: 4 // starting zoom\n});\nmap.on('load', function () {\nmap.setLayoutProperty('label_country', 'text-field', [\n'format',\n['get', 'name_en'],\n{ 'font-scale': 1.2 },\n'\\n',\n{},\n['get', 'name'],\n{\n'font-scale': 0.8,\n'text-font': [\n'literal',\n['DIN Offc Pro Italic', 'Arial Unicode MS Regular']\n]\n}\n]);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/drag-a-marker/","title":"Create a draggable Marker","text":"<p>Drag the marker to a new location on a map and populate its coordinates in a display.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create a draggable Marker&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Drag the marker to a new location on a map and populate its coordinates in a display.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.coordinates {\nbackground: rgba(0, 0, 0, 0.5);\ncolor: #fff;\nposition: absolute;\nbottom: 40px;\nleft: 10px;\npadding: 5px 10px;\nmargin: 0;\nfont-size: 11px;\nline-height: 18px;\nborder-radius: 3px;\ndisplay: none;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"coordinates\" class=\"coordinates\"&gt;&lt;/pre&gt;\n&lt;script&gt;\nvar coordinates = document.getElementById('coordinates');\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [0, 0],\nzoom: 2\n});\nvar marker = new maplibregl.Marker({\ndraggable: true\n})\n.setLngLat([0, 0])\n.addTo(map);\nfunction onDragEnd() {\nvar lngLat = marker.getLngLat();\ncoordinates.style.display = 'block';\ncoordinates.innerHTML =\n'Longitude: ' + lngLat.lng + '&lt;br /&gt;Latitude: ' + lngLat.lat;\n}\nmarker.on('dragend', onDragEnd);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/drag-a-point/","title":"Create a draggable point","text":"<p>Drag the point to a new location on a map and populate its coordinates in a display.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create a draggable point&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Drag the point to a new location on a map and populate its coordinates in a display.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.coordinates {\nbackground: rgba(0, 0, 0, 0.5);\ncolor: #fff;\nposition: absolute;\nbottom: 40px;\nleft: 10px;\npadding: 5px 10px;\nmargin: 0;\nfont-size: 11px;\nline-height: 18px;\nborder-radius: 3px;\ndisplay: none;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"coordinates\" class=\"coordinates\"&gt;&lt;/pre&gt;\n&lt;script&gt;\nvar coordinates = document.getElementById('coordinates');\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [0, 0],\nzoom: 2\n});\nvar canvas = map.getCanvasContainer();\nvar geojson = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [0, 0]\n}\n}\n]\n};\nfunction onMove(e) {\nvar coords = e.lngLat;\n// Set a UI indicator for dragging.\ncanvas.style.cursor = 'grabbing';\n// Update the Point feature in `geojson` coordinates\n// and call setData to the source layer `point` on it.\ngeojson.features[0].geometry.coordinates = [coords.lng, coords.lat];\nmap.getSource('point').setData(geojson);\n}\nfunction onUp(e) {\nvar coords = e.lngLat;\n// Print the coordinates of where the point had\n// finished being dragged to on the map.\ncoordinates.style.display = 'block';\ncoordinates.innerHTML =\n'Longitude: ' + coords.lng + '&lt;br /&gt;Latitude: ' + coords.lat;\ncanvas.style.cursor = '';\n// Unbind mouse/touch events\nmap.off('mousemove', onMove);\nmap.off('touchmove', onMove);\n}\nmap.on('load', function () {\n// Add a single point to the map\nmap.addSource('point', {\n'type': 'geojson',\n'data': geojson\n});\nmap.addLayer({\n'id': 'point',\n'type': 'circle',\n'source': 'point',\n'paint': {\n'circle-radius': 10,\n'circle-color': '#3887be'\n}\n});\n// When the cursor enters a feature in the point layer, prepare for dragging.\nmap.on('mouseenter', 'point', function () {\nmap.setPaintProperty('point', 'circle-color', '#3bb2d0');\ncanvas.style.cursor = 'move';\n});\nmap.on('mouseleave', 'point', function () {\nmap.setPaintProperty('point', 'circle-color', '#3887be');\ncanvas.style.cursor = '';\n});\nmap.on('mousedown', 'point', function (e) {\n// Prevent the default map drag behavior.\ne.preventDefault();\ncanvas.style.cursor = 'grab';\nmap.on('mousemove', onMove);\nmap.once('mouseup', onUp);\n});\nmap.on('touchstart', 'point', function (e) {\nif (e.points.length !== 1) return;\n// Prevent the default map drag behavior.\ne.preventDefault();\nmap.on('touchmove', onMove);\nmap.once('touchend', onUp);\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fallback-image/","title":"Use a fallback image","text":"<p>Use a coalesce expression to display another image when a requested image is not available.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Use a fallback image&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a coalesce expression to display another image when a requested image is not available.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77, 38.75],\nzoom: 5\n});\nmap.on('load', function () {\nmap.addSource('points', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [\n-77.03238901390978, 38.913188059745586\n]\n},\n'properties': {\n'title': 'Washington DC',\n'icon': 'monument'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-79.9959, 40.4406]\n},\n'properties': {\n'title': 'Pittsburgh',\n'icon': 'bridges'\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-76.2859, 36.8508]\n},\n'properties': {\n'title': 'Norfolk',\n'icon': 'harbor'\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'points',\n'type': 'symbol',\n'source': 'points',\n'layout': {\n'icon-image': [\n'coalesce',\n['image', ['concat', ['get', 'icon'], '_15']],\n['image', 'marker_15']\n],\n'text-field': ['get', 'title'],\n'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n'text-offset': [0, 0.6],\n'text-anchor': 'top'\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fill-pattern/","title":"Add a pattern to a polygon","text":"<p>Use fill-pattern to draw a polygon from a repeating image pattern.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a pattern to a polygon&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use fill-pattern to draw a polygon from a repeating image pattern.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 1\n});\nmap.on('load', function () {\n// Add GeoJSON data\nmap.addSource('source', {\n'type': 'geojson',\n'data': {\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Polygon',\n'coordinates': [\n[\n[-30, -25],\n[-30, 35],\n[30, 35],\n[30, -25],\n[-30, -25]\n]\n]\n}\n}\n});\n// Load an image to use as the pattern\nmap.loadImage(\n'https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/64px-Cat_silhouette.svg.png',\nfunction (err, image) {\n// Throw an error if something went wrong\nif (err) throw err;\n// Declare the image\nmap.addImage('pattern', image);\n// Use it\nmap.addLayer({\n'id': 'pattern-layer',\n'type': 'fill',\n'source': 'source',\n'paint': {\n'fill-pattern': 'pattern'\n}\n});\n}\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-markers-by-input/","title":"Filter symbols by text input","text":"<p>Filter symbols by icon name by typing in a text input.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Filter symbols by text input&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Filter symbols by icon name by typing in a text input.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.filter-ctrl {\nposition: absolute;\ntop: 10px;\nright: 10px;\nz-index: 1;\n}\n.filter-ctrl input[type='text'] {\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nwidth: 100%;\nborder: 0;\nbackground-color: #fff;\nmargin: 0;\ncolor: rgba(0, 0, 0, 0.5);\npadding: 10px;\nbox-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\nborder-radius: 3px;\nwidth: 180px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"filter-ctrl\"&gt;\n&lt;input\nid=\"filter-input\"\ntype=\"text\"\nname=\"filter\"\nplaceholder=\"Filter by name\"\n/&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar places = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.038659, 38.931567]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.003168, 38.894651]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'bar'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.090372, 38.881189]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'bicycle'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.052477, 38.943951]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.031706, 38.914581]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.020945, 38.878241]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.007481, 38.876516]\n}\n}\n]\n};\nvar layerIDs = []; // Will contain a list used to filter against.\nvar filterInput = document.getElementById('filter-input');\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15\n});\nmap.on('load', function () {\n// Add a GeoJSON source containing place coordinates and information.\nmap.addSource('places', {\n'type': 'geojson',\n'data': places\n});\nplaces.features.forEach(function (feature) {\nvar symbol = feature.properties['icon'];\nvar layerID = 'poi-' + symbol;\n// Add a layer for this symbol type if it hasn't been added already.\nif (!map.getLayer(layerID)) {\nmap.addLayer({\n'id': layerID,\n'type': 'symbol',\n'source': 'places',\n'layout': {\n'icon-image': symbol + '_15',\n'icon-overlap': 'always',\n'text-field': symbol,\n'text-font': [\n'Open Sans Bold',\n'Arial Unicode MS Bold'\n],\n'text-size': 11,\n'text-transform': 'uppercase',\n'text-letter-spacing': 0.05,\n'text-offset': [0, 1.5]\n},\n'paint': {\n'text-color': '#202',\n'text-halo-color': '#fff',\n'text-halo-width': 2\n},\n'filter': ['==', 'icon', symbol]\n});\nlayerIDs.push(layerID);\n}\n});\nfilterInput.addEventListener('keyup', function (e) {\n// If the input value matches a layerID set\n// it's visibility to 'visible' or else hide it.\nvar value = e.target.value.trim().toLowerCase();\nlayerIDs.forEach(function (layerID) {\nmap.setLayoutProperty(\nlayerID,\n'visibility',\nlayerID.indexOf(value) &gt; -1 ? 'visible' : 'none'\n);\n});\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-markers/","title":"Filter symbols by toggling a list","text":"<p>Filter a set of symbols based on a property value in the data.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Filter symbols by toggling a list&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Filter a set of symbols based on a property value in the data.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.filter-group {\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nfont-weight: 600;\nposition: absolute;\ntop: 10px;\nright: 10px;\nz-index: 1;\nborder-radius: 3px;\nwidth: 120px;\ncolor: #fff;\n}\n.filter-group input[type='checkbox']:first-child + label {\nborder-radius: 3px 3px 0 0;\n}\n.filter-group label:last-child {\nborder-radius: 0 0 3px 3px;\nborder: none;\n}\n.filter-group input[type='checkbox'] {\ndisplay: none;\n}\n.filter-group input[type='checkbox'] + label {\nbackground-color: #3386c0;\ndisplay: block;\ncursor: pointer;\npadding: 10px;\nborder-bottom: 1px solid rgba(0, 0, 0, 0.25);\n}\n.filter-group input[type='checkbox'] + label {\nbackground-color: #3386c0;\ntext-transform: capitalize;\n}\n.filter-group input[type='checkbox'] + label:hover,\n.filter-group input[type='checkbox']:checked + label {\nbackground-color: #4ea0da;\n}\n.filter-group input[type='checkbox']:checked + label:before {\ncontent: '\u2714';\nmargin-right: 5px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;nav id=\"filter-group\" class=\"filter-group\"&gt;&lt;/nav&gt;\n&lt;script&gt;\nvar places = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.038659, 38.931567]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.003168, 38.894651]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'bar'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.090372, 38.881189]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'bicycle'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.052477, 38.943951]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.031706, 38.914581]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.020945, 38.878241]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.007481, 38.876516]\n}\n}\n]\n};\nvar filterGroup = document.getElementById('filter-group');\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15\n});\nmap.on('load', function () {\n// Add a GeoJSON source containing place coordinates and information.\nmap.addSource('places', {\n'type': 'geojson',\n'data': places\n});\nplaces.features.forEach(function (feature) {\nvar symbol = feature.properties['icon'];\nvar layerID = 'poi-' + symbol;\n// Add a layer for this symbol type if it hasn't been added already.\nif (!map.getLayer(layerID)) {\nmap.addLayer({\n'id': layerID,\n'type': 'symbol',\n'source': 'places',\n'layout': {\n'icon-image': symbol + '_15',\n'icon-overlap': 'always'\n},\n'filter': ['==', 'icon', symbol]\n});\n// Add checkbox and label elements for the layer.\nvar input = document.createElement('input');\ninput.type = 'checkbox';\ninput.id = layerID;\ninput.checked = true;\nfilterGroup.appendChild(input);\nvar label = document.createElement('label');\nlabel.setAttribute('for', layerID);\nlabel.textContent = symbol;\nfilterGroup.appendChild(label);\n// When the checkbox changes, update the visibility of the layer.\ninput.addEventListener('change', function (e) {\nmap.setLayoutProperty(\nlayerID,\n'visibility',\ne.target.checked ? 'visible' : 'none'\n);\n});\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fitbounds/","title":"Fit a map to a bounding box","text":"<p>Fit the map to a specific area, regardless of the pixel size of the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Fit a map to a bounding box&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Fit the map to a specific area, regardless of the pixel size of the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#fit {\ndisplay: block;\nposition: relative;\nmargin: 0px auto;\nwidth: 50%;\nheight: 40px;\npadding: 10px;\nborder: none;\nborder-radius: 3px;\nfont-size: 12px;\ntext-align: center;\ncolor: #fff;\nbackground: #ee8a65;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fit\"&gt;Fit to Kenya&lt;/button&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.5, 40],\nzoom: 9\n});\ndocument.getElementById('fit').addEventListener('click', function () {\nmap.fitBounds([\n[32.958984, -5.353521],\n[43.50585, 5.615985]\n]);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/flyto-options/","title":"Slowly fly to a location","text":"<p>Use flyTo with flyOptions to slowly zoom to a location.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Slowly fly to a location&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use flyTo with flyOptions to slowly zoom to a location.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#fly {\ndisplay: block;\nposition: relative;\nmargin: 0px auto;\nwidth: 50%;\nheight: 40px;\npadding: 10px;\nborder: none;\nborder-radius: 3px;\nfont-size: 12px;\ntext-align: center;\ncolor: #fff;\nbackground: #ee8a65;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Fly&lt;/button&gt;\n&lt;script&gt;\nvar start = [-74.5, 40];\nvar end = [74.5, 40];\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: start,\nzoom: 9\n});\nvar isAtStart = true;\ndocument.getElementById('fly').addEventListener('click', function () {\n// depending on whether we're currently at point a or b, aim for\n// point a or b\nvar target = isAtStart ? end : start;\n// and now we're at the opposite point\nisAtStart = !isAtStart;\nmap.flyTo({\n// These options control the ending camera position: centered at\n// the target, at zoom level 9, and north up.\ncenter: target,\nzoom: 9,\nbearing: 0,\n// These options control the flight curve, making it move\n// slowly and zoom out almost completely before starting\n// to pan.\nspeed: 0.2, // make the flying slow\ncurve: 1, // change the speed at which it zooms out\n// This can be any easing function: it takes a number between\n// 0 and 1 and returns another number between 0 and 1.\neasing: function (t) {\nreturn t;\n},\n// this animation is considered essential with respect to prefers-reduced-motion\nessential: true\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/flyto/","title":"Fly to a location","text":"<p>Use flyTo to smoothly interpolate between locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Fly to a location&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use flyTo to smoothly interpolate between locations.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#fly {\ndisplay: block;\nposition: relative;\nmargin: 0px auto;\nwidth: 50%;\nheight: 40px;\npadding: 10px;\nborder: none;\nborder-radius: 3px;\nfont-size: 12px;\ntext-align: center;\ncolor: #fff;\nbackground: #ee8a65;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Fly&lt;/button&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.5, 40],\nzoom: 9\n});\ndocument.getElementById('fly').addEventListener('click', function () {\n// Fly to a random location by offsetting the point -74.50, 40\n// by up to 5 degrees.\nmap.flyTo({\ncenter: [\n-74.5 + (Math.random() - 0.5) * 10,\n40 + (Math.random() - 0.5) * 10\n],\nessential: true // this animation is considered essential with respect to prefers-reduced-motion\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fullscreen/","title":"View a fullscreen map","text":"<p>Toggle between current view and fullscreen mode.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;View a fullscreen map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Toggle between current view and fullscreen mode.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //stylesheet location\ncenter: [11.255, 43.77], // starting position\nzoom: 13 // starting zoom\n});\nmap.addControl(new maplibregl.FullscreenControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/game-controls/","title":"Navigate the map with game-like controls","text":"<p>Use the keyboard's arrow keys to move around the map with game-like controls.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Navigate the map with game-like controls&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the keyboard's arrow keys to move around the map with game-like controls.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-87.6298, 41.8781],\nzoom: 17,\nbearing: -12,\npitch: 60,\ninteractive: false\n});\n// pixels the map pans when the up or down arrow is clicked\nvar deltaDistance = 100;\n// degrees the map rotates when the left or right arrow is clicked\nvar deltaDegrees = 25;\nfunction easing(t) {\nreturn t * (2 - t);\n}\nmap.on('load', function () {\nmap.getCanvas().focus();\nmap.getCanvas().addEventListener(\n'keydown',\nfunction (e) {\ne.preventDefault();\nif (e.which === 38) {\n// up\nmap.panBy([0, -deltaDistance], {\neasing: easing\n});\n} else if (e.which === 40) {\n// down\nmap.panBy([0, deltaDistance], {\neasing: easing\n});\n} else if (e.which === 37) {\n// left\nmap.easeTo({\nbearing: map.getBearing() - deltaDegrees,\neasing: easing\n});\n} else if (e.which === 39) {\n// right\nmap.easeTo({\nbearing: map.getBearing() + deltaDegrees,\neasing: easing\n});\n}\n},\ntrue\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geocoder/","title":"Geocode with Nominatim","text":"<p>Geocode with Nominatim and the maplibre-gl-geocoder plugin.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Geocode with Nominatim&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Geocode with Nominatim and the maplibre-gl-geocoder plugin.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- Load the `maplibre-gl-geocoder` plugin. --&gt;\n&lt;script src=\"https://unpkg.com/@maplibre/maplibre-gl-geocoder@1.2.0/dist/maplibre-gl-geocoder.min.js\"&gt;&lt;/script&gt;\n&lt;link\nrel=\"stylesheet\"\nhref=\"https://unpkg.com/@maplibre/maplibre-gl-geocoder@1.2.0/dist/maplibre-gl-geocoder.css\"\ntype=\"text/css\"\n/&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\n// Use a minimalist raster style\nstyle: {\n'version': 8,\n'name': 'Blank',\n'center': [0, 0],\n'zoom': 0,\n'sources': {\n'raster-tiles': {\n'type': 'raster',\n'tiles': ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n'tileSize': 256,\n'minzoom': 0,\n'maxzoom': 19\n}\n},\n'layers': [\n{\n'id': 'background',\n'type': 'background',\n'paint': {\n'background-color': '#e0dfdf'\n}\n},\n{\n'id': 'simple-tiles',\n'type': 'raster',\n'source': 'raster-tiles'\n}\n],\n'id': 'blank'\n},\ncenter: [-87.61694, 41.86625],\nzoom: 15.99,\npitch: 40,\nbearing: 20,\nantialias: true\n});\nvar geocoder_api = {\nforwardGeocode: async (config) =&gt; {\nconst features = [];\ntry {\nlet request =\n'https://nominatim.openstreetmap.org/search?q=' +\nconfig.query +\n'&amp;format=geojson&amp;polygon_geojson=1&amp;addressdetails=1';\nconst response = await fetch(request);\nconst geojson = await response.json();\nfor (let feature of geojson.features) {\nlet center = [\nfeature.bbox[0] +\n(feature.bbox[2] - feature.bbox[0]) / 2,\nfeature.bbox[1] +\n(feature.bbox[3] - feature.bbox[1]) / 2\n];\nlet point = {\ntype: 'Feature',\ngeometry: {\ntype: 'Point',\ncoordinates: center\n},\nplace_name: feature.properties.display_name,\nproperties: feature.properties,\ntext: feature.properties.display_name,\nplace_type: ['place'],\ncenter: center\n};\nfeatures.push(point);\n}\n} catch (e) {\nconsole.error(`Failed to forwardGeocode with error: ${e}`);\n}\nreturn {\nfeatures: features\n};\n}\n};\nmap.addControl(\nnew MaplibreGeocoder(geocoder_api, {\nmaplibregl: maplibregl\n})\n);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-layer-in-stack/","title":"Add a new layer below labels","text":"<p>Use the second argument of addLayer to add a layer below labels.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a new layer below labels&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the second argument of addLayer to add a layer below labels.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-88.13734351262877, 35.137451890638886],\nzoom: 4\n});\nmap.on('load', function () {\nvar layers = map.getStyle().layers;\n// Find the index of the first symbol layer in the map style\nvar firstSymbolId;\nfor (var i = 0; i &lt; layers.length; i++) {\nif (layers[i].type === 'symbol') {\nfirstSymbolId = layers[i].id;\nbreak;\n}\n}\nmap.addSource('urban-areas', {\n'type': 'geojson',\n'data':\n'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n});\nmap.addLayer(\n{\n'id': 'urban-areas-fill',\n'type': 'fill',\n'source': 'urban-areas',\n'layout': {},\n'paint': {\n'fill-color': '#f08',\n'fill-opacity': 0.4\n}\n// This is the important part of this example: the addLayer\n// method takes 2 arguments: the layer as an object, and a string\n// representing another layer's name. if the other layer\n// exists in the stylesheet already, the new layer will be positioned\n// right before that layer in the stack, making it possible to put\n// 'overlays' anywhere in the layer stack.\n// Insert the layer beneath the first symbol layer.\n},\nfirstSymbolId\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-line/","title":"Add a GeoJSON line","text":"<p>Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a GeoJSON line&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-122.486052, 37.830348],\nzoom: 15\n});\nmap.on('load', function () {\nmap.addSource('route', {\n'type': 'geojson',\n'data': {\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'LineString',\n'coordinates': [\n[-122.48369693756104, 37.83381888486939],\n[-122.48348236083984, 37.83317489144141],\n[-122.48339653015138, 37.83270036637107],\n[-122.48356819152832, 37.832056363179625],\n[-122.48404026031496, 37.83114119107971],\n[-122.48404026031496, 37.83049717427869],\n[-122.48348236083984, 37.829920943955045],\n[-122.48356819152832, 37.82954808664175],\n[-122.48507022857666, 37.82944639795659],\n[-122.48610019683838, 37.82880236636284],\n[-122.48695850372314, 37.82931081282506],\n[-122.48700141906738, 37.83080223556934],\n[-122.48751640319824, 37.83168351665737],\n[-122.48803138732912, 37.832158048267786],\n[-122.48888969421387, 37.83297152392784],\n[-122.48987674713133, 37.83263257682617],\n[-122.49043464660643, 37.832937629287755],\n[-122.49125003814696, 37.832429207817725],\n[-122.49163627624512, 37.832564787218985],\n[-122.49223709106445, 37.83337825839438],\n[-122.49378204345702, 37.83368330777276]\n]\n}\n}\n});\nmap.addLayer({\n'id': 'route',\n'type': 'line',\n'source': 'route',\n'layout': {\n'line-join': 'round',\n'line-cap': 'round'\n},\n'paint': {\n'line-color': '#888',\n'line-width': 8\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-markers/","title":"Draw GeoJSON points","text":"<p>Draw points from a GeoJSON collection to a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Draw GeoJSON points&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Draw points from a GeoJSON collection to a map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/positron/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [0, 0],\nzoom: 1\n});\nmap.on('load', function () {\n// Add an image to use as a custom marker\nmap.loadImage(\n'https://maplibre.org/maplibre-gl-js-docs/assets/osgeo-logo.png',\nfunction (error, image) {\nif (error) throw error;\nmap.addImage('custom-marker', image);\n// Add a GeoJSON source with 15 points\nmap.addSource('conferences', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [100.4933, 13.7551]\n},\n'properties': { 'year': '2004' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [6.6523, 46.5535]\n},\n'properties': { 'year': '2006' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-123.3596, 48.4268]\n},\n'properties': { 'year': '2007' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [18.4264, -33.9224]\n},\n'properties': { 'year': '2008' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [151.195, -33.8552]\n},\n'properties': { 'year': '2009' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [2.1404, 41.3925]\n},\n'properties': { 'year': '2010' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-104.8548, 39.7644]\n},\n'properties': { 'year': '2011' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-1.1665, 52.9539]\n},\n'properties': { 'year': '2013' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-122.6544, 45.5428]\n},\n'properties': { 'year': '2014' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [126.974, 37.5651]\n},\n'properties': { 'year': '2015' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [7.1112, 50.7255]\n},\n'properties': { 'year': '2016' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-71.0314, 42.3539]\n},\n'properties': { 'year': '2017' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [39.2794, -6.8173]\n},\n'properties': { 'year': '2018' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [26.0961, 44.4379]\n},\n'properties': { 'year': '2019' }\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-114.0879, 51.0279]\n},\n'properties': { 'year': '2020' }\n}\n]\n}\n});\n// Add a symbol layer\nmap.addLayer({\n'id': 'conferences',\n'type': 'symbol',\n'source': 'conferences',\n'layout': {\n'icon-image': 'custom-marker',\n// get the year from the source's \"year\" property\n'text-field': ['get', 'year'],\n'text-font': [\n'Open Sans Semibold',\n'Arial Unicode MS Bold'\n],\n'text-offset': [0, 1.25],\n'text-anchor': 'top'\n}\n});\n}\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-polygon/","title":"Add a GeoJSON polygon","text":"<p>Style a polygon with the fill layer type.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a GeoJSON polygon&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Style a polygon with the fill layer type.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-68.13734351262877, 45.137451890638886],\nzoom: 5\n});\nmap.on('load', function () {\nmap.addSource('maine', {\n'type': 'geojson',\n'data': {\n'type': 'Feature',\n'geometry': {\n'type': 'Polygon',\n'coordinates': [\n[\n[-67.13734351262877, 45.137451890638886],\n[-66.96466, 44.8097],\n[-68.03252, 44.3252],\n[-69.06, 43.98],\n[-70.11617, 43.68405],\n[-70.64573401557249, 43.090083319667144],\n[-70.75102474636725, 43.08003225358635],\n[-70.79761105007827, 43.21973948828747],\n[-70.98176001655037, 43.36789581966826],\n[-70.94416541205806, 43.46633942318431],\n[-71.08482, 45.3052400000002],\n[-70.6600225491012, 45.46022288673396],\n[-70.30495378282376, 45.914794623389355],\n[-70.00014034695016, 46.69317088478567],\n[-69.23708614772835, 47.44777598732787],\n[-68.90478084987546, 47.184794623394396],\n[-68.23430497910454, 47.35462921812177],\n[-67.79035274928509, 47.066248887716995],\n[-67.79141211614706, 45.702585354182816],\n[-67.13734351262877, 45.137451890638886]\n]\n]\n}\n}\n});\nmap.addLayer({\n'id': 'maine',\n'type': 'fill',\n'source': 'maine',\n'layout': {},\n'paint': {\n'fill-color': '#088',\n'fill-opacity': 0.8\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/heatmap-layer/","title":"Create a heatmap layer","text":"<p>Visualize earthquake frequency by location using a heatmap layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create a heatmap layer&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Visualize earthquake frequency by location using a heatmap layer.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-120, 50],\nzoom: 2\n});\nmap.on('load', function () {\n// Add a geojson point source.\n// Heatmap layers also work with a vector tile source.\nmap.addSource('earthquakes', {\n'type': 'geojson',\n'data':\n'https://maplibre.org/maplibre-gl-js-docs/assets/earthquakes.geojson'\n});\nmap.addLayer(\n{\n'id': 'earthquakes-heat',\n'type': 'heatmap',\n'source': 'earthquakes',\n'maxzoom': 9,\n'paint': {\n// Increase the heatmap weight based on frequency and property magnitude\n'heatmap-weight': [\n'interpolate',\n['linear'],\n['get', 'mag'],\n0,\n0,\n6,\n1\n],\n// Increase the heatmap color weight weight by zoom level\n// heatmap-intensity is a multiplier on top of heatmap-weight\n'heatmap-intensity': [\n'interpolate',\n['linear'],\n['zoom'],\n0,\n1,\n9,\n3\n],\n// Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n// Begin color ramp at 0-stop with a 0-transparancy color\n// to create a blur-like effect.\n'heatmap-color': [\n'interpolate',\n['linear'],\n['heatmap-density'],\n0,\n'rgba(33,102,172,0)',\n0.2,\n'rgb(103,169,207)',\n0.4,\n'rgb(209,229,240)',\n0.6,\n'rgb(253,219,199)',\n0.8,\n'rgb(239,138,98)',\n1,\n'rgb(178,24,43)'\n],\n// Adjust the heatmap radius by zoom level\n'heatmap-radius': [\n'interpolate',\n['linear'],\n['zoom'],\n0,\n2,\n9,\n20\n],\n// Transition from heatmap to circle layer by zoom level\n'heatmap-opacity': [\n'interpolate',\n['linear'],\n['zoom'],\n7,\n1,\n9,\n0\n]\n}\n},\n'waterway'\n);\nmap.addLayer(\n{\n'id': 'earthquakes-point',\n'type': 'circle',\n'source': 'earthquakes',\n'minzoom': 7,\n'paint': {\n// Size circle radius by earthquake magnitude and zoom level\n'circle-radius': [\n'interpolate',\n['linear'],\n['zoom'],\n7,\n['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\n16,\n['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\n],\n// Color circle by earthquake magnitude\n'circle-color': [\n'interpolate',\n['linear'],\n['get', 'mag'],\n1,\n'rgba(33,102,172,0)',\n2,\n'rgb(103,169,207)',\n3,\n'rgb(209,229,240)',\n4,\n'rgb(253,219,199)',\n5,\n'rgb(239,138,98)',\n6,\n'rgb(178,24,43)'\n],\n'circle-stroke-color': 'white',\n'circle-stroke-width': 1,\n// Transition from heatmap to circle layer by zoom level\n'circle-opacity': [\n'interpolate',\n['linear'],\n['zoom'],\n7,\n0,\n8,\n1\n]\n}\n},\n'waterway'\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/hover-styles/","title":"Create a hover effect","text":"<p>Use events and feature states to create a per feature hover effect.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create a hover effect&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use events and feature states to create a per feature hover effect.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-100.486052, 37.830348],\nzoom: 2\n});\nvar hoveredStateId = null;\nmap.on('load', function () {\nmap.addSource('states', {\n'type': 'geojson',\n'data':\n'https://maplibre.org/maplibre-gl-js-docs/assets/us_states.geojson'\n});\n// The feature-state dependent fill-opacity expression will render the hover effect\n// when a feature's hover state is set to true.\nmap.addLayer({\n'id': 'state-fills',\n'type': 'fill',\n'source': 'states',\n'layout': {},\n'paint': {\n'fill-color': '#627BC1',\n'fill-opacity': [\n'case',\n['boolean', ['feature-state', 'hover'], false],\n1,\n0.5\n]\n}\n});\nmap.addLayer({\n'id': 'state-borders',\n'type': 'line',\n'source': 'states',\n'layout': {},\n'paint': {\n'line-color': '#627BC1',\n'line-width': 2\n}\n});\n// When the user moves their mouse over the state-fill layer, we'll update the\n// feature state for the feature under the mouse.\nmap.on('mousemove', 'state-fills', function (e) {\nif (e.features.length &gt; 0) {\nif (hoveredStateId) {\nmap.setFeatureState(\n{ source: 'states', id: hoveredStateId },\n{ hover: false }\n);\n}\nhoveredStateId = e.features[0].id;\nmap.setFeatureState(\n{ source: 'states', id: hoveredStateId },\n{ hover: true }\n);\n}\n});\n// When the mouse leaves the state-fill layer, update the feature state of the\n// previously hovered feature.\nmap.on('mouseleave', 'state-fills', function () {\nif (hoveredStateId) {\nmap.setFeatureState(\n{ source: 'states', id: hoveredStateId },\n{ hover: false }\n);\n}\nhoveredStateId = null;\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/interactive-false/","title":"Display a non-interactive map","text":"<p>Disable interactivity to create a static map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display a non-interactive map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Disable interactivity to create a static map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.5, 40],\nzoom: 9,\n// causes pan &amp; zoom handlers not to be applied, similar to\n// .dragging.disable() and other handler .disable() funtions in Leaflet.\ninteractive: false\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/jump-to/","title":"Jump to a series of locations","text":"<p>Use the jumpTo function to showcase multiple locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Jump to a series of locations&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the jumpTo function to showcase multiple locations.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar cities = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [100.507, 13.745]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [98.993, 18.793]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [99.838, 19.924]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [102.812, 17.408]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [100.458, 7.001]\n}\n},\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'type': 'Point',\n'coordinates': [100.905, 12.935]\n}\n}\n]\n};\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [100.507, 13.745],\nzoom: 9\n});\nmap.on('load', function () {\ncities.features.forEach(function (city, index) {\nsetTimeout(function () {\nmap.jumpTo({ center: city.geometry.coordinates });\n}, 2000 * index);\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/language-switch/","title":"Change a map's language","text":"<p>Use setLayoutProperty to switch languages dynamically.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Change a map's language&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use setLayoutProperty to switch languages dynamically.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#buttons {\nwidth: 90%;\nmargin: 0 auto;\n}\n.button {\ndisplay: inline-block;\nposition: relative;\ncursor: pointer;\nwidth: 20%;\npadding: 8px;\nborder-radius: 3px;\nmargin-top: 10px;\nfont-size: 12px;\ntext-align: center;\ncolor: #fff;\nbackground: #ee8a65;\nfont-family: sans-serif;\nfont-weight: bold;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;ul id=\"buttons\"&gt;\n&lt;li id=\"button-fr\" class=\"button\"&gt;French&lt;/li&gt;\n&lt;li id=\"button-ru\" class=\"button\"&gt;Russian&lt;/li&gt;\n&lt;li id=\"button-de\" class=\"button\"&gt;German&lt;/li&gt;\n&lt;li id=\"button-es\" class=\"button\"&gt;Spanish&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [16.05, 48],\nzoom: 2.9\n});\ndocument\n.getElementById('buttons')\n.addEventListener('click', function (event) {\nvar language = event.target.id.substr('button-'.length);\n// Use setLayoutProperty to set the value of a layout property in a style layer.\n// The three arguments are the id of the layer, the name of the layout property,\n// and the new property value.\nmap.setLayoutProperty('label_country', 'text-field', [\n'get',\n'name:' + language\n]);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/line-across-180th-meridian/","title":"Display line that crosses 180th meridian","text":"<p>Draw a line across the 180th meridian using a GeoJSON source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display line that crosses 180th meridian&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Draw a line across the 180th meridian using a GeoJSON source.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-41.62667, 26.11598],\nzoom: 0\n});\nmap.on('load', function () {\nmap.addLayer({\n'id': 'route',\n'type': 'line',\n'source': {\n'type': 'geojson',\n'data': {\n'type': 'Feature',\n'properties': {},\n'geometry': createGeometry(false)\n}\n},\n'layout': { 'line-cap': 'round' },\n'paint': {\n'line-color': '#007296',\n'line-width': 4\n}\n});\nmap.addLayer({\n'id': 'route-label',\n'type': 'symbol',\n'source': 'route',\n'layout': {\n'symbol-placement': 'line-center',\n'text-field': 'Crosses the world'\n}\n});\nmap.addLayer({\n'id': 'route-two',\n'type': 'line',\n'source': {\n'type': 'geojson',\n'data': {\n'type': 'Feature',\n'properties': {},\n'geometry': createGeometry(true)\n}\n},\n'layout': { 'line-cap': 'round' },\n'paint': {\n'line-color': '#F06317',\n'line-width': 4\n}\n});\nmap.addLayer({\n'id': 'route-two-label',\n'type': 'symbol',\n'source': 'route-two',\n'layout': {\n'symbol-placement': 'line-center',\n'text-field': 'Crosses 180th meridian'\n}\n});\nfunction createGeometry(doesCrossAntimeridian) {\nvar geometry = {\n'type': 'LineString',\n'coordinates': [\n[-72.42187, -16.59408],\n[140.27343, 35.67514]\n]\n};\n// To draw a line across the 180th meridian,\n// if the longitude of the second point minus\n// the longitude of original (or previous) point is &gt;= 180,\n// subtract 360 from the longitude of the second point.\n// If it is less than 180, add 360 to the second point.\nif (doesCrossAntimeridian) {\nvar startLng = geometry.coordinates[0][0];\nvar endLng = geometry.coordinates[1][0];\nif (endLng - startLng &gt;= 180) {\ngeometry.coordinates[1][0] -= 360;\n} else if (endLng - startLng &lt; 180) {\ngeometry.coordinates[1][0] += 360;\n}\n}\nreturn geometry;\n}\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/line-gradient/","title":"Create a gradient line using an expression","text":"<p>Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create a gradient line using an expression&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = (window.map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.035, 38.875],\nzoom: 12\n}));\nvar geojson = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {},\n'geometry': {\n'coordinates': [\n[-77.044211, 38.852924],\n[-77.045659, 38.860158],\n[-77.044232, 38.862326],\n[-77.040879, 38.865454],\n[-77.039936, 38.867698],\n[-77.040338, 38.86943],\n[-77.04264, 38.872528],\n[-77.03696, 38.878424],\n[-77.032309, 38.87937],\n[-77.030056, 38.880945],\n[-77.027645, 38.881779],\n[-77.026946, 38.882645],\n[-77.026942, 38.885502],\n[-77.028054, 38.887449],\n[-77.02806, 38.892088],\n[-77.03364, 38.892108],\n[-77.033643, 38.899926]\n],\n'type': 'LineString'\n}\n}\n]\n};\nmap.on('load', function () {\n// 'line-gradient' can only be used with GeoJSON sources\n// and the source must have the 'lineMetrics' option set to true\nmap.addSource('line', {\ntype: 'geojson',\nlineMetrics: true,\ndata: geojson\n});\n// the layer must be of type 'line'\nmap.addLayer({\ntype: 'line',\nsource: 'line',\nid: 'line',\npaint: {\n'line-color': 'red',\n'line-width': 14,\n// 'line-gradient' must be specified using an expression\n// with the special 'line-progress' property\n'line-gradient': [\n'interpolate',\n['linear'],\n['line-progress'],\n0,\n'blue',\n0.1,\n'royalblue',\n0.3,\n'cyan',\n0.5,\n'lime',\n0.7,\n'yellow',\n1,\n'red'\n]\n},\nlayout: {\n'line-cap': 'round',\n'line-join': 'round'\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/live-geojson/","title":"Add live realtime data","text":"<p>Use realtime GeoJSON data streams to move a symbol on your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add live realtime data&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use realtime GeoJSON data streams to move a symbol on your map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 0\n});\nvar url = 'https://wanderdrone.appspot.com/';\nmap.on('load', function () {\nvar request = new XMLHttpRequest();\nwindow.setInterval(function () {\n// make a GET request to parse the GeoJSON at the url\nrequest.open('GET', url, true);\nrequest.onload = function () {\nif (this.status &gt;= 200 &amp;&amp; this.status &lt; 400) {\n// retrieve the JSON from the response\nvar json = JSON.parse(this.response);\n// update the drone symbol's location on the map\nmap.getSource('drone').setData(json);\n// fly the map to the drone's current location\nmap.flyTo({\ncenter: json.geometry.coordinates,\nspeed: 0.5\n});\n}\n};\nrequest.send();\n}, 2000);\nmap.addSource('drone', { type: 'geojson', data: url });\nmap.addLayer({\n'id': 'drone',\n'type': 'symbol',\n'source': 'drone',\n'layout': {\n'icon-image': 'rocket_15'\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/live-update-feature/","title":"Update a feature in realtime","text":"<p>Change an existing feature on your map in real-time by updating its data.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Update a feature in realtime&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Change an existing feature on your map in real-time by updating its data.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script src=\"https://d3js.org/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 0\n});\nmap.on('load', function () {\n// We use D3 to fetch the JSON here so that we can parse and use it separately\n// from GL JS's use in the added source. You can use any request method (library\n// or otherwise) that you want.\nd3.json(\n'https://maplibre.org/maplibre-gl-js-docs/assets/hike.geojson',\nfunction (err, data) {\nif (err) throw err;\n// save full coordinate list for later\nvar coordinates = data.features[0].geometry.coordinates;\n// start by showing just the first coordinate\ndata.features[0].geometry.coordinates = [coordinates[0]];\n// add it to the map\nmap.addSource('trace', { type: 'geojson', data: data });\nmap.addLayer({\n'id': 'trace',\n'type': 'line',\n'source': 'trace',\n'paint': {\n'line-color': 'yellow',\n'line-opacity': 0.75,\n'line-width': 5\n}\n});\n// setup the viewport\nmap.jumpTo({ 'center': coordinates[0], 'zoom': 14 });\nmap.setPitch(30);\n// on a regular basis, add more coordinates from the saved list and update the map\nvar i = 0;\nvar timer = window.setInterval(function () {\nif (i &lt; coordinates.length) {\ndata.features[0].geometry.coordinates.push(\ncoordinates[i]\n);\nmap.getSource('trace').setData(data);\nmap.panTo(coordinates[i]);\ni++;\n} else {\nwindow.clearInterval(timer);\n}\n}, 10);\n}\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/local-geojson-experimental/","title":"View local GeoJSON (experimental)","text":"<p>View local GeoJSON with experimental File System Access API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;View local GeoJSON (experimental)&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"View local GeoJSON with experimental File System Access API.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#viewbutton {\nposition: absolute;\ntop: 0;\nleft: 0;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"viewbutton\"&gt;View local GeoJSON file&lt;/button&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-8.3226655, 53.7654751],\nzoom: 8\n});\nvar viewbutton = document.getElementById('viewbutton');\nasync function buttonClickHandler() {\nlet fileHandle;\n[fileHandle] = await window.showOpenFilePicker({\n// allow only single file\nmultiple: false,\n// apply filter for GeoJSON files\ntypes: [\n{\ndescription: 'GeoJSON',\naccept: { 'application/geo+json': ['.geojson'] }\n}\n],\n// start in download directory\nstartIn: 'downloads'\n});\n// get file handle and read content\nconst file = await fileHandle.getFile();\nconst contents = await file.text();\n// parse file as json and add as source to the map\nmap.addSource('uploaded-source', {\n'type': 'geojson',\n'data': JSON.parse(contents)\n});\nmap.addLayer({\n'id': 'uploaded-polygons',\n'type': 'fill',\n'source': 'uploaded-source',\n'paint': {\n'fill-color': '#888888',\n'fill-outline-color': 'red',\n'fill-opacity': 0.4\n},\n// filter for (multi)polygons; for also displaying linestrings\n// or points add more layers with different filters\n'filter': ['==', '$type', 'Polygon']\n});\n}\nif ('showOpenFilePicker' in window) {\nviewbutton.addEventListener('click', buttonClickHandler);\n} else {\nviewbutton.innerText =\n'Your browser does not support File System Access API';\n// If you want a fallback, try &lt;input type=\"file\"&gt;; but this uses classical file upload\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/local-geojson/","title":"View local GeoJSON","text":"<p>View local GeoJSON without server upload.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;View local GeoJSON&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"View local GeoJSON without server upload.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#file {\nposition: absolute;\ntop: 0;\nleft: 0;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;input\ntype=\"file\"\nid=\"file\"\nname=\"file\"\naccept=\"application/geo+json,application/vnd.geo+json,.geojson\"\n/&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-8.3226655, 53.7654751],\nzoom: 8\n});\nfunction handleFileSelect(evt) {\nvar file = evt.target.files[0]; // Read first selected file\nvar reader = new FileReader();\nreader.onload = function (theFile) {\n// Parse as (geo)JSON\nvar geoJSONcontent = JSON.parse(theFile.target.result);\n// Add as source to the map\nmap.addSource('uploaded-source', {\n'type': 'geojson',\n'data': geoJSONcontent\n});\nmap.addLayer({\n'id': 'uploaded-polygons',\n'type': 'fill',\n'source': 'uploaded-source',\n'paint': {\n'fill-color': '#888888',\n'fill-outline-color': 'red',\n'fill-opacity': 0.4\n},\n// filter for (multi)polygons; for also displaying linestrings\n// or points add more layers with different filters\n'filter': ['==', '$type', 'Polygon']\n});\n};\n// Read the GeoJSON as text\nreader.readAsText(file, 'UTF-8');\n}\ndocument\n.getElementById('file')\n.addEventListener('change', handleFileSelect, false);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/local-ideographs/","title":"Use locally generated ideographs","text":"<p>Use the localIdeographFontFamily setting to speed up map load times by using locally available fonts instead of font data fetched from the server.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Use locally generated ideographs&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the localIdeographFontFamily setting to speed up map load times by using locally available fonts instead of font data fetched from the server.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [120.3049, 31.4751],\nzoom: 12,\nlocalIdeographFontFamily: \"'Noto Sans', 'Noto Sans CJK SC', sans-serif\"\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/locate-user/","title":"Locate the user","text":"<p>Geolocate the user and then track their current location on the map using the GeolocateControl.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Locate the user&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Geolocate the user and then track their current location on the map using the GeolocateControl.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-96, 37.8], // starting position\nzoom: 3 // starting zoom\n});\n// Add geolocate control to the map.\nmap.addControl(\nnew maplibregl.GeolocateControl({\npositionOptions: {\nenableHighAccuracy: true\n},\ntrackUserLocation: true\n})\n);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/map-tiles/","title":"Add a raster tile source","text":"<p>Add a third-party raster source to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a raster tile source&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a third-party raster source to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle: {\n'version': 8,\n'sources': {\n'raster-tiles': {\n'type': 'raster',\n'tiles': [\n'https://stamen-tiles.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg'\n],\n'tileSize': 256,\n'attribution':\n'Map tiles by &lt;a target=\"_top\" rel=\"noopener\" href=\"http://stamen.com\"&gt;Stamen Design&lt;/a&gt;, under &lt;a target=\"_top\" rel=\"noopener\" href=\"http://creativecommons.org/licenses/by/3.0\"&gt;CC BY 3.0&lt;/a&gt;. Data by &lt;a target=\"_top\" rel=\"noopener\" href=\"http://openstreetmap.org\"&gt;OpenStreetMap&lt;/a&gt;, under &lt;a target=\"_top\" rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/3.0\"&gt;CC BY SA&lt;/a&gt;'\n}\n},\n'layers': [\n{\n'id': 'simple-tiles',\n'type': 'raster',\n'source': 'raster-tiles',\n'minzoom': 0,\n'maxzoom': 22\n}\n]\n},\ncenter: [-74.5, 40], // starting position\nzoom: 2 // starting zoom\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/mapbox-gl-draw/","title":"Show drawn polygon area","text":"<p>Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Show drawn polygon area&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.calculation-box {\nheight: 75px;\nwidth: 150px;\nposition: absolute;\nbottom: 40px;\nleft: 10px;\nbackground-color: rgba(255, 255, 255, 0.9);\npadding: 15px;\ntext-align: center;\n}\np {\nfont-family: 'Open Sans';\nmargin: 0;\nfont-size: 13px;\n}\n&lt;/style&gt;\n&lt;script src=\"https://api.tiles.mapbox.com/mapbox.js/plugins/turf/v3.0.11/turf.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.0/mapbox-gl-draw.js\"&gt;&lt;/script&gt;\n&lt;link\nrel=\"stylesheet\"\nhref=\"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.0/mapbox-gl-draw.css\"\ntype=\"text/css\"\n/&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"calculation-box\"&gt;\n&lt;p&gt;Draw a polygon using the draw tools.&lt;/p&gt;\n&lt;div id=\"calculated-area\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //hosted style id\ncenter: [-91.874, 42.76], // starting position\nzoom: 12 // starting zoom\n});\nvar draw = new MapboxDraw({\ndisplayControlsDefault: false,\ncontrols: {\npolygon: true,\ntrash: true\n}\n});\nmap.addControl(draw);\nmap.on('draw.create', updateArea);\nmap.on('draw.delete', updateArea);\nmap.on('draw.update', updateArea);\nfunction updateArea(e) {\nvar data = draw.getAll();\nvar answer = document.getElementById('calculated-area');\nif (data.features.length &gt; 0) {\nvar area = turf.area(data);\n// restrict to area to 2 decimal points\nvar rounded_area = Math.round(area * 100) / 100;\nanswer.innerHTML =\n'&lt;p&gt;&lt;strong&gt;' +\nrounded_area +\n'&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;square meters&lt;/p&gt;';\n} else {\nanswer.innerHTML = '';\nif (e.type !== 'draw.delete')\nalert('Use the draw tools to draw a polygon!');\n}\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/mapbox-gl-rtl-text/","title":"Add support for right-to-left scripts","text":"<p>Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add support for right-to-left scripts&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nmaplibregl.setRTLTextPlugin(\n'https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js',\nnull,\ntrue // Lazy load the plugin\n);\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [44.3763, 33.2788],\nzoom: 11\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/measure/","title":"Measure distances","text":"<p>Click points on a map to create lines that measure distanced using turf.length.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Measure distances&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Click points on a map to create lines that measure distanced using turf.length.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.distance-container {\nposition: absolute;\ntop: 10px;\nleft: 10px;\nz-index: 1;\n}\n.distance-container &gt; * {\nbackground-color: rgba(0, 0, 0, 0.5);\ncolor: #fff;\nfont-size: 11px;\nline-height: 18px;\ndisplay: block;\nmargin: 0;\npadding: 5px 10px;\nborder-radius: 3px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"distance\" class=\"distance-container\"&gt;&lt;/div&gt;\n&lt;script src=\"https://npmcdn.com/@turf/turf@5.1.6/turf.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [2.3399, 48.8555],\nzoom: 12\n});\nvar distanceContainer = document.getElementById('distance');\n// GeoJSON object to hold our measurement features\nvar geojson = {\n'type': 'FeatureCollection',\n'features': []\n};\n// Used to draw a line between points\nvar linestring = {\n'type': 'Feature',\n'geometry': {\n'type': 'LineString',\n'coordinates': []\n}\n};\nmap.on('load', function () {\nmap.addSource('geojson', {\n'type': 'geojson',\n'data': geojson\n});\n// Add styles to the map\nmap.addLayer({\nid: 'measure-points',\ntype: 'circle',\nsource: 'geojson',\npaint: {\n'circle-radius': 5,\n'circle-color': '#000'\n},\nfilter: ['in', '$type', 'Point']\n});\nmap.addLayer({\nid: 'measure-lines',\ntype: 'line',\nsource: 'geojson',\nlayout: {\n'line-cap': 'round',\n'line-join': 'round'\n},\npaint: {\n'line-color': '#000',\n'line-width': 2.5\n},\nfilter: ['in', '$type', 'LineString']\n});\nmap.on('click', function (e) {\nvar features = map.queryRenderedFeatures(e.point, {\nlayers: ['measure-points']\n});\n// Remove the linestring from the group\n// So we can redraw it based on the points collection\nif (geojson.features.length &gt; 1) geojson.features.pop();\n// Clear the Distance container to populate it with a new value\ndistanceContainer.innerHTML = '';\n// If a feature was clicked, remove it from the map\nif (features.length) {\nvar id = features[0].properties.id;\ngeojson.features = geojson.features.filter(function (point) {\nreturn point.properties.id !== id;\n});\n} else {\nvar point = {\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [e.lngLat.lng, e.lngLat.lat]\n},\n'properties': {\n'id': String(new Date().getTime())\n}\n};\ngeojson.features.push(point);\n}\nif (geojson.features.length &gt; 1) {\nlinestring.geometry.coordinates = geojson.features.map(\nfunction (point) {\nreturn point.geometry.coordinates;\n}\n);\ngeojson.features.push(linestring);\n// Populate the distanceContainer with total distance\nvar value = document.createElement('pre');\nvalue.textContent =\n'Total distance: ' +\nturf.length(linestring).toLocaleString() +\n'km';\ndistanceContainer.appendChild(value);\n}\nmap.getSource('geojson').setData(geojson);\n});\n});\nmap.on('mousemove', function (e) {\nvar features = map.queryRenderedFeatures(e.point, {\nlayers: ['measure-points']\n});\n// UI indicator for clicking/hovering a point on the map\nmap.getCanvas().style.cursor = features.length\n? 'pointer'\n: 'crosshair';\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/mouse-position/","title":"Get coordinates of the mouse pointer","text":"<p>Show mouse position on hover with pixel and latitude and longitude coordinates.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Get coordinates of the mouse pointer&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Show mouse position on hover with pixel and latitude and longitude coordinates.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style type=\"text/css\"&gt;\n#info {\ndisplay: block;\nposition: relative;\nmargin: 0px auto;\nwidth: 50%;\npadding: 10px;\nborder: none;\nborder-radius: 3px;\nfont-size: 12px;\ntext-align: center;\ncolor: #222;\nbackground: #fff;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"info\"&gt;&lt;/pre&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.5, 40], // starting position\nzoom: 9 // starting zoom\n});\nmap.on('mousemove', function (e) {\ndocument.getElementById('info').innerHTML =\n// e.point is the x, y coordinates of the mousemove event relative\n// to the top-left corner of the map\nJSON.stringify(e.point) +\n'&lt;br /&gt;' +\n// e.lngLat is the longitude, latitude geographical position of the event\nJSON.stringify(e.lngLat.wrap());\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/multiple-geometries/","title":"Add multiple geometries from one GeoJSON source","text":"<p>Add a polygon and circle layer from the same GeoJSON source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add multiple geometries from one GeoJSON source&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a polygon and circle layer from the same GeoJSON source.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-121.403732, 40.492392],\nzoom: 10\n});\nmap.on('load', function () {\nmap.addSource('national-park', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Polygon',\n'coordinates': [\n[\n[-121.353637, 40.584978],\n[-121.284551, 40.584758],\n[-121.275349, 40.541646],\n[-121.246768, 40.541017],\n[-121.251343, 40.423383],\n[-121.32687, 40.423768],\n[-121.360619, 40.43479],\n[-121.363694, 40.409124],\n[-121.439713, 40.409197],\n[-121.439711, 40.423791],\n[-121.572133, 40.423548],\n[-121.577415, 40.550766],\n[-121.539486, 40.558107],\n[-121.520284, 40.572459],\n[-121.487219, 40.550822],\n[-121.446951, 40.56319],\n[-121.370644, 40.563267],\n[-121.353637, 40.584978]\n]\n]\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-121.415061, 40.506229]\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-121.505184, 40.488084]\n}\n},\n{\n'type': 'Feature',\n'geometry': {\n'type': 'Point',\n'coordinates': [-121.354465, 40.488737]\n}\n}\n]\n}\n});\nmap.addLayer({\n'id': 'park-boundary',\n'type': 'fill',\n'source': 'national-park',\n'paint': {\n'fill-color': '#888888',\n'fill-opacity': 0.4\n},\n'filter': ['==', '$type', 'Polygon']\n});\nmap.addLayer({\n'id': 'park-volcanoes',\n'type': 'circle',\n'source': 'national-park',\n'paint': {\n'circle-radius': 6,\n'circle-color': '#B42222'\n},\n'filter': ['==', '$type', 'Point']\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/navigation/","title":"Display map navigation controls","text":"<p>Add zoom and rotation controls to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display map navigation controls&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add zoom and rotation controls to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-74.5, 40], // starting position\nzoom: 9 // starting zoom\n});\n// Add zoom and rotation controls to the map.\nmap.addControl(new maplibregl.NavigationControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/offset-vanishing-point-with-padding/","title":"Offset the vanishing point using padding","text":"<p>Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Offset the vanishing point using padding&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.rounded-rect {\nbackground: white;\nborder-radius: 10px;\nbox-shadow: 0 0 50px -25px black;\n}\n.flex-center {\nposition: absolute;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n.flex-center.left {\nleft: 0px;\n}\n.flex-center.right {\nright: 0px;\n}\n.sidebar-content {\nposition: absolute;\nwidth: 95%;\nheight: 95%;\nfont-family: Arial, Helvetica, sans-serif;\nfont-size: 32px;\ncolor: gray;\n}\n.sidebar-toggle {\nposition: absolute;\nwidth: 1.3em;\nheight: 1.3em;\noverflow: visible;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n.sidebar-toggle.left {\nright: -1.5em;\n}\n.sidebar-toggle.right {\nleft: -1.5em;\n}\n.sidebar-toggle:hover {\ncolor: #0aa1cf;\ncursor: pointer;\n}\n.sidebar {\ntransition: transform 1s;\nz-index: 1;\nwidth: 300px;\nheight: 100%;\n}\n/*\n  The sidebar styling has them \"expanded\" by default, we use CSS transforms to push them offscreen\n  The toggleSidebar() function removes this class from the element in order to expand it.\n*/\n.left.collapsed {\ntransform: translateX(-295px);\n}\n.right.collapsed {\ntransform: translateX(295px);\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;\n&lt;div id=\"left\" class=\"sidebar flex-center left collapsed\"&gt;\n&lt;div class=\"sidebar-content rounded-rect flex-center\"&gt;\n            Left Sidebar\n            &lt;div\nclass=\"sidebar-toggle rounded-rect left\"\nonclick=\"toggleSidebar('left')\"\n&gt;\n&amp;rarr;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"right\" class=\"sidebar flex-center right collapsed\"&gt;\n&lt;div class=\"sidebar-content rounded-rect flex-center\"&gt;\n            Right Sidebar\n            &lt;div\nclass=\"sidebar-toggle rounded-rect right\"\nonclick=\"toggleSidebar('right')\"\n&gt;\n&amp;larr;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar center = [-77.01866, 38.888];\nvar map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 12.5,\ncenter: center,\npitch: 60,\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nnew maplibregl.Marker().setLngLat(center).addTo(map);\nfunction toggleSidebar(id) {\nvar elem = document.getElementById(id);\nvar classes = elem.className.split(' ');\nvar collapsed = classes.indexOf('collapsed') !== -1;\nvar padding = {};\nif (collapsed) {\n// Remove the 'collapsed' class from the class list of the element, this sets it back to the expanded state.\nclasses.splice(classes.indexOf('collapsed'), 1);\npadding[id] = 300; // In px, matches the width of the sidebars set in .sidebar CSS class\nmap.easeTo({\npadding: padding,\nduration: 1000 // In ms, CSS transition duration property for the sidebar matches this value\n});\n} else {\npadding[id] = 0;\n// Add the 'collapsed' class to the class list of the element\nclasses.push('collapsed');\nmap.easeTo({\npadding: padding,\nduration: 1000\n});\n}\n// Update the class list on the element\nelem.className = classes.join(' ');\n}\nmap.on('load', function () {\ntoggleSidebar('left');\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/polygon-popup-on-click/","title":"Show polygon information on click","text":"<p>When a user clicks a polygon, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Show polygon information on click&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"When a user clicks a polygon, show a popup containing more information.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.maplibregl-popup {\nmax-width: 400px;\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-100.04, 38.907],\nzoom: 3\n});\nmap.on('load', function () {\n// Add a source for the state polygons.\nmap.addSource('states', {\n'type': 'geojson',\n'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_1_states_provinces_shp.geojson'\n});\n// Add a layer showing the state polygons.\nmap.addLayer({\n'id': 'states-layer',\n'type': 'fill',\n'source': 'states',\n'paint': {\n'fill-color': 'rgba(200, 100, 240, 0.4)',\n'fill-outline-color': 'rgba(200, 100, 240, 1)'\n}\n});\n// When a click event occurs on a feature in the states layer, open a popup at the\n// location of the click, with description HTML from its properties.\nmap.on('click', 'states-layer', function (e) {\nnew maplibregl.Popup()\n.setLngLat(e.lngLat)\n.setHTML(e.features[0].properties.name)\n.addTo(map);\n});\n// Change the cursor to a pointer when the mouse is over the states layer.\nmap.on('mouseenter', 'states-layer', function () {\nmap.getCanvas().style.cursor = 'pointer';\n});\n// Change it back to a pointer when it leaves.\nmap.on('mouseleave', 'states-layer', function () {\nmap.getCanvas().style.cursor = '';\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/popup-on-click/","title":"Display a popup on click","text":"<p>When a user clicks a symbol, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display a popup on click&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"When a user clicks a symbol, show a popup containing more information.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.maplibregl-popup {\nmax-width: 400px;\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15\n});\nmap.on('load', function () {\nmap.addSource('places', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Make it Mount Pleasant&lt;/strong&gt;&lt;p&gt;&lt;a href=\"http://www.mtpleasantdc.com/makeitmtpleasant\" target=\"_blank\" title=\"Opens in a new window\"&gt;Make it Mount Pleasant&lt;/a&gt; is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.&lt;/p&gt;',\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.038659, 38.931567]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Mad Men Season Five Finale Watch Party&lt;/strong&gt;&lt;p&gt;Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a &lt;a href=\"http://madmens5finale.eventbrite.com/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Mad Men Season Five Finale Watch Party&lt;/a&gt;, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.&lt;/p&gt;',\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.003168, 38.894651]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Big Backyard Beach Bash and Wine Fest&lt;/strong&gt;&lt;p&gt;EatBar (2761 Washington Boulevard Arlington VA) is throwing a &lt;a href=\"http://tallulaeatbar.ticketleap.com/2012beachblanket/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Big Backyard Beach Bash and Wine Fest&lt;/a&gt; on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.grill hot dogs.&lt;/p&gt;',\n'icon': 'bar'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.090372, 38.881189]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Ballston Arts &amp; Crafts Market&lt;/strong&gt;&lt;p&gt;The &lt;a href=\"http://ballstonarts-craftsmarket.blogspot.com/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Ballston Arts &amp; Crafts Market&lt;/a&gt; sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.&lt;/p&gt;',\n'icon': 'art-gallery'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.111561, 38.882342]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Seersucker Bike Ride and Social&lt;/strong&gt;&lt;p&gt;Feeling dandy? Get fancy, grab your bike, and take part in this year\\'s &lt;a href=\"http://dandiesandquaintrelles.com/2012/04/the-seersucker-social-is-set-for-june-9th-save-the-date-and-start-planning-your-look/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Seersucker Social&lt;/a&gt; bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.&lt;/p&gt;',\n'icon': 'bicycle'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.052477, 38.943951]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Capital Pride Parade&lt;/strong&gt;&lt;p&gt;The annual &lt;a href=\"http://www.capitalpride.org/parade\" target=\"_blank\" title=\"Opens in a new window\"&gt;Capital Pride Parade&lt;/a&gt; makes its way through Dupont this Saturday. 4:30 p.m. Free.&lt;/p&gt;',\n'icon': 'rocket'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.043444, 38.909664]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Muhsinah&lt;/strong&gt;&lt;p&gt;Jazz-influenced hip hop artist &lt;a href=\"http://www.muhsinah.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Muhsinah&lt;/a&gt; plays the &lt;a href=\"http://www.blackcatdc.com\"&gt;Black Cat&lt;/a&gt; (1811 14th Street NW) tonight with &lt;a href=\"http://www.exitclov.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Exit Clov&lt;/a&gt; and &lt;a href=\"http://godsilla.bandcamp.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Gods\u2019illa&lt;/a&gt;. 9:00 p.m. $12.&lt;/p&gt;',\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.031706, 38.914581]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;A Little Night Music&lt;/strong&gt;&lt;p&gt;The Arlington Players\\' production of Stephen Sondheim\\'s  &lt;a href=\"http://www.thearlingtonplayers.org/drupal-6.20/node/4661/show\" target=\"_blank\" title=\"Opens in a new window\"&gt;&lt;em&gt;A Little Night Music&lt;/em&gt;&lt;/a&gt; comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.&lt;/p&gt;',\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.020945, 38.878241]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Truckeroo&lt;/strong&gt;&lt;p&gt;&lt;a href=\"http://www.truckeroodc.com/www/\" target=\"_blank\"&gt;Truckeroo&lt;/a&gt; brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.&lt;/p&gt;',\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.007481, 38.876516]\n}\n}\n]\n}\n});\n// Add a layer showing the places.\nmap.addLayer({\n'id': 'places',\n'type': 'symbol',\n'source': 'places',\n'layout': {\n'icon-image': '{icon}_15',\n'icon-overlap': 'always'\n}\n});\n// When a click event occurs on a feature in the places layer, open a popup at the\n// location of the feature, with description HTML from its properties.\nmap.on('click', 'places', function (e) {\nvar coordinates = e.features[0].geometry.coordinates.slice();\nvar description = e.features[0].properties.description;\n// Ensure that if the map is zoomed out such that multiple\n// copies of the feature are visible, the popup appears\n// over the copy being pointed to.\nwhile (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\ncoordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n}\nnew maplibregl.Popup()\n.setLngLat(coordinates)\n.setHTML(description)\n.addTo(map);\n});\n// Change the cursor to a pointer when the mouse is over the places layer.\nmap.on('mouseenter', 'places', function () {\nmap.getCanvas().style.cursor = 'pointer';\n});\n// Change it back to a pointer when it leaves.\nmap.on('mouseleave', 'places', function () {\nmap.getCanvas().style.cursor = '';\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/popup-on-hover/","title":"Display a popup on hover","text":"<p>When a user hovers over a custom marker, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display a popup on hover&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"When a user hovers over a custom marker, show a popup containing more information.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.maplibregl-popup {\nmax-width: 400px;\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15\n});\nmap.on('load', function () {\nmap.loadImage(\n'https://maplibre.org/maplibre-gl-js-docs/assets/custom_marker.png',\n// Add an image to use as a custom marker\nfunction (error, image) {\nif (error) throw error;\nmap.addImage('custom-marker', image);\nmap.addSource('places', {\n'type': 'geojson',\n'data': {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Make it Mount Pleasant&lt;/strong&gt;&lt;p&gt;Make it Mount Pleasant is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.038659, 38.931567]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Mad Men Season Five Finale Watch Party&lt;/strong&gt;&lt;p&gt;Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a Mad Men Season Five Finale Watch Party, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.003168, 38.894651]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Big Backyard Beach Bash and Wine Fest&lt;/strong&gt;&lt;p&gt;EatBar (2761 Washington Boulevard Arlington VA) is throwing a Big Backyard Beach Bash and Wine Fest on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.090372, 38.881189]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Ballston Arts &amp; Crafts Market&lt;/strong&gt;&lt;p&gt;The Ballston Arts &amp; Crafts Market sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.111561, 38.882342]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n\"&lt;strong&gt;Seersucker Bike Ride and Social&lt;/strong&gt;&lt;p&gt;Feeling dandy? Get fancy, grab your bike, and take part in this year's Seersucker Social bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.&lt;/p&gt;\"\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.052477, 38.943951]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Capital Pride Parade&lt;/strong&gt;&lt;p&gt;The annual Capital Pride Parade makes its way through Dupont this Saturday. 4:30 p.m. Free.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.043444, 38.909664]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Muhsinah&lt;/strong&gt;&lt;p&gt;Jazz-influenced hip hop artist Muhsinah plays the Black Cat (1811 14th Street NW) tonight with Exit Clov and Gods\u2019illa. 9:00 p.m. $12.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.031706, 38.914581]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n\"&lt;strong&gt;A Little Night Music&lt;/strong&gt;&lt;p&gt;The Arlington Players' production of Stephen Sondheim's &lt;em&gt;A Little Night Music&lt;/em&gt; comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.&lt;/p&gt;\"\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.020945, 38.878241]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description':\n'&lt;strong&gt;Truckeroo&lt;/strong&gt;&lt;p&gt;Truckeroo brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.&lt;/p&gt;'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.007481, 38.876516]\n}\n}\n]\n}\n});\n// Add a layer showing the places.\nmap.addLayer({\n'id': 'places',\n'type': 'symbol',\n'source': 'places',\n'layout': {\n'icon-image': 'custom-marker',\n'icon-overlap': 'always'\n}\n});\n}\n);\n// Create a popup, but don't add it to the map yet.\nvar popup = new maplibregl.Popup({\ncloseButton: false,\ncloseOnClick: false\n});\nmap.on('mouseenter', 'places', function (e) {\n// Change the cursor style as a UI indicator.\nmap.getCanvas().style.cursor = 'pointer';\nvar coordinates = e.features[0].geometry.coordinates.slice();\nvar description = e.features[0].properties.description;\n// Ensure that if the map is zoomed out such that multiple\n// copies of the feature are visible, the popup appears\n// over the copy being pointed to.\nwhile (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\ncoordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n}\n// Populate the popup and set its coordinates\n// based on the feature found.\npopup.setLngLat(coordinates).setHTML(description).addTo(map);\n});\nmap.on('mouseleave', 'places', function () {\nmap.getCanvas().style.cursor = '';\npopup.remove();\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/popup/","title":"Display a popup","text":"<p>Add a popup to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display a popup&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a popup to the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-96, 37.8],\nzoom: 3\n});\nvar popup = new maplibregl.Popup({ closeOnClick: false })\n.setLngLat([-96, 37.8])\n.setHTML('&lt;h1&gt;Hello World!&lt;/h1&gt;')\n.addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/queryrenderedfeatures/","title":"Get features under the mouse pointer","text":"<p>Use queryRenderedFeatures to show properties of hovered-over map elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Get features under the mouse pointer&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use queryRenderedFeatures to show properties of hovered-over map elements.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#features {\nposition: absolute;\ntop: 0;\nright: 0;\nbottom: 0;\nwidth: 50%;\noverflow: auto;\nbackground: rgba(255, 255, 255, 0.8);\n}\n#map canvas {\ncursor: crosshair;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"features\"&gt;&lt;/pre&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-96, 37.8],\nzoom: 3\n});\nmap.on('mousemove', function (e) {\nvar features = map.queryRenderedFeatures(e.point);\n// Limit the number of properties we're displaying for\n// legibility and performance\nvar displayProperties = [\n'type',\n'properties',\n'id',\n'layer',\n'source',\n'sourceLayer',\n'state'\n];\nvar displayFeatures = features.map(function (feat) {\nvar displayFeat = {};\ndisplayProperties.forEach(function (prop) {\ndisplayFeat[prop] = feat[prop];\n});\nreturn displayFeat;\n});\ndocument.getElementById('features').innerHTML = JSON.stringify(\ndisplayFeatures,\nnull,\n2\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/render-world-copies/","title":"Render world copies","text":"<p>Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Render world copies&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#menu {\nposition: absolute;\nbackground: #fff;\npadding: 10px;\nfont-family: 'Open Sans', sans-serif;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"menu\"&gt;\n&lt;div&gt;Set &lt;code&gt;renderWorldCopies&lt;/code&gt; to:&lt;/div&gt;\n&lt;div&gt;\n&lt;input type=\"radio\" id=\"true\" name=\"rtoggle\" value=\"true\" checked /&gt;\n&lt;label for=\"true\"&gt;true&lt;/label&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;input type=\"radio\" id=\"false\" name=\"rtoggle\" value=\"false\" /&gt;\n&lt;label for=\"false\"&gt;false&lt;/label&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\ncenter: [179, 0], // starting position [lng, lat]\nzoom: 0.01 // starting zoom\n});\nvar renderOptions = document.getElementById('menu');\nvar inputs = renderOptions.getElementsByTagName('input');\nfunction switchRenderOption(option) {\nvar status = option.target.id;\nmap.setRenderWorldCopies(status === 'true');\n}\nfor (var i = 0; i &lt; inputs.length; i++) {\ninputs[i].onclick = switchRenderOption;\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/restrict-bounds/","title":"Restrict map panning to an area","text":"<p>Prevent a map from being panned to a different place by setting maxBounds.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Restrict map panning to an area&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Prevent a map from being panned to a different place by setting maxBounds.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n// Set bounds to New York, New York\nvar bounds = [\n[-74.04728500751165, 40.68392799015035], // Southwest coordinates\n[-73.91058699000139, 40.87764500765852] // Northeast coordinates\n];\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-73.9978, 40.7209],\nzoom: 13,\nmaxBounds: bounds // Sets bounds as max\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/satellite-map/","title":"Display a satellite map","text":"<p>Display a satellite raster baselayer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display a satellite map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Display a satellite raster baselayer.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nzoom: 9,\ncenter: [137.9150899566626, 36.25956997955441],\nstyle:\n'https://api.maptiler.com/maps/hybrid/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/scroll-fly-to/","title":"Fly to a location based on scroll position","text":"<p>Scroll down through the story and the map will fly to the chapter's location.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Fly to a location based on scroll position&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Scroll down through the story and the map will fly to the chapter's location.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#map {\nposition: fixed;\nwidth: 50%;\n}\n#features {\nwidth: 50%;\nmargin-left: 50%;\nfont-family: sans-serif;\noverflow-y: scroll;\nbackground-color: #fafafa;\n}\nsection {\npadding: 25px 50px;\nline-height: 25px;\nborder-bottom: 1px solid #ddd;\nopacity: 0.25;\nfont-size: 13px;\n}\nsection.active {\nopacity: 1;\n}\nsection:last-child {\nborder-bottom: none;\nmargin-bottom: 200px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"features\"&gt;\n&lt;section id=\"baker\" class=\"active\"&gt;\n&lt;h3&gt;221b Baker St.&lt;/h3&gt;\n&lt;p&gt;\n            November 1895. London is shrouded in fog and Sherlock Holmes and\n            Watson pass time restlessly awaiting a new case. \"The London\n            criminal is certainly a dull fellow,\" Sherlock bemoans. \"There have\n            been numerous petty thefts,\" Watson offers in response. Just then a\n            telegram arrives from Sherlock's brother Mycroft with a mysterious\n            case.\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"aldgate\"&gt;\n&lt;h3&gt;Aldgate Station&lt;/h3&gt;\n&lt;p&gt;\n            Arthur Cadogan West was found dead, head crushed in on train tracks\n            at Aldgate Station at 6AM Tuesday morning. West worked at Woolwich\n            Arsenal on the Bruce-Partington submarine, a secret military\n            project. Plans for the submarine had been stolen and seven of the\n            ten missing papers were found in West's possession. Mycroft implores\n            Sherlock to take the case and recover the three missing papers.\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"london-bridge\"&gt;\n&lt;h3&gt;London Bridge&lt;/h3&gt;\n&lt;p&gt;\n            Holmes and Watson's investigations take them across London. Sherlock\n            deduces that West was murdered elsewhere, then moved to Aldgate\n            Station to create the illusion that he was crushed on the tracks by\n            a train. On their way to Woolwich Sherlock dispatches a telegram to\n            Mycroft at London Bridge: \"Send list of all foreign spies known to\n            be in England, with full address.\"\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"woolwich\"&gt;\n&lt;h3&gt;Woolwich Arsenal&lt;/h3&gt;\n&lt;p&gt;\n            While investigating at Woolwich Arsenal Sherlock learns that West\n            did not have the three keys&amp;mdash;door, office, and\n            safe&amp;mdash;necessary to steal the papers. The train station clerk\n            mentions seeing an agitated West boarding the 8:15 train to London\n            Bridge. Sherlock suspects West of following someone who had access\n            to the Woolwich chief's keyring with all three keys.\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"gloucester\"&gt;\n&lt;h3&gt;Gloucester Road&lt;/h3&gt;\n&lt;p&gt;\n            Mycroft responds to Sherlock's telegram and mentions several spies.\n            Hugo Oberstein of 13 Caulfield Gardens catches Sherlock's eye. He\n            heads to the nearby Gloucester Road station to investigate and\n            learns that the windows of Caulfield Gardens open over rail tracks\n            where trains stop frequently.\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"caulfield-gardens\"&gt;\n&lt;h3&gt;13 Caulfield Gardens&lt;/h3&gt;\n&lt;p&gt;\n            Holmes deduces that the murderer placed West atop a stopped train at\n            Caulfield Gardens. The train traveled to Aldgate Station before\n            West's body finally toppled off. Backtracking to the criminal's\n            apartment, Holmes finds a series of classified ads from\n            &lt;em&gt;The Daily Telegraph&lt;/em&gt; stashed away. All are under the name\n            Pierrot: \"Monday night after nine. Two taps. Only ourselves. Do not\n            be so suspicious. Payment in hard cash when goods delivered.\"\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"telegraph\"&gt;\n&lt;h3&gt;The Daily Telegraph&lt;/h3&gt;\n&lt;p&gt;\n            Holmes and Watson head to The Daily Telegraph and place an ad to\n            draw out the criminal. It reads: \"To-night. Same hour. Same place.\n            Two taps. Most vitally important. Your own safety at stake.\n            Pierrot.\" The trap works and Holmes catches the criminal: Colonel\n            Valentine Walter, the brother of Woolwich Arsenal's chief. He\n            confesses to working for Hugo Oberstein to obtain the submarine\n            plans in order to pay off his debts.\n        &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"charing-cross\"&gt;\n&lt;h3&gt;Charing Cross Hotel&lt;/h3&gt;\n&lt;p&gt;\n            Walter writes to Oberstein and convinces him to meet in the smoking\n            room of the Charing Cross Hotel where he promises additional plans\n            for the submarine in exchange for money. The plan works and Holmes\n            and Watson catch both criminals.\n        &lt;/p&gt;\n&lt;small id=\"citation\"&gt;\n            Adapted from\n            &lt;a href=\"http://www.gutenberg.org/files/2346/2346-h/2346-h.htm\"\n&gt;Project Gutenberg&lt;/a\n&gt;\n&lt;/small&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-0.15591514, 51.51830379],\nzoom: 15.5,\nbearing: 27,\npitch: 45\n});\nvar chapters = {\n'baker': {\nbearing: 27,\ncenter: [-0.15591514, 51.51830379],\nzoom: 15.5,\npitch: 20\n},\n'aldgate': {\nduration: 6000,\ncenter: [-0.07571203, 51.51424049],\nbearing: 150,\nzoom: 15,\npitch: 0\n},\n'london-bridge': {\nbearing: 90,\ncenter: [-0.08533793, 51.50438536],\nzoom: 13,\nspeed: 0.6,\npitch: 40\n},\n'woolwich': {\nbearing: 90,\ncenter: [0.05991101, 51.48752939],\nzoom: 12.3\n},\n'gloucester': {\nbearing: 45,\ncenter: [-0.18335806, 51.49439521],\nzoom: 15.3,\npitch: 20,\nspeed: 0.5\n},\n'caulfield-gardens': {\nbearing: 180,\ncenter: [-0.19684993, 51.5033856],\nzoom: 12.3\n},\n'telegraph': {\nbearing: 90,\ncenter: [-0.10669358, 51.51433123],\nzoom: 17.3,\npitch: 40\n},\n'charing-cross': {\nbearing: 90,\ncenter: [-0.12416858, 51.50779757],\nzoom: 14.3,\npitch: 20\n}\n};\n// On every scroll event, check which element is on screen\nwindow.onscroll = function () {\nvar chapterNames = Object.keys(chapters);\nfor (var i = 0; i &lt; chapterNames.length; i++) {\nvar chapterName = chapterNames[i];\nif (isElementOnScreen(chapterName)) {\nsetActiveChapter(chapterName);\nbreak;\n}\n}\n};\nvar activeChapterName = 'baker';\nfunction setActiveChapter(chapterName) {\nif (chapterName === activeChapterName) return;\nmap.flyTo(chapters[chapterName]);\ndocument.getElementById(chapterName).setAttribute('class', 'active');\ndocument.getElementById(activeChapterName).setAttribute('class', '');\nactiveChapterName = chapterName;\n}\nfunction isElementOnScreen(id) {\nvar element = document.getElementById(id);\nvar bounds = element.getBoundingClientRect();\nreturn bounds.top &lt; window.innerHeight &amp;&amp; bounds.bottom &gt; 0;\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/set-perspective/","title":"Set pitch and bearing","text":"<p>Initialize a map with pitch and bearing camera options.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Set pitch and bearing&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Initialize a map with pitch and bearing camera options.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n// camera options properties\ncenter: [-73.5804, 45.53483],\npitch: 60, // pitch in degrees\nbearing: -60, // bearing in degrees\nzoom: 10\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/set-popup/","title":"Attach a popup to a marker instance","text":"<p>Attach a popup to a marker and display it on click.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Attach a popup to a marker instance&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Attach a popup to a marker and display it on click.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n#marker {\nbackground-image: url('https://maplibre.org/maplibre-gl-js-docs/assets/washington-monument.jpg');\nbackground-size: cover;\nwidth: 50px;\nheight: 50px;\nborder-radius: 50%;\ncursor: pointer;\n}\n.maplibregl-popup {\nmax-width: 200px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar monument = [-77.0353, 38.8895];\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: monument,\nzoom: 15\n});\n// create the popup\nvar popup = new maplibregl.Popup({ offset: 25 }).setText(\n'Construction on the Washington Monument began in 1848.'\n);\n// create DOM element for the marker\nvar el = document.createElement('div');\nel.id = 'marker';\n// create the marker\nnew maplibregl.Marker(el)\n.setLngLat(monument)\n.setPopup(popup) // sets a popup on this marker\n.addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/simple-map/","title":"Display a map","text":"<p>Initialize a map in an HTML element with MapLibre GL JS.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Display a map&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Initialize a map in an HTML element with MapLibre GL JS.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle: 'https://demotiles.maplibre.org/style.json', // style URL\ncenter: [0, 0], // starting position [lng, lat]\nzoom: 1 // starting zoom\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/third-party/","title":"Add a third party vector tile source","text":"<p>Render vector data provided by Mapillary.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a third party vector tile source&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Render vector data provided by Mapillary.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 12,\ncenter: [-87.622088, 41.878781]\n});\nmap.on('load', function () {\n// Add Mapillary sequence layer.\n// https://www.mapillary.com/developer/tiles-documentation/#sequence-layer\nmap.addSource('mapillary', {\n'type': 'vector',\n'tiles': [\n'https://tiles.mapillary.com/maps/vtp/mly1_public/2/{z}/{x}/{y}'\n],\n'minzoom': 6,\n'maxzoom': 14\n});\nmap.addLayer(\n{\n'id': 'mapillary',\n'type': 'line',\n'source': 'mapillary',\n'source-layer': 'sequence',\n'layout': {\n'line-cap': 'round',\n'line-join': 'round'\n},\n'paint': {\n'line-opacity': 0.6,\n'line-color': 'rgb(53, 175, 109)',\n'line-width': 2\n}\n},\n'water_name_line'\n);\n});\nmap.addControl(new maplibregl.NavigationControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/timeline-animation/","title":"Create a time slider","text":"<p>Visualize earthquakes with a range slider.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Create a time slider&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Visualize earthquakes with a range slider.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.map-overlay {\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nposition: absolute;\nwidth: 25%;\ntop: 0;\nleft: 0;\npadding: 10px;\n}\n.map-overlay .map-overlay-inner {\nbackground-color: #fff;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\nborder-radius: 3px;\npadding: 10px;\nmargin-bottom: 10px;\n}\n.map-overlay h2 {\nline-height: 24px;\ndisplay: block;\nmargin: 0 0 10px;\n}\n.map-overlay .legend .bar {\nheight: 10px;\nwidth: 100%;\nbackground: linear-gradient(to right, #fca107, #7f3121);\n}\n.map-overlay input {\nbackground-color: transparent;\ndisplay: inline-block;\nwidth: 100%;\nposition: relative;\nmargin: 0;\ncursor: ew-resize;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n&lt;div class=\"map-overlay-inner\"&gt;\n&lt;h2&gt;Significant earthquakes in 2015&lt;/h2&gt;\n&lt;label id=\"month\"&gt;&lt;/label&gt;\n&lt;input id=\"slider\" type=\"range\" min=\"0\" max=\"11\" step=\"1\" value=\"0\" /&gt;\n&lt;/div&gt;\n&lt;div class=\"map-overlay-inner\"&gt;\n&lt;div id=\"legend\" class=\"legend\"&gt;\n&lt;div class=\"bar\"&gt;&lt;/div&gt;\n&lt;div&gt;Magnitude (m)&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script src=\"https://d3js.org/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [31.4606, 20.7927],\nzoom: 0.5\n});\nvar months = [\n'January',\n'February',\n'March',\n'April',\n'May',\n'June',\n'July',\n'August',\n'September',\n'October',\n'November',\n'December'\n];\nfunction filterBy(month) {\nvar filters = ['==', 'month', month];\nmap.setFilter('earthquake-circles', filters);\nmap.setFilter('earthquake-labels', filters);\n// Set the label to the month\ndocument.getElementById('month').textContent = months[month];\n}\nmap.on('load', function () {\n// Data courtesy of http://earthquake.usgs.gov/\n// Query for significant earthquakes in 2015 URL request looked like this:\n// http://earthquake.usgs.gov/fdsnws/event/1/query\n//    ?format=geojson\n//    &amp;starttime=2015-01-01\n//    &amp;endtime=2015-12-31\n//    &amp;minmagnitude=6'\n//\n// Here we're using d3 to help us make the ajax request but you can use\n// Any request method (library or otherwise) you wish.\nd3.json(\n'https://maplibre.org/maplibre-gl-js-docs/assets/significant-earthquakes-2015.geojson',\nfunction (err, data) {\nif (err) throw err;\n// Create a month property value based on time\n// used to filter against.\ndata.features = data.features.map(function (d) {\nd.properties.month = new Date(d.properties.time).getMonth();\nreturn d;\n});\nmap.addSource('earthquakes', {\n'type': 'geojson',\ndata: data\n});\nmap.addLayer({\n'id': 'earthquake-circles',\n'type': 'circle',\n'source': 'earthquakes',\n'paint': {\n'circle-color': [\n'interpolate',\n['linear'],\n['get', 'mag'],\n6,\n'#FCA107',\n8,\n'#7F3121'\n],\n'circle-opacity': 0.75,\n'circle-radius': [\n'interpolate',\n['linear'],\n['get', 'mag'],\n6,\n20,\n8,\n40\n]\n}\n});\nmap.addLayer({\n'id': 'earthquake-labels',\n'type': 'symbol',\n'source': 'earthquakes',\n'layout': {\n'text-field': [\n'concat',\n['to-string', ['get', 'mag']],\n'm'\n],\n'text-font': [\n'Open Sans Bold',\n'Arial Unicode MS Bold'\n],\n'text-size': 12\n},\n'paint': {\n'text-color': 'rgba(0,0,0,0.5)'\n}\n});\n// Set filter to first month of the year\n// 0 = January\nfilterBy(0);\ndocument\n.getElementById('slider')\n.addEventListener('input', function (e) {\nvar month = parseInt(e.target.value, 10);\nfilterBy(month);\n});\n}\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/toggle-interaction-handlers/","title":"Toggle interactions","text":"<p>Enable or disable UI handlers on a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Toggle interactions&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Enable or disable UI handlers on a map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.listing-group {\nfont: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nfont-weight: 600;\nposition: absolute;\ntop: 10px;\nright: 10px;\nz-index: 1;\nborder-radius: 3px;\nmax-width: 20%;\ncolor: #fff;\n}\n.listing-group input[type='checkbox']:first-child + label {\nborder-radius: 3px 3px 0 0;\n}\n.listing-group label:last-child {\nborder-radius: 0 0 3px 3px;\nborder: none;\n}\n.listing-group input[type='checkbox'] {\ndisplay: none;\n}\n.listing-group input[type='checkbox'] + label {\nbackground-color: #3386c0;\ndisplay: block;\ncursor: pointer;\npadding: 10px;\nborder-bottom: 1px solid rgba(0, 0, 0, 0.25);\n}\n.listing-group input[type='checkbox'] + label {\nbackground-color: #3386c0;\ntext-transform: capitalize;\n}\n.listing-group input[type='checkbox'] + label:hover,\n.listing-group input[type='checkbox']:checked + label {\nbackground-color: #4ea0da;\n}\n.listing-group input[type='checkbox']:checked + label:before {\ncontent: '\u2714';\nmargin-right: 5px;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;nav id=\"listing-group\" class=\"listing-group\"&gt;\n&lt;input type=\"checkbox\" id=\"scrollZoom\" checked=\"checked\" /&gt;\n&lt;label for=\"scrollZoom\"&gt;Scroll zoom&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"boxZoom\" checked=\"checked\" /&gt;\n&lt;label for=\"boxZoom\"&gt;Box zoom&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"dragRotate\" checked=\"checked\" /&gt;\n&lt;label for=\"dragRotate\"&gt;Drag rotate&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"dragPan\" checked=\"checked\" /&gt;\n&lt;label for=\"dragPan\"&gt;Drag pan&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"keyboard\" checked=\"checked\" /&gt;\n&lt;label for=\"keyboard\"&gt;Keyboard&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"doubleClickZoom\" checked=\"checked\" /&gt;\n&lt;label for=\"doubleClickZoom\"&gt;Double click zoom&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"touchZoomRotate\" checked=\"checked\" /&gt;\n&lt;label for=\"touchZoomRotate\"&gt;Touch zoom rotate&lt;/label&gt;\n&lt;/nav&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15\n});\ndocument\n.getElementById('listing-group')\n.addEventListener('change', function (e) {\nvar handler = e.target.id;\nif (e.target.checked) {\nmap[handler].enable();\n} else {\nmap[handler].disable();\n}\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/variable-label-placement/","title":"Variable label placement","text":"<p>Use text-variable-anchor to allow high priority labels to shift position to stay on the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Variable label placement&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use text-variable-anchor to allow high priority labels to shift position to stay on the map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar places = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'properties': {\n'description': \"Ford's Theater\",\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.038659, 38.931567]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description': 'The Gaslight',\n'icon': 'theatre'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.003168, 38.894651]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description': \"Horrible Harry's\",\n'icon': 'bar'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.090372, 38.881189]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description': 'Bike Party',\n'icon': 'bicycle'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.052477, 38.943951]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description': 'Rockabilly Rockstars',\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.031706, 38.914581]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description': 'District Drum Tribe',\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.020945, 38.878241]\n}\n},\n{\n'type': 'Feature',\n'properties': {\n'description': 'Motown Memories',\n'icon': 'music'\n},\n'geometry': {\n'type': 'Point',\n'coordinates': [-77.007481, 38.876516]\n}\n}\n]\n};\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.04, 38.907],\nzoom: 11.15\n});\nmap.on('load', function () {\n// Add a GeoJSON source containing place coordinates and information.\nmap.addSource('places', {\n'type': 'geojson',\n'data': places\n});\nmap.addLayer({\n'id': 'poi-labels',\n'type': 'symbol',\n'source': 'places',\n'layout': {\n'text-field': ['get', 'description'],\n'text-variable-anchor': ['top', 'bottom', 'left', 'right'],\n'text-radial-offset': 0.5,\n'text-justify': 'auto',\n'icon-image': ['concat', ['get', 'icon'], '_15']\n}\n});\nmap.rotateTo(180, { duration: 10000 });\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/vector-source/","title":"Add a vector tile source","text":"<p>Add a vector source to a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a vector tile source&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add a vector source to a map.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 13,\ncenter: [-122.447303, 37.753574]\n});\nmap.on('load', function () {\nmap.addSource('contours', {\ntype: 'vector',\nurl:\n'https://api.maptiler.com/tiles/contours/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n});\nmap.addLayer({\n'id': 'terrain-data',\n'type': 'line',\n'source': 'contours',\n'source-layer': 'contour',\n'layout': {\n'line-join': 'round',\n'line-cap': 'round'\n},\n'paint': {\n'line-color': '#ff69b4',\n'line-width': 1\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/video-on-a-map/","title":"Add a video","text":"<p>Display a video on top of a satellite raster baselayer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a video&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Display a video on top of a satellite raster baselayer.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar videoStyle = {\n'version': 8,\n'sources': {\n'satellite': {\n'type': 'raster',\n'url':\n'https://api.maptiler.com/tiles/satellite/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n'tileSize': 256\n},\n'video': {\n'type': 'video',\n'urls': [\n'https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4',\n'https://static-assets.mapbox.com/mapbox-gl-js/drone.webm'\n],\n'coordinates': [\n[-122.51596391201019, 37.56238816766053],\n[-122.51467645168304, 37.56410183312965],\n[-122.51309394836426, 37.563391708549425],\n[-122.51423120498657, 37.56161849366671]\n]\n}\n},\n'layers': [\n{\n'id': 'background',\n'type': 'background',\n'paint': {\n'background-color': 'rgb(4,7,14)'\n}\n},\n{\n'id': 'satellite',\n'type': 'raster',\n'source': 'satellite'\n},\n{\n'id': 'video',\n'type': 'raster',\n'source': 'video'\n}\n]\n};\nvar map = new maplibregl.Map({\ncontainer: 'map',\nminZoom: 14,\nzoom: 17,\ncenter: [-122.514426, 37.562984],\nbearing: -96,\nstyle: videoStyle\n});\nvar playingVideo = true;\nmap.on('click', function () {\nplayingVideo = !playingVideo;\nif (playingVideo) map.getSource('video').play();\nelse map.getSource('video').pause();\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/visualize-population-density/","title":"Visualize population density","text":"<p>Use a variable binding expression to calculate and display population density.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Visualize population density&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Use a variable binding expression to calculate and display population density.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\ncenter: [30.0222, -1.9596], // starting position [lng, lat]\nzoom: 7 // starting zoom\n});\nmap.on('load', function () {\nmap.addSource('rwanda-provinces', {\n'type': 'geojson',\n'data':\n'https://maplibre.org/maplibre-gl-js-docs/assets/rwanda-provinces.geojson'\n});\nmap.addLayer({\n'id': 'rwanda-provinces',\n'type': 'fill',\n'source': 'rwanda-provinces',\n'layout': {},\n'paint': {\n'fill-color': [\n'let',\n'density',\n['/', ['get', 'population'], ['get', 'sq-km']],\n[\n'interpolate',\n['linear'],\n['zoom'],\n8,\n[\n'interpolate',\n['linear'],\n['var', 'density'],\n274,\n['to-color', '#edf8e9'],\n1551,\n['to-color', '#006d2c']\n],\n10,\n[\n'interpolate',\n['linear'],\n['var', 'density'],\n274,\n['to-color', '#eff3ff'],\n1551,\n['to-color', '#08519c']\n]\n]\n],\n'fill-opacity': 0.7\n}\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/wms/","title":"Add a WMS source","text":"<p>Add an external Web Map Service raster layer to the map using addSource's tiles option.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Add a WMS source&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Add an external Web Map Service raster layer to the map using addSource's tiles option.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\nzoom: 8,\ncenter: [-74.5447, 40.6892]\n});\nmap.on('load', function () {\nmap.addSource('wms-test-source', {\n'type': 'raster',\n// use the tiles option to specify a WMS tile source URL\n// https://maplibre.org/maplibre-style-spec/sources/\n'tiles': [\n'https://img.nj.gov/imagerywms/Natural2015?bbox={bbox-epsg-3857}&amp;format=image/png&amp;service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;srs=EPSG:3857&amp;transparent=true&amp;width=256&amp;height=256&amp;layers=Natural2015'\n],\n'tileSize': 256\n});\nmap.addLayer(\n{\n'id': 'wms-test-layer',\n'type': 'raster',\n'source': 'wms-test-source',\n'paint': {}\n},\n'aeroway_fill'\n);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/zoomto-linestring/","title":"Fit to the bounds of a LineString","text":"<p>Get the bounds of a LineString.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Fit to the bounds of a LineString&lt;/title&gt;\n&lt;meta property=\"og:description\" content=\"Get the bounds of a LineString.\" /&gt;\n&lt;meta charset='utf-8'&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.css' /&gt;\n&lt;script src='https://unpkg.com/maplibre-gl@3.1.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n&lt;style&gt;\nbody { margin: 0; padding: 0; }\nhtml, body, #map { height: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n.btn-control {\nfont: bold 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\nbackground-color: #3386c0;\ncolor: #fff;\nposition: absolute;\ntop: 20px;\nleft: 50%;\nz-index: 1;\nborder: none;\nwidth: 200px;\nmargin-left: -100px;\ndisplay: block;\ncursor: pointer;\npadding: 10px 20px;\nborder-radius: 3px;\n}\n.btn-control:hover {\nbackground-color: #4ea0da;\n}\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"zoomto\" class=\"btn-control\"&gt;Zoom to bounds&lt;/button&gt;\n&lt;script&gt;\n// A GeoJSON object with a LineString route from the White House to Capitol Hill\nvar geojson = {\n'type': 'FeatureCollection',\n'features': [\n{\n'type': 'Feature',\n'geometry': {\n'type': 'LineString',\n'properties': {},\n'coordinates': [\n[-77.0366048812866, 38.89873175227713],\n[-77.03364372253417, 38.89876515143842],\n[-77.03364372253417, 38.89549195896866],\n[-77.02982425689697, 38.89549195896866],\n[-77.02400922775269, 38.89387200688839],\n[-77.01519012451172, 38.891416957534204],\n[-77.01521158218382, 38.892068305429156],\n[-77.00813055038452, 38.892051604275686],\n[-77.00832366943358, 38.89143365883688],\n[-77.00818419456482, 38.89082405874451],\n[-77.00815200805664, 38.88989712255097]\n]\n}\n}\n]\n};\nvar map = new maplibregl.Map({\ncontainer: 'map',\nstyle:\n'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\ncenter: [-77.0214, 38.897],\nzoom: 12\n});\nmap.on('load', function () {\nmap.addSource('LineString', {\n'type': 'geojson',\n'data': geojson\n});\nmap.addLayer({\n'id': 'LineString',\n'type': 'line',\n'source': 'LineString',\n'layout': {\n'line-join': 'round',\n'line-cap': 'round'\n},\n'paint': {\n'line-color': '#BF93E4',\n'line-width': 5\n}\n});\ndocument\n.getElementById('zoomto')\n.addEventListener('click', function () {\n// Geographic coordinates of the LineString\nvar coordinates = geojson.features[0].geometry.coordinates;\n// Pass the first coordinates in the LineString to `lngLatBounds` &amp;\n// wrap each coordinate pair in `extend` to include them in the bounds\n// result. A variation of this technique could be applied to zooming\n// to the bounds of multiple Points or Polygon geomteries - it just\n// requires wrapping all the coordinates with the extend method.\nvar bounds = coordinates.reduce(function (bounds, coord) {\nreturn bounds.extend(coord);\n}, new maplibregl.LngLatBounds(coordinates[0], coordinates[0]));\nmap.fitBounds(bounds, {\npadding: 20\n});\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}